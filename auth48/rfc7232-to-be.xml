<?xml version="1.0" encoding="US-ASCII"?>
<!--
    This XML document is the output of clean-for-DTD.xslt; a tool that strips
    extensions to RFC2629(bis) from documents for processing with xml2rfc.
-->

<!-- [rfced] Please note that xml2rfc v1 was used to create the text file in
order to get the full contents of the Index.
-->

<?xml-stylesheet type='text/xsl' href='../myxml2rfc.xslt'?>
<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no" ?>
<?rfc linkmailto="no" ?>
<?rfc editing="no" ?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc rfcedstyle="yes"?>
<!DOCTYPE rfc
  PUBLIC "" "rfc2629.dtd">
<rfc submissionType="IETF" obsoletes="2616" category="std" consensus="yes" ipr="pre5378Trust200902" number="7232">



<front>

  <title abbrev="HTTP/1.1 Conditional Requests">Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests</title>

  <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
    <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
    <address>
      <postal>
        <street>345 Park Ave</street>
        <city>San Jose</city>
        <region>CA</region>
        <code>95110</code>
        <country>USA</country>
      </postal>
      <email>fielding@gbiv.com</email>
      <uri>http://roy.gbiv.com/</uri>
    </address>
  </author>

  <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
    <organization abbrev="greenbytes">greenbytes GmbH</organization>
    <address>
      <postal>
        <street>Hafenweg 16</street>
        <city>Muenster</city><region>NW</region><code>48155</code>
        <country>Germany</country>
      </postal>
      <email>julian.reschke@greenbytes.de</email>
      <uri>http://greenbytes.de/tech/webdav/</uri>
    </address>
  </author>

  <date month="May" year="2014"/>

  <area>Applications</area>
  <workgroup>HTTPbis Working Group</workgroup>

<!-- [rfced] Please insert any keywords (beyond those that appear in 
the title) for use on http://www.rfc-editor.org/search.
-->

<keyword>example</keyword>


<abstract>
<t>
   The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for
   distributed, collaborative, hypertext information systems. This document
   defines HTTP/1.1 conditional requests, including metadata header fields
   for indicating state changes, request header fields for making
   preconditions on such state, and rules for constructing the responses to a
   conditional request when one or more preconditions evaluate to false.
</t>
</abstract>

</front>

<middle>
<section title="Introduction" anchor="introduction">
<t>
   Conditional requests are HTTP requests <xref target="RFC7231"/> that include
   one or more header fields indicating a precondition to be tested before
   applying the method semantics to the target resource.
   This document defines the HTTP/1.1 conditional request mechanisms in terms
   of the architecture, syntax notation, and conformance criteria defined in
   <xref target="RFC7230"/>.
</t>
<t>
   Conditional GET requests are the most efficient mechanism for HTTP
   cache updates <xref target="RFC7234"/>.  Conditionals can also be
   applied to state-changing methods, such as PUT and DELETE, to prevent
   the "lost update" problem: one client accidentally overwriting
   the work of another client that has been acting in parallel.
</t>
<t><iref primary="true" item="selected representation"/>
   Conditional request preconditions are based on the state of the target
   resource as a whole (its current value set) or the state as observed
   in a previously obtained representation (one value in that set).
   A resource might have multiple current representations, each with its
   own observable state.  The conditional request mechanisms assume that
   the mapping of requests to a "selected representation" (Section 3 of <xref target="RFC7231"/>)
   will be consistent over time if the server intends to take advantage of
   conditionals. Regardless, if the mapping is inconsistent and the server is
   unable to select the appropriate representation, then no harm will result
   when the precondition evaluates to false.
</t>
<t>
   The conditional request preconditions defined by this specification
   (<xref target="preconditions"/>) are evaluated when applicable to the
   recipient (<xref target="evaluation"/>) according to their order of
   precedence (<xref target="precedence"/>).
</t>

<section title="Conformance and Error Handling" anchor="conformance">
<t>
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in <xref target="RFC2119"/>.
</t>
<t>
   Conformance criteria and considerations regarding error handling
   are defined in Section 2.5 of <xref target="RFC7230"/>.
</t>
</section>

<section title="Syntax Notation" anchor="notation">
<t>
   This specification uses the Augmented Backus-Naur Form (ABNF) notation of
   <xref target="RFC5234"/> with a list extension, defined in
   Section 7 of <xref target="RFC7230"/>, that allows for compact definition of
   comma-separated lists using a '#' operator (similar to how the '*' operator
   indicates repetition).
   <xref target="imported.abnf"/> describes rules imported from
   other documents. 
   <xref target="collected.abnf"/> shows the collected grammar with all list
   operators expanded to standard ABNF notation.
</t>
</section>
</section>

<section title="Validators" anchor="validators">
   <iref primary="true" item="metadata"/>
   <iref primary="true" item="validator"/>
<t>
   This specification defines two forms of metadata that are commonly used
   to observe resource state and test for preconditions: modification dates
   (<xref target="header.last-modified"/>) and opaque entity tags
   (<xref target="header.etag"/>).  Additional metadata that reflects resource state
   has been defined by various extensions of HTTP, such as Web Distributed Authoring and Versioning (WebDAV)
   <xref target="RFC4918"/>, that are beyond the scope of this specification.
   A resource metadata value is referred to as a "validator"
   when it is used within a precondition.
</t>

<section title="Weak versus Strong" anchor="weak.and.strong.validators">
   <iref primary="true" item="validator" subitem="weak"/>
   <iref primary="true" item="validator" subitem="strong"/>
<t>
   Validators come in two flavors: strong or weak.  Weak validators are easy
   to generate but are far less useful for comparisons.  Strong validators
   are ideal for comparisons but can be very difficult (and occasionally
   impossible) to generate efficiently.  Rather than impose that all forms
   of resource adhere to the same strength of validator, HTTP exposes the
   type of validator in use and imposes restrictions on when weak validators
   can be used as preconditions.
</t>
<t>
   A "strong validator" is representation metadata that changes value whenever
   a change occurs to the representation data that would be observable in the
   payload body of a 200 (OK) response to GET.
</t>
<t>   
   A strong validator might change for reasons other than a change to the
   representation data, such as when a
   semantically significant part of the representation metadata is changed
   (e.g., Content-Type), but it is in the best interests of the
   origin server to change only the value when it is necessary to invalidate
   the stored responses held by remote caches and authoring tools.
</t>
<t>
   Cache entries might persist for arbitrarily long periods, regardless
   of expiration times.  Thus, a cache might attempt to validate an
   entry using a validator that it obtained in the distant past.
   A strong validator is unique across all versions of all
   representations associated with a particular resource over time.
   However, there is no implication of uniqueness across representations
   of different resources (i.e., the same strong validator might be
   in use for representations of multiple resources at the same time
   and does not imply that those representations are equivalent).
</t>
<t>
   There are a variety of strong validators used in practice.  The best are
   based on strict revision control, wherein each change to a representation
   always results in a unique node name and revision identifier being assigned
   before the representation is made accessible to GET.  A collision-resistant hash
   function applied to the representation data is also sufficient if the data
   is available prior to the response header fields being sent and the digest
   does not need to be recalculated every time a validation request is
   received.  However, if a resource has distinct representations that differ
   only in their metadata, such as might occur with content negotiation over
   media types that happen to share the same data format, then the origin
   server needs to incorporate additional information in the validator to
   distinguish those representations.
</t>
<t>
   In contrast, a "weak validator" is representation metadata that
   might not change for every change to the representation data.  This
   weakness might be due to limitations in how the value is calculated, such
   as clock resolution, an inability to ensure uniqueness for all possible
   representations of the resource, or a desire of the resource owner
   to group representations by some self-determined set of equivalency
   rather than unique sequences of data.  An origin server SHOULD change a
   weak entity-tag whenever it considers prior representations to be
   unacceptable as a substitute for the current representation. In other words,
   a weak entity-tag ought to change whenever the origin server wants caches to
   invalidate old responses.
</t>
<t>
   For example, the representation of a weather report that changes in
   content every second, based on dynamic measurements, might be grouped
   into sets of equivalent representations (from the origin server's
   perspective) with the same weak validator in order to allow cached
   representations to be valid for a reasonable period of time (perhaps
   adjusted dynamically based on server load or weather quality).
   Likewise, a representation's modification time, if defined with only
   one-second resolution, might be a weak validator if it is possible
   for the representation to be modified twice during a single second and
   retrieved between those modifications.
</t>
<t>
   Likewise, a validator is weak if it is shared by two or more
   representations of a given resource at the same time, unless those
   representations have identical representation data. For example, if the
   origin server sends the same validator for a representation with a gzip
   content coding applied as it does for a representation with no content
   coding, then that validator is weak. However, two simultaneous
   representations might share the same strong validator if they differ only
   in the representation metadata, such as when two different media types are
   available for the same representation data.
</t>
<t>
   Strong validators are usable for all conditional requests, including cache
   validation, partial content ranges, and "lost update" avoidance.
   Weak validators are only usable when the client does not require exact
   equality with previously obtained representation data, such as when
   validating a cache entry or limiting a web traversal to recent changes.
</t>
</section>

<section title="Last-Modified" anchor="header.last-modified">
  <iref primary="true" item="Last-Modified header field"/>
  
<t>
   The "Last-Modified" header field in a response provides a timestamp
   indicating the date and time at which the origin server believes the
   selected representation was last modified, as determined at the conclusion
   of handling the request.
</t>
<figure><iref primary="true" item="Grammar" subitem="Last-Modified"/><artwork type="abnf2616"><![CDATA[
  Last-Modified = HTTP-date
]]></artwork></figure>
<t>
   An example of its use is
</t>
<figure><artwork type="example"><![CDATA[
  Last-Modified: Tue, 15 Nov 1994 12:45:26 GMT
]]></artwork></figure>

<section title="Generation" anchor="lastmod.generation">
<t>
   An origin server SHOULD send Last-Modified for any selected
   representation for which a last modification date can be reasonably
   and consistently determined, since its use in conditional requests
   and evaluating cache freshness (<xref target="RFC7234"/>) results in a substantial
   reduction of HTTP traffic on the Internet and can be a significant
   factor in improving service scalability and reliability.
</t>
<t>
   A representation is typically the sum of many parts behind the
   resource interface.  The last-modified time would usually be
   the most recent time that any of those parts were changed.
   How that value is determined for any given resource is an
   implementation detail beyond the scope of this specification.
   What matters to HTTP is how recipients of the Last-Modified
   header field can use its value to make conditional requests
   and test the validity of locally cached responses.
</t>
<t>
   An origin server SHOULD obtain the Last-Modified value of the
   representation as close as possible to the time that it generates the
   Date field value for its response. This allows a recipient to
   make an accurate assessment of the representation's modification time,
   especially if the representation changes near the time that the
   response is generated.
</t>
<t>
   An origin server with a clock MUST NOT send a Last-Modified date
   that is later than the server's time of message origination (Date).
   If the last modification time is derived from implementation-specific
   metadata that evaluates to some time in the future, according to the
   origin server's clock, then the origin server MUST replace that
   value with the message origination date. This prevents a future
   modification date from having an adverse impact on cache validation.
</t>
<t>
   An origin server without a clock MUST NOT assign Last-Modified
   values to a response unless these values were associated
   with the resource by some other system or user with a reliable clock.
</t>
</section>

<section title="Comparison" anchor="lastmod.comparison">
<t>
   A Last-Modified time, when used as a validator in a request, is
   implicitly weak unless it is possible to deduce that it is strong,
   using the following rules:
  <list style="symbols">
     <t>The validator is being compared by an origin server to the
        actual current validator for the representation and,</t>
     <t>That origin server reliably knows that the associated representation did
        not change twice during the second covered by the presented
        validator.</t>
  </list>
</t>
<t>
   or


  <list style="symbols">
     <t>The validator is about to be used by a client in an <xref target="header.if-modified-since" format="none">If-Modified-Since</xref> or
        <xref target="header.if-unmodified-since" format="none">If-Unmodified-Since</xref> header field, because the client has
        a cache entry, or If-Range for the associated
        representation, and</t>
     <t>That cache entry includes a Date value, which gives the
        time when the origin server sent the original response, and</t>
     <t>The presented Last-Modified time is at least 60 seconds before
        the Date value.</t>
  </list>
</t>
<t>
   or
  <list style="symbols">
     <t>The validator is being compared by an intermediate cache to the
        validator stored in its cache entry for the representation, and</t>
     <t>That cache entry includes a Date value, which gives the
        time when the origin server sent the original response, and</t>
     <t>The presented Last-Modified time is at least 60 seconds before
        the Date value.</t>
  </list>
</t>
<t>
   This method relies on the fact that if two different responses were
   sent by the origin server during the same second, but both had the
   same Last-Modified time, then at least one of those responses would
   have a Date value equal to its Last-Modified time. The
   arbitrary 60-second limit guards against the possibility that the Date and
   Last-Modified values are generated from different clocks or at somewhat
   different times during the preparation of the response. An
   implementation MAY use a value larger than 60 seconds, if it is
   believed that 60 seconds is too short.
</t>
</section>
</section>

<section title="ETag" anchor="header.etag">
  <iref primary="true" item="ETag header field"/>
  
  
  
  
  
<t>
   The "ETag" header field in a response provides the current entity-tag for
   the selected representation, as determined at the conclusion of handling
   the request.
   An entity-tag is an opaque validator for differentiating between
   multiple representations of the same resource, regardless of whether
   those multiple representations are due to resource state changes over
   time, content negotiation resulting in multiple representations being
   valid at the same time, or both. An entity-tag consists of an opaque
   quoted string, possibly prefixed by a weakness indicator.
</t>
<figure><iref primary="true" item="Grammar" subitem="ETag"/><iref primary="true" item="Grammar" subitem="entity-tag"/><iref primary="true" item="Grammar" subitem="weak"/><iref primary="true" item="Grammar" subitem="opaque-tag"/><iref primary="true" item="Grammar" subitem="etagc"/><artwork type="abnf2616"><![CDATA[
  ETag       = entity-tag

  entity-tag = [ weak ] opaque-tag
  weak       = %x57.2F ; "W/", case-sensitive
  opaque-tag = DQUOTE *etagc DQUOTE
  etagc      = %x21 / %x23-7E / obs-text
             ; VCHAR except double quotes, plus obs-text
]]></artwork></figure>
<t><list>
  <t>
    Note: Previously, opaque-tag was defined to be a quoted-string
    (<xref target="RFC2616"/>, Section 3.11); thus, some recipients
    might perform backslash unescaping. Servers therefore ought to avoid
    backslash characters in entity tags.
  </t>
</list></t>
<t>
   An entity-tag can be more reliable for validation than a modification
   date in situations where it is inconvenient to store modification
   dates, where the one-second resolution of HTTP date values is not
   sufficient, or where modification dates are not consistently maintained.
</t>
<figure><preamble>
  Examples:
</preamble>
<artwork type="example"><![CDATA[
  ETag: "xyzzy"
  ETag: W/"xyzzy"
  ETag: ""
]]></artwork></figure>
<t>
   An entity-tag can be either a weak or strong validator, with
   strong being the default.  If an origin server provides an entity-tag
   for a representation and the generation of that entity-tag does not satisfy
   all of the characteristics of a strong validator
   (<xref target="weak.and.strong.validators"/>), then the origin server
   MUST mark the entity-tag as weak by prefixing its opaque value
   with "W/" (case-sensitive).
</t>

<section title="Generation" anchor="entity.tag.generation">
<t>
   The principle behind entity-tags is that only the service author
   knows the implementation of a resource well enough to select the
   most accurate and efficient validation mechanism for that resource,
   and that any such mechanism can be mapped to a simple sequence of
   octets for easy comparison.  Since the value is opaque, there is no
   need for the client to be aware of how each entity-tag is constructed.
</t>
<t>
   For example, a resource that has implementation-specific versioning
   applied to all changes might use an internal revision number, perhaps
   combined with a variance identifier for content negotiation, to
   accurately differentiate between representations.
   Other implementations might use a collision-resistant hash of
   representation content, a combination of various file attributes, or
   a modification timestamp that has sub-second resolution.
</t>
<t>
   An origin server SHOULD send an ETag for any selected representation
   for which detection of changes can be reasonably and consistently
   determined, since the entity-tag's use in conditional requests and
   evaluating cache freshness (<xref target="RFC7234"/>) can result in a substantial
   reduction of HTTP network traffic and can be a significant factor in
   improving service scalability and reliability.
</t>
</section>

<section title="Comparison" anchor="entity.tag.comparison">
  
  
  
<t>
   There are two entity-tag comparison functions, depending
   on whether or not the comparison context allows the use of weak validators:
  <list style="symbols">
     <t>Strong comparison: two entity-tags are equivalent if both
        are not weak and their opaque-tags match character-by-character.</t>
     <t>Weak comparison: two entity-tags are equivalent if their opaque-tags
        match character-by-character, regardless of either or both
        being tagged as "weak".</t>
  </list>
</t>
<t>
   The example below shows the results for a set of entity-tag pairs
   and both the weak and strong comparison function results:
</t>
<texttable align="left">
  <ttcol>ETag 1</ttcol>
  <ttcol>ETag 2</ttcol>
  <ttcol>Strong Comparison</ttcol>
  <ttcol>Weak Comparison</ttcol>

  <c>W/"1"</c>
  <c>W/"1"</c>
  <c>no match</c>
  <c>match</c>
  
  <c>W/"1"</c>
  <c>W/"2"</c>
  <c>no match</c>
  <c>no match</c>

  <c>W/"1"</c>
  <c>"1"</c>
  <c>no match</c>
  <c>match</c>

  <c>"1"</c>
  <c>"1"</c>
  <c>match</c>
  <c>match</c>
</texttable>
</section>

<section title="Example: Entity-Tags Varying on Content-Negotiated Resources" anchor="example.entity.tag.vs.conneg">
<t>
   Consider a resource that is subject to content negotiation
   (Section 3.4 of <xref target="RFC7231"/>), and where the representations sent in response to
   a GET request vary based on the Accept-Encoding request
   header field (Section 5.3.4 of <xref target="RFC7231"/>):
</t>
<figure><preamble>&gt;&gt; Request:</preamble><artwork type="message/http; msgtype=&#34;request&#34;"><![CDATA[
  GET /index HTTP/1.1
  Host: www.example.com
  Accept-Encoding: gzip
  
  ]]></artwork></figure>
<t>
   In this case, the response might or might not use the gzip content coding.
   If it does not, the response might look like:
</t>
<figure><preamble>&gt;&gt; Response:</preamble><artwork type="message/http; msgtype=&#34;response&#34;"><![CDATA[
  HTTP/1.1 200 OK
  Date: Fri, 26 Mar 2010 00:05:00 GMT
  ETag: "123-a"
  Content-Length: 70
  Vary: Accept-Encoding
  Content-Type: text/plain
  
  Hello World!
  Hello World!
  Hello World!
  Hello World!
  Hello World!
  ]]></artwork></figure>
<t>
   An alternative representation that does use gzip content coding would be:
</t>
<figure><preamble>&gt;&gt; Response:</preamble><artwork type="message/http; msgtype=&#34;response&#34;"><![CDATA[
  HTTP/1.1 200 OK
  Date: Fri, 26 Mar 2010 00:05:00 GMT
  ETag: "123-b"
  Content-Length: 43
  Vary: Accept-Encoding
  Content-Type: text/plain
  Content-Encoding: gzip
  
  ...binary data...]]></artwork></figure>
<t><list>
  <t>
    Note: Content codings are a property of the representation data,
    so a strong entity-tag for a content-encoded representation has to be
    distinct from the entity tag of an unencoded representation to prevent
    potential conflicts during cache updates and range requests. In contrast,
    transfer codings (Section 4 of <xref target="RFC7230"/>) apply only during message transfer
    and do not result in distinct entity-tags.
  </t>
</list></t>
</section>
</section>

<section title="When to Use Entity-Tags and Last-Modified Dates" anchor="when.to.use.entity.tags.and.last-modified.dates">
<t>
   In 200 (OK) responses to GET or HEAD, an origin server:
  <list style="symbols">
     <t>SHOULD send an entity-tag validator unless it is not feasible to
        generate one.</t>

     <t>MAY send a weak entity-tag instead of a strong entity-tag, if
        performance considerations support the use of weak entity-tags,
        or if it is unfeasible to send a strong entity-tag.</t>

     <t>SHOULD send a <xref target="header.last-modified" format="none">Last-Modified</xref> value if it is feasible to
        send one.</t>
  </list>
</t>
<t>
   In other words, the preferred behavior for an origin server
   is to send both a strong entity-tag and a <xref target="header.last-modified" format="none">Last-Modified</xref>
   value in successful responses to a retrieval request.
</t>
<t>
   A client:
  <list style="symbols">
     <t>MUST send that entity-tag in any cache validation request (using
        <xref target="header.if-match" format="none">If-Match</xref> or <xref target="header.if-none-match" format="none">If-None-Match</xref>) if an
        entity-tag has been provided by the origin server.</t>

     <t>SHOULD send the <xref target="header.last-modified" format="none">Last-Modified</xref> value in non-subrange
        cache validation requests (using <xref target="header.if-modified-since" format="none">If-Modified-Since</xref>)
        if only a Last-Modified value has been provided by the origin server.</t>

     <t>MAY send the <xref target="header.last-modified" format="none">Last-Modified</xref> value in subrange
        cache validation requests (using <xref target="header.if-unmodified-since" format="none">If-Unmodified-Since</xref>)
        if only a Last-Modified value has been provided by an HTTP/1.0 origin
        server. The user agent SHOULD provide a way to disable this, in case
        of difficulty.</t>

     <t>SHOULD send both validators in cache validation requests if both an
        entity-tag and a <xref target="header.last-modified" format="none">Last-Modified</xref> value have been provided
        by the origin server. This allows both HTTP/1.0 and HTTP/1.1 caches to
        respond appropriately.</t>
  </list>
</t>
</section>
</section>

<section title="Precondition Header Fields" anchor="preconditions">
<t>
   This section defines the syntax and semantics of HTTP/1.1 header fields
   for applying preconditions on requests.
   <xref target="evaluation"/> defines when the preconditions are applied.
   <xref target="precedence"/> defines the order of evaluation when more than
   one precondition is present.
</t>

<section title="If-Match" anchor="header.if-match">
  <iref primary="true" item="If-Match header field"/>
  
<t>
   The "If-Match" header field makes the request method conditional on the
   recipient origin server either having at least one current
   representation of the target resource, when the field-value is "*", or
   having a current representation of the target resource that has an
   entity-tag matching a member of the list of entity-tags provided in the
   field-value.
</t>
<t>
   An origin server MUST use the strong comparison function when comparing
   entity-tags for If-Match (<xref target="entity.tag.comparison"/>), since
   the client intends this precondition to prevent the method from being
   applied if there have been any changes to the representation data.
</t>
<figure><iref primary="true" item="Grammar" subitem="If-Match"/><artwork type="abnf2616"><![CDATA[
  If-Match = "*" / 1#entity-tag
]]></artwork></figure>
<t>
   Examples:
</t>
<figure><artwork type="example"><![CDATA[
  If-Match: "xyzzy"
  If-Match: "xyzzy", "r2d2xxxx", "c3piozzzz"
  If-Match: *
]]></artwork></figure>
<t>
   If-Match is most often used with state-changing methods (e.g., POST, PUT,
   DELETE) to prevent accidental overwrites when multiple user agents might be
   acting in parallel on the same resource (i.e., to prevent the "lost update"
   problem). It can also be used with safe methods to abort a request if the
   selected representation does not match one already stored
   (or partially stored) from a prior request.
</t>
<t>
   An origin server that receives an If-Match header field MUST evaluate the
   condition prior to performing the method (<xref target="evaluation"/>).
   If the field-value is "*", the condition is false if the origin server
   does not have a current representation for the target resource.
   If the field-value is a list of entity-tags, the condition is false if
   none of the listed tags match the entity-tag of the selected representation.

<!--[rfced] May we update this text as follows for the ease of the
reader?  We note that similar text exists elsewhere in the document.

Original:
If the field-value is "*", the condition is false if the origin server
does not have a current representation for the target resource.  If
the field-value is a list of entity-tags, the condition is false if
none of the listed tags match the entity-tag of the selected
representation.

Perhaps:
If the field-value is "*" and the origin server does not have a
current representation for the target resource, the condition is
false.  If the field-value is a list of entity-tags and none of the
listed tags match the entity-tag of the selected representation, the
condition is false.
 
-->
</t>
<t>
   An origin server MUST NOT perform the requested method if a received
   If-Match condition evaluates to false; instead, the origin server MUST
   respond with either:
   a) the <xref target="status.412" format="none">412 (Precondition Failed)</xref> status code or
   b) one of the 2xx (Successful) status codes if the origin
   server has verified that a state change is being requested and the final
   state is already reflected in the current state of the target resource
   (i.e., the change requested by the user agent has already succeeded, but
   the user agent might not be aware of it, perhaps because the prior response
   was lost or a compatible change was made by some other user agent).
   In the latter case, the origin server MUST NOT send a validator header
   field in the response unless it can verify that the request is a duplicate
   of an immediately prior change made by the same user agent.
</t>
<t>
   The If-Match header field can be ignored by caches and intermediaries
   because it is not applicable to a stored response.
</t>
</section>

<section title="If-None-Match" anchor="header.if-none-match">
  <iref primary="true" item="If-None-Match header field"/>
  
<t>
   The "If-None-Match" header field makes the request method conditional on
   a recipient cache or origin server either not having any current
   representation of the target resource, when the field-value is "*", or
   having a selected representation with an entity-tag that does not match any
   of those listed in the field-value.

<!--[rfced] This sentence is a bit tough to parse.  May we update as follows?

Original:
   The "If-None-Match" header field makes the request method conditional
   on a recipient cache or origin server either not having any current
   representation of the target resource, when the field-value is "*",
   or having a selected representation with an entity-tag that does not
   match any of those listed in the field-value.

Perhaps:
   The "If-None-Match" header field makes the request method conditional
   on a recipient cache or origin server that either does not have any current
   representation of the target resource, when the field-value is "*",
   or that does not have a selected representation with an entity-tag that does not
   match any of those listed in the field-value.

-->
</t>
<t>
   A recipient MUST use the weak comparison function when comparing
   entity-tags for If-None-Match (<xref target="entity.tag.comparison"/>),
   since weak entity-tags can be used for cache validation even if there have
   been changes to the representation data.
</t>
<figure><iref primary="true" item="Grammar" subitem="If-None-Match"/><artwork type="abnf2616"><![CDATA[
  If-None-Match = "*" / 1#entity-tag
]]></artwork></figure>
<t>
   Examples:
</t>
<figure><artwork type="example"><![CDATA[
  If-None-Match: "xyzzy"
  If-None-Match: W/"xyzzy"
  If-None-Match: "xyzzy", "r2d2xxxx", "c3piozzzz"
  If-None-Match: W/"xyzzy", W/"r2d2xxxx", W/"c3piozzzz"
  If-None-Match: *
]]></artwork></figure>
<t>
   If-None-Match is primarily used in conditional GET requests to enable
   efficient updates of cached information with a minimum amount of
   transaction overhead. When a client desires to update one or more stored
   responses that have entity-tags, the client SHOULD generate an
   If-None-Match header field containing a list of those entity-tags when
   making a GET request; this allows recipient servers to send a
   <xref target="status.304" format="none">304 (Not Modified)</xref> response to indicate when one of those
   stored responses matches the selected representation.
</t>
<t>
   If-None-Match can also be used with a value of "*" to prevent an unsafe
   request method (e.g., PUT) from inadvertently modifying an existing
   representation of the target resource when the client believes that
   the resource does not have a current representation (Section 4.2.1 of <xref target="RFC7231"/>).
   This is a variation on the "lost update" problem that might arise if more
   than one client attempts to create an initial representation for the target
   resource.
</t>
<t>
   An origin server that receives an If-None-Match header field MUST
   evaluate the condition prior to performing the method
   (<xref target="evaluation"/>).
   If the field-value is "*", the condition is false if the origin server
   has a current representation for the target resource.
   If the field-value is a list of entity-tags, the condition is false if
   one of the listed tags match the entity-tag of the selected representation.
</t>
<t>
   An origin server MUST NOT perform the requested method if the condition
   evaluates to false; instead, the origin server MUST respond with either
   a) the <xref target="status.304" format="none">304 (Not Modified)</xref> status code if the request method
   is GET or HEAD or
   b) the <xref target="status.412" format="none">412 (Precondition Failed)</xref> status code for all other
   request methods.
</t>
<t>
   Requirements on cache handling of a received If-None-Match header field
   are defined in Section 4.3.2 of <xref target="RFC7234"/>.
</t>
</section>

<section title="If-Modified-Since" anchor="header.if-modified-since">
  <iref primary="true" item="If-Modified-Since header field"/>
  
<t>
   The "If-Modified-Since" header field makes a GET or HEAD request method
   conditional on the selected representation's modification date being more
   recent than the date provided in the field-value. Transfer of the selected
   representation's data is avoided if that data has not changed.
</t>
<figure><iref primary="true" item="Grammar" subitem="If-Modified-Since"/><artwork type="abnf2616"><![CDATA[
  If-Modified-Since = HTTP-date
]]></artwork></figure>
<t>
   An example of the field is:
</t>
<figure><artwork type="example"><![CDATA[
  If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT
]]></artwork></figure>
<t>
   A recipient MUST ignore If-Modified-Since if the request contains an
   <xref target="header.if-none-match" format="none">If-None-Match</xref> header field; the condition in
   <xref target="header.if-none-match" format="none">If-None-Match</xref> is considered to be a more accurate
   replacement for the condition in If-Modified-Since and the two are only
   combined for the sake of interoperating with older intermediaries that
   might not implement <xref target="header.if-none-match" format="none">If-None-Match</xref>.
</t>
<t>
   A recipient MUST ignore the If-Modified-Since header field if the
   received field-value is not a valid HTTP-date, or if the request method
   is neither GET nor HEAD.
</t>
<t>
   A recipient MUST interpret an If-Modified-Since field-value's timestamp
   in terms of the origin server's clock.
</t>
<t>
   If-Modified-Since is typically used for two distinct purposes:
   1) to allow efficient updates of a cached representation that does not
   have an entity-tag and
   2) to limit the scope of a web traversal to resources that have recently
   changed.
</t>
<t>
   When used for cache updates, a cache will typically use the value of the
   cached message's <xref target="header.last-modified" format="none">Last-Modified</xref> field to generate the field
   value of If-Modified-Since. This behavior is most interoperable for cases
   where clocks are poorly synchronized or when the server has chosen to only
   honor exact timestamp matches (due to a problem with Last-Modified dates
   that appear to go "back in time" when the origin server's clock is
   corrected or a representation is restored from an archived backup).
   However, caches occasionally generate the field value based on other data,
   such as the Date header field of the cached message or the
   local clock time that the message was received, particularly when the
   cached message does not contain a <xref target="header.last-modified" format="none">Last-Modified</xref> field.
</t>
<t>
   When used for limiting the scope of retrieval to a recent time window, a
   user agent will generate an If-Modified-Since field value based on either
   its own local clock or a Date header field received from the
   server in a prior response. Origin servers that choose an exact timestamp
   match based on the selected representation's <xref target="header.last-modified" format="none">Last-Modified</xref>
   field will not be able to help the user agent limit its data transfers to
   only those changed during the specified window.
</t>
<t>
   An origin server that receives an If-Modified-Since header field SHOULD
   evaluate the condition prior to performing the method
   (<xref target="evaluation"/>).
   The origin server SHOULD NOT perform the requested method if the selected
   representation's last modification date is earlier than or equal to the
   date provided in the field-value; instead, the origin server SHOULD
   generate a <xref target="status.304" format="none">304 (Not Modified)</xref> response, including only those
   metadata that are useful for identifying or updating a previously cached
   response.
</t>
<t>
   Requirements on cache handling of a received If-Modified-Since header field
   are defined in Section 4.3.2 of <xref target="RFC7234"/>.
</t>
</section>

<section title="If-Unmodified-Since" anchor="header.if-unmodified-since">
  <iref primary="true" item="If-Unmodified-Since header field"/>
  
<t>
   The "If-Unmodified-Since" header field makes the request method conditional
   on the selected representation's last modification date being earlier than or
   equal to the date provided in the field-value. This field accomplishes the
   same purpose as <xref target="header.if-match" format="none">If-Match</xref> for cases where the user agent does
   not have an entity-tag for the representation.
</t>
<figure><iref primary="true" item="Grammar" subitem="If-Unmodified-Since"/><artwork type="abnf2616"><![CDATA[
  If-Unmodified-Since = HTTP-date
]]></artwork></figure>
<t>
   An example of the field is:
</t>
<figure><artwork type="example"><![CDATA[
  If-Unmodified-Since: Sat, 29 Oct 1994 19:43:31 GMT
]]></artwork></figure>
<t>
   A recipient MUST ignore If-Unmodified-Since if the request contains an
   <xref target="header.if-match" format="none">If-Match</xref> header field; the condition in
   <xref target="header.if-match" format="none">If-Match</xref> is considered to be a more accurate replacement for
   the condition in If-Unmodified-Since, and the two are only combined for the
   sake of interoperating with older intermediaries that might not implement
   <xref target="header.if-match" format="none">If-Match</xref>.
</t>
<t>
   A recipient MUST ignore the If-Unmodified-Since header field if the
   received field-value is not a valid HTTP-date.
</t>
<t>
   A recipient MUST interpret an If-Unmodified-Since field-value's timestamp
   in terms of the origin server's clock.
</t>
<t>
   If-Unmodified-Since is most often used with state-changing methods
   (e.g., POST, PUT, DELETE) to prevent accidental overwrites when multiple
   user agents might be acting in parallel on a resource that does
   not supply entity-tags with its representations (i.e., to prevent the
   "lost update" problem). It can also be used with safe methods to abort a
   request if the selected representation does not match one
   already stored (or partially stored) from a prior request.
</t>
<t>
   An origin server that receives an If-Unmodified-Since header field MUST
   evaluate the condition prior to performing the method
   (<xref target="evaluation"/>).
   The origin server MUST NOT perform the requested method if the selected
   representation's last modification date is more recent than the date
   provided in the field-value; instead the
   origin server MUST respond with either
   a) the <xref target="status.412" format="none">412 (Precondition Failed)</xref> status code or
   b) one of the 2xx (Successful) status codes if the origin
   server has verified that a state change is being requested and the final
   state is already reflected in the current state of the target resource
   (i.e., the change requested by the user agent has already succeeded, but
   the user agent might not be aware of that because the prior response message
   was lost or a compatible change was made by some other user agent).
   In the latter case, the origin server MUST NOT send a validator header
   field in the response unless it can verify that the request is a duplicate
   of an immediately prior change made by the same user agent.
</t>
<t>
   The If-Unmodified-Since header field can be ignored by caches and
   intermediaries because it is not applicable to a stored response.
</t>
</section>

<section title="If-Range" anchor="header.if-range">
<t>
   The "If-Range" header field provides a special conditional request
   mechanism that is similar to the <xref target="header.if-match" format="none">If-Match</xref> and
   <xref target="header.if-unmodified-since" format="none">If-Unmodified-Since</xref> header fields but that instructs the
   recipient to ignore the Range header field if the validator
   doesn't match, resulting in transfer of the new selected representation
   instead of a 412 (Precondition Failed) response. If-Range is defined in Section 3.2 of <xref target="RFC7233"/>.
</t>
</section>
</section>

<section title="Status Code Definitions" anchor="status.code.definitions">
<section title="304 Not Modified" anchor="status.304">
  <iref primary="true" item="304 Not Modified (status code)"/>
  
  
<t>
   The 304 (Not Modified) status code indicates that a
   conditional GET or HEAD request has been
   received and would have resulted in a 200 (OK) response
   if it were not for the fact that the condition evaluated to false.
   In other words, there is no need for the server to transfer a
   representation of the target resource because the request indicates that
   the client, which made the request conditional, already has a valid
   representation; the server is therefore redirecting the client to make
   use of that stored representation as if it were the payload of a
   200 (OK) response.
</t>
<t>
   The server generating a 304 (Not Modified) response MUST generate any of the following
   header fields that would have been sent in a 200 (OK)
   response to the same request:
   Cache-Control,
   Content-Location,
   Date,
   <xref target="header.etag" format="none">ETag</xref>,
   Expires, and
   Vary.
</t>
<t>
   Since the goal of a 304 (Not Modified) response is to minimize information transfer
   when the recipient already has one or more cached representations,
   a sender SHOULD NOT generate representation metadata other
   than the above listed fields unless said metadata exists for the
   purpose of guiding cache updates (e.g., <xref target="header.last-modified" format="none">Last-Modified</xref> might
   be useful if the response does not have an <xref target="header.etag" format="none">ETag</xref> field).
</t>
<t>
   Requirements on a cache that receives a 304 (Not Modified) response are defined in
   Section 4.3.4 of <xref target="RFC7234"/>. If the conditional request originated with an
   outbound client, such as a user agent with its own cache sending a
   conditional GET to a shared proxy, then the proxy SHOULD forward the
   304 (Not Modified) response to that client.
</t>
<t>
   A 304 (Not Modified) response cannot contain a message-body; it is always
   terminated by the first empty line after the header fields.
</t>
</section>

<section title="412 Precondition Failed" anchor="status.412">
  <iref primary="true" item="412 Precondition Failed (status code)"/>
  
<t>
   The 412 (Precondition Failed) status code indicates that one
   or more conditions given in the request header fields evaluated to false
   when tested on the server. This response code allows the client to place
   preconditions on the current resource state (its current representations
   and metadata) and, thus, prevent the request method from being applied if the
   target resource is in an unexpected state.
</t>
</section>
</section>

<section title="Evaluation" anchor="evaluation">
<t>
   Except when excluded below, a recipient cache or origin server MUST
   evaluate received request preconditions after it has successfully performed
   its normal request checks and just before it would perform the action
   associated with the request method.
   A server MUST ignore all received preconditions if its response to the
   same request without those conditions would have been a status code other
   than a 2xx (Successful) or <xref target="status.412" format="none">412 (Precondition Failed)</xref>.
   In other words, redirects and failures take precedence over the evaluation
   of preconditions in conditional requests.
</t>
<t>
   A server that is not the origin server for the target resource and cannot
   act as a cache for requests on the target resource MUST NOT evaluate the
   conditional request header fields defined by this specification, and it
   MUST forward them if the request is forwarded, since the generating
   client intends that they be evaluated by a server that can provide a
   current representation.
   Likewise, a server MUST ignore the conditional request header fields
   defined by this specification when received with a request method that does
   not involve the selection or modification of a
   selected representation, such as CONNECT, OPTIONS, or TRACE.
</t>
<t>
   Conditional request header fields that are defined by extensions to HTTP
   might place conditions on all recipients, on the state of the target
   resource in general, or on a group of resources. For instance, the "If"
   header field in WebDAV can make a request conditional on various aspects
   of multiple resources, such as locks, if the recipient understands and
   implements that field (<xref target="RFC4918"/>, Section 10.4).
</t>
<t>
   Although conditional request header fields are defined as being usable with
   the HEAD method (to keep HEAD's semantics consistent with those of GET),
   there is no point in sending a conditional HEAD because a successful
   response is around the same size as a <xref target="status.304" format="none">304 (Not Modified)</xref>
   response and more useful than a <xref target="status.412" format="none">412 (Precondition Failed)</xref>
   response.
</t>
</section>

<section title="Precedence" anchor="precedence">
<t>
   When more than one conditional request header field is present in a request,
   the order in which the fields are evaluated becomes important. In practice,
   the fields defined in this document are consistently implemented in a
   single, logical order, since "lost update" preconditions have more strict
   requirements than cache validation, a validated cache is more efficient
   than a partial response, and entity tags are presumed to be more accurate
   than date validators.
</t>
<t>
   A recipient cache or origin server MUST evaluate the request
   preconditions defined by this specification in the following order:
   <list style="numbers">
     <t anchor="precedence1">When recipient is the origin server and
       <xref target="header.if-match" format="none">If-Match</xref> is present,
       evaluate the <xref target="header.if-match" format="none">If-Match</xref> precondition:
       <list style="symbols">
         <t>if true, continue to step <xref target="precedence3" format="counter"/></t>
         <t>if false, respond <xref target="status.412" format="none">412 (Precondition Failed)</xref> unless
            it can be determined that the state-changing request has already
            succeeded (see <xref target="header.if-match"/>)</t>
       </list>
     </t>
     <t anchor="precedence2">When recipient is the origin server,
       <xref target="header.if-match" format="none">If-Match</xref> is not present, and
       <xref target="header.if-unmodified-since" format="none">If-Unmodified-Since</xref> is present,
       evaluate the <xref target="header.if-unmodified-since" format="none">If-Unmodified-Since</xref> precondition:
       <list style="symbols">
         <t>if true, continue to step <xref target="precedence3" format="counter"/></t>
         <t>if false, respond <xref target="status.412" format="none">412 (Precondition Failed)</xref> unless
            it can be determined that the state-changing request has already
            succeeded (see <xref target="header.if-unmodified-since"/>)</t>
       </list>
     </t>
     <t anchor="precedence3">When <xref target="header.if-none-match" format="none">If-None-Match</xref> is present,
       evaluate the <xref target="header.if-none-match" format="none">If-None-Match</xref> precondition:
       <list style="symbols">
         <t>if true, continue to step <xref target="precedence5" format="counter"/></t>
         <t>if false for GET/HEAD, respond <xref target="status.304" format="none">304 (Not Modified)</xref></t>
         <t>if false for other methods, respond <xref target="status.412" format="none">412 (Precondition Failed)</xref></t>
       </list>
     </t>
     <t anchor="precedence4">When the method is GET or HEAD,
       <xref target="header.if-none-match" format="none">If-None-Match</xref> is not present, and
       <xref target="header.if-modified-since" format="none">If-Modified-Since</xref> is present,
       evaluate the <xref target="header.if-modified-since" format="none">If-Modified-Since</xref> precondition:
       <list style="symbols">
         <t>if true, continue to step <xref target="precedence5" format="counter"/></t>
         <t>if false, respond <xref target="status.304" format="none">304 (Not Modified)</xref></t>
       </list>
     </t>
     <t anchor="precedence5">When the method is GET and both
       Range and If-Range are present,
       evaluate the If-Range precondition:
       <list style="symbols">
         <t>if the validator matches and the Range specification is
            applicable to the selected representation, respond
            206 (Partial Content) <xref target="RFC7233"/></t>
       </list>
     </t>
     <t anchor="precedencelast">Otherwise,
       <list style="symbols">
         <t>all conditions are met, so perform the requested action and
            respond according to its success or failure.</t>
       </list>
     </t>
   </list>
</t>
<t>
   Any extension to HTTP/1.1 that defines additional conditional request
   header fields ought to define its own expectations regarding the order
   for evaluating such fields in relation to those defined in this document
   and other conditionals that might be found in practice.
</t>
</section>

<section title="IANA Considerations" anchor="IANA.considerations">

<section title="Status Code Registration" anchor="status.code.registration">
<t>
   The "HTTP Status Codes" registry located at
   &lt;http://www.iana.org/assignments/http-status-codes&gt;
   has been updated with the registrations below:
</t>

<!--AUTOGENERATED FROM extract-status-code-defs.xslt, do not edit manually-->
<texttable align="left" suppress-title="true" anchor="iana.status.code.registration.table">
   <ttcol>Value</ttcol>
   <ttcol>Description</ttcol>
   <ttcol>Reference</ttcol>
   <c>304</c>
   <c>Not Modified</c>
   <c>
      <xref target="status.304"/>
   </c>
   <c>412</c>
   <c>Precondition Failed</c>
   <c>
      <xref target="status.412"/>
   </c>
</texttable>
<!--(END)-->

</section>

<section title="Header Field Registration" anchor="header.field.registration">
<t>
   HTTP header fields are registered within the Message Header Field Registry
   maintained at
   &lt;http://www.iana.org/assignments/message-headers/&gt;.
</t>
<t>
   This document defines the following HTTP header fields, so their
   associated registry entries have been updated according to the permanent
   registrations below (see <xref target="BCP90"/>):
</t>

<!--AUTOGENERATED FROM extract-header-defs.xslt, do not edit manually-->
<texttable align="left" suppress-title="true" anchor="iana.header.registration.table">
   <ttcol>Header Field Name</ttcol>
   <ttcol>Protocol</ttcol>
   <ttcol>Status</ttcol>
   <ttcol>Reference</ttcol>

   <c>ETag</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.etag"/>
   </c>
   <c>If-Match</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.if-match"/>
   </c>
   <c>If-Modified-Since</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.if-modified-since"/>
   </c>
   <c>If-None-Match</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.if-none-match"/>
   </c>
   <c>If-Unmodified-Since</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.if-unmodified-since"/>
   </c>
   <c>Last-Modified</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.last-modified"/>
   </c>
</texttable>
<!--(END)-->

<t>
   The change controller is: "IETF (iesg@ietf.org) - Internet Engineering Task Force".
</t>
</section>
</section>

<section title="Security Considerations" anchor="security.considerations">
<t>
   This section is meant to inform developers, information providers, and
   users of known security concerns specific to the HTTP conditional
   request mechanisms. More general security considerations are addressed
   in the HTTP messaging <xref target="RFC7230"/> and semantics <xref target="RFC7231"/> documents.
</t>
<t>
   The validators defined by this specification are not intended to ensure
   the validity of a representation, guard against malicious changes, or
   detect man-in-the-middle attacks. At best, they enable more efficient cache
   updates and optimistic concurrent writes when all participants are behaving
   nicely. At worst, the conditions will fail and the client will receive a
   response that is no more harmful than an HTTP exchange without conditional
   requests.
</t>
<t>
   An entity-tag can be abused in ways that create privacy risks. For example,
   a site might deliberately construct a semantically invalid entity-tag that
   is unique to the user or user agent, send it in a cacheable response with a
   long freshness time, and then read that entity-tag in later conditional
   requests as a means of re-identifying that user or user agent. Such an
   identifying tag would become a persistent identifier for as long as the
   user agent retained the original cache entry. User agents that cache
   representations ought to ensure that the cache is cleared or replaced
   whenever the user performs privacy-maintaining actions, such as clearing
   stored cookies or changing to a private browsing mode.
</t>
</section>

<section title="Acknowledgments" anchor="acks">
<t>
  See Section 10 of <xref target="RFC7230"/>.
</t>
</section>
</middle>
<back>

<references title="Normative References">



<!--Companion Doc; draft-ietf-httpbis-p1-messaging-26  -->

<reference anchor="RFC7230">
  <front>
    <title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
    <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
      <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
      <address><email>fielding@gbiv.com</email></address>
    </author>
    <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
      <organization abbrev="greenbytes">greenbytes GmbH</organization>
      <address><email>julian.reschke@greenbytes.de</email></address>
    </author>
    <date month="May" year="2014"/>
  </front>
  <seriesInfo name="RFC" value="7230"/>
  
</reference>

<!--Companion doc; draft-ietf-httpbis-p2-semantics-26  -->
<reference anchor="RFC7231">
  <front>
    <title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
    <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
      <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
      <address><email>fielding@gbiv.com</email></address>
    </author>
    <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
      <organization abbrev="greenbytes">greenbytes GmbH</organization>
      <address><email>julian.reschke@greenbytes.de</email></address>
    </author>
    <date month="May" year="2014"/>
  </front>
  <seriesInfo name="RFC" value="7231"/>
  
</reference>

<!--Companion doc; draft-ietf-httpbis-p5-range-26  -->
<reference anchor="RFC7233">
  <front>
    <title>Hypertext Transfer Protocol (HTTP/1.1): Range Requests</title>
    <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
      <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
      <address><email>fielding@gbiv.com</email></address>
    </author>
    <author initials="Y." surname="Lafon" fullname="Yves Lafon" role="editor">
      <organization abbrev="W3C">World Wide Web Consortium</organization>
      <address><email>ylafon@w3.org</email></address>
    </author>
    <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
      <organization abbrev="greenbytes">greenbytes GmbH</organization>
      <address><email>julian.reschke@greenbytes.de</email></address>
    </author>
    <date month="May" year="2014"/>
  </front>
  <seriesInfo name="RFC" value="7233"/>
  
</reference>


<!--Companion doc; draft-ietf-httpbis-p6-cache-26  -->
<reference anchor="RFC7234">
  <front>
    <title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
    <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
      <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
      <address><email>fielding@gbiv.com</email></address>
    </author>
    <author initials="M." surname="Nottingham" fullname="Mark Nottingham" role="editor">
      <organization>Akamai</organization>
      <address><email>mnot@mnot.net</email></address>
    </author>
    <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
      <organization abbrev="greenbytes">greenbytes GmbH</organization>
      <address><email>julian.reschke@greenbytes.de</email></address>
    </author>
    <date month="May" year="2014"/>
  </front>
  <seriesInfo name="RFC" value="7234"/>
  
</reference>


<?rfc include="reference.RFC.2119.xml"?>

  <reference anchor="RFC5234">
    <front>
      <title abbrev="ABNF for Syntax Specifications">Augmented BNF for Syntax Specifications: ABNF</title>
      <author initials="D." surname="Crocker" fullname="Dave Crocker" role="editor">
        <organization>Brandenburg InternetWorking</organization>
        <address>
          <email>dcrocker@bbiw.net</email>
        </address>  
      </author>
      <author initials="P." surname="Overell" fullname="Paul Overell">
        <organization>THUS plc.</organization>
        <address>
          <email>paul.overell@thus.net</email>
        </address>
      </author>
      <date month="January" year="2008"/>
    </front>
    <seriesInfo name="STD" value="68"/>
    <seriesInfo name="RFC" value="5234"/>
  </reference>


</references>

<references title="Informative References">

<?rfc include="reference.RFC.2616.xml"?>


<reference anchor="BCP90">
  <front>
    <title>Registration Procedures for Message Header Fields</title>
    <author initials="G." surname="Klyne" fullname="G. Klyne">
      <organization>Nine by Nine</organization>
      <address><email>GK-IETF@ninebynine.org</email></address>
    </author>
    <author initials="M." surname="Nottingham" fullname="M. Nottingham">
      <organization>BEA Systems</organization>
      <address><email>mnot@pobox.com</email></address>
    </author>
    <author initials="J." surname="Mogul" fullname="J. Mogul">
      <organization>HP Labs</organization>
      <address><email>JeffMogul@acm.org</email></address>
    </author>
    <date year="2004" month="September"/>
  </front>
  <seriesInfo name="BCP" value="90"/>
  <seriesInfo name="RFC" value="3864"/>
</reference>

<reference anchor="RFC4918">
  <front>
    <title>HTTP Extensions for Web Distributed Authoring and Versioning (WebDAV)</title>
    <author initials="L.M." surname="Dusseault" fullname="Lisa Dusseault" role="editor">
      <organization abbrev="CommerceNet">CommerceNet</organization>
      <address><email>ldusseault@commerce.net</email></address>
    </author>
    <date month="June" year="2007"/>
  </front>
  <seriesInfo name="RFC" value="4918"/>
</reference>

</references>

<section title="Changes from RFC 2616" anchor="changes.from.rfc.2616">
<t>
  The definition of validator weakness has been expanded and clarified
  (<xref target="weak.and.strong.validators"/>).
</t>
<t>
  Weak entity-tags are now allowed in all requests except range requests.
  (Sections <xref target="weak.and.strong.validators" format="counter"/> and
  <xref target="header.if-none-match" format="counter"/>.)
</t>
<t>
  The <xref target="header.etag" format="none">ETag</xref> header field ABNF has been changed to not use
  quoted-string, thus avoiding escaping issues
  (<xref target="header.etag"/>).
</t>
<t>
  ETag is defined to provide an entity tag for the selected representation,
  thereby clarifying what it applies to in various situations (such as a 
  PUT response)
  (<xref target="header.etag"/>).
</t>
<t>
  The precedence for evaluation of conditional requests has been defined
  (<xref target="precedence"/>).
</t>
</section>

<section title="Imported ABNF" anchor="imported.abnf">
  
<t>
  The following core rules are included by
  reference, as defined in Appendix B.1 of <xref target="RFC5234"/>:
  ALPHA (letters), CR (carriage return), CRLF (CR LF), CTL (controls),
  DIGIT (decimal 0-9), DQUOTE (double quote),
  HEXDIG (hexadecimal 0-9/A-F/a-f), LF (line feed),
  OCTET (any 8-bit sequence of data), SP (space), and
  VCHAR (any visible US-ASCII character).
</t>
<t>
  The rules below are defined in <xref target="RFC7230"/>:
</t>
<figure><artwork type="abnf2616"><![CDATA[
  OWS           = <OWS, defined in [RFC7230], Section 3.2.3>
  obs-text      = <obs-text, defined in [RFC7230], Section 3.2.6>
]]></artwork></figure>
<t>
  The rule below is defined in <xref target="RFC7231"/>:
</t>
<figure><artwork type="abnf2616"><![CDATA[
  HTTP-date     = <HTTP-date, defined in [RFC7231], Section 7.1.1.1>
]]></artwork></figure>
</section> 


<section title="Collected ABNF" anchor="collected.abnf">
<t>
  In the collected ABNF below, list rules are expanded as per Section 1.2 of <xref target="RFC7230"/>.
</t><figure>
<artwork type="abnf" name="p4-conditional.parsed-abnf"><![CDATA[
ETag = entity-tag

HTTP-date = <HTTP-date, defined in [RFC7231], Section 7.1.1.1>

If-Match = "*" / ( *( "," OWS ) entity-tag *( OWS "," [ OWS
 entity-tag ] ) )
If-Modified-Since = HTTP-date
If-None-Match = "*" / ( *( "," OWS ) entity-tag *( OWS "," [ OWS
 entity-tag ] ) )
If-Unmodified-Since = HTTP-date

Last-Modified = HTTP-date

OWS = <OWS, defined in [RFC7230], Section 3.2.3>

entity-tag = [ weak ] opaque-tag
etagc = "!" / %x23-7E ; '#'-'~'
 / obs-text

obs-text = <obs-text, defined in [RFC7230], Section 3.2.6>
opaque-tag = DQUOTE *etagc DQUOTE

weak = %x57.2F ; W/
]]></artwork>
</figure>
</section>


</back>
</rfc>
