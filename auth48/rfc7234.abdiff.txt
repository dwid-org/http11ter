
INTRODUCTION, paragraph 1:
OLD:

 HTTPbis Working Group                                   R. Fielding, Ed.
 Internet-Draft                                                     Adobe
 Obsoletes: 2616 (if approved)                         M. Nottingham, Ed.
 Intended status: Standards Track                                  Akamai
 Expires: November 17, 2014                               J. Reschke, Ed.
                                                               greenbytes
                                                             May 16, 2014

NEW:

 Internet Engineering Task Force (IETF)                  R. Fielding, Ed.
 Request for Comments: 7234                                         Adobe
 Obsoletes: 2616                                       M. Nottingham, Ed.
 Category: Standards Track                                         Akamai
 ISSN: 2070-1721                                          J. Reschke, Ed.
                                                               greenbytes
                                                                 May 2014


INTRODUCTION, paragraph 2:
OLD:

             Hypertext Transfer Protocol (HTTP/1.1): Caching
                    draft-ietf-httpbis-p6-cache-latest

NEW:

             Hypertext Transfer Protocol (HTTP/1.1): Caching


INTRODUCTION, paragraph 5:
OLD:

 Editorial Note (To be removed by RFC Editor)
 
    Discussion of this draft takes place on the HTTPBIS working group
    mailing list (ietf-http-wg@w3.org), which is archived at
    <http://lists.w3.org/Archives/Public/ietf-http-wg/>.
 
    The current issues list is at
    <http://tools.ietf.org/wg/httpbis/trac/report/3> and related
    documents (including fancy diffs) can be found at
    <http://tools.ietf.org/wg/httpbis/>.
 
    _This is a temporary document for the purpose of tracking the
    editorial changes made during the AUTH48 (RFC publication) phase._
 
 Status of This Memo

NEW:

 Status of This Memo


INTRODUCTION, paragraph 6:
OLD:

    This Internet-Draft is submitted in full conformance with the
    provisions of BCP 78 and BCP 79.

NEW:

    This is an Internet Standards Track document.


INTRODUCTION, paragraph 7:
OLD:

    Internet-Drafts are working documents of the Internet Engineering
    Task Force (IETF).  Note that other groups may also distribute
    working documents as Internet-Drafts.  The list of current Internet-
    Drafts is at http://datatracker.ietf.org/drafts/current/.

NEW:

    This document is a product of the Internet Engineering Task Force
    (IETF).  It represents the consensus of the IETF community.  It has
    received public review and has been approved for publication by the
    Internet Engineering Steering Group (IESG).  Further information on
    Internet Standards is available in Section 2 of RFC 5741.


INTRODUCTION, paragraph 8:
OLD:

    Internet-Drafts are draft documents valid for a maximum of six months
    and may be updated, replaced, or obsoleted by other documents at any
    time.  It is inappropriate to use Internet-Drafts as reference
    material or to cite them other than as "work in progress."
    This Internet-Draft will expire on November 17, 2014.

NEW:

    Information about the current status of this document, any errata,
    and how to provide feedback on it may be obtained at
    http://www.rfc-editor.org/info/rfc7234.


Section 3.1., paragraph 1:
OLD:

    A response message is considered complete when all of the octets
    indicated by the message framing ([RFC7230]) are received prior to
    the connection being closed.  If the request method is GET, the
    response status code is 200 (OK), and the entire response header
    section has been received, a cache MAY store an incomplete response
    message body if the cache entry is recorded as incomplete.  Likewise,
    a 206 (Partial Content) response MAY be stored as if it were an
    incomplete 200 (OK) cache entry.  However, a cache MUST NOT store
    incomplete or partial content responses if it does not support the
    Range and Content-Range header fields or if it does not understand
    the range units used in those fields.

NEW:

    A response message is considered complete when all of the octets
    indicated by the message framing ([RFC7230]) are received prior to
    the connection being closed.  If the request method is GET, the
    response status code is 200 (OK), and the entire response header
    section has been received, a cache MAY store an incomplete response
    message body if the cache entry is recorded as incomplete.  Likewise,
    a 206 (Partial Content) response MAY be stored as if it were an
    incomplete 200 (OK) cache entry.  However, a cache MUST NOT store
    incomplete or partial-content responses if it does not support the
    Range and Content-Range header fields or if it does not understand
    the range units used in those fields.


Section 3.2., paragraph 2:
OLD:

    In this specification, the following Cache-Control response
    directives (Section 5.2.2) have such an effect: must-revalidate,
    public, s-maxage.

NEW:

    In this specification, the following Cache-Control response
    directives (Section 5.2.2) have such an effect: must-revalidate,
    public, and s-maxage.


Section 4., paragraph 14:
OLD:

    Also, note that unsafe requests might invalidate already stored
    responses; see Section 4.4.

NEW:

    Also, note that unsafe requests might invalidate already-stored
    responses; see Section 4.4.


Section 4.1., paragraph 5:
OLD:

    o  normalizing both header field values in a way that is known to
       have identical semantics, according to the header field's
       specification (e.g., re-ordering field values when order is not
       significant; case-normalization, where values are defined to be
       case-insensitive)

NEW:

    o  normalizing both header field values in a way that is known to
       have identical semantics, according to the header field's
       specification (e.g., reordering field values when order is not
       significant; case-normalization, where values are defined to be
       case-insensitive)


Section 4.2., paragraph 13:
OLD:

    o  Although all date formats are specified to be case-sensitive, a
       cache recipient SHOULD match day, week, and timezone names case-
       insensitively.

NEW:

    o  Although all date formats are specified to be case-sensitive, a
       cache recipient SHOULD match day, week, and time-zone names case-
       insensitively.


Section 4.2.1., paragraph 1:
OLD:

    A cache can calculate the freshness lifetime (denoted as
    freshness_lifetime) of a response by using the first match of:

NEW:

    A cache can calculate the freshness lifetime (denoted as
    freshness_lifetime) of a response by using the first match of the
    following:


Section 4.2.1., paragraph 4:
OLD:

    o  If the Expires response header field (Section 5.3) is present, use
       its value minus the value of the Date response header field, or

NEW:

    o  If the Expires response header field (Section 5.3) is present, use
       its value minus the value of the Date response header field,


Section 4.2.3., paragraph 7:
OLD:

    now
       The term "now" means "the current value of the clock at the host
       performing the calculation".  A host ought to use NTP ([RFC5905])
       or some similar protocol to synchronize its clocks to Coordinated
       Universal Time.

NEW:

    now
 
       The term "now" means "the current value of the clock at the host
       performing the calculation".  A host ought to use NTP ([RFC5905])
       or some similar protocol to synchronize its clocks to Coordinated
       Universal Time.


Section 4.2.4., paragraph 2:
OLD:

    A cache MUST NOT generate a stale response if it is prohibited by an
    explicit in-protocol directive (e.g., by a "no-store" or "no-cache"
    cache directive, a "must-revalidate" cache-response-directive, or an
    applicable "s-maxage" or "proxy-revalidate" cache-response-directive;
    see Section 5.2.2).

NEW:

    A cache MUST NOT generate a stale response if it is prohibited by an
    explicit in-protocol directive (e.g., by a "no-store" or "no-cache"
    cache directive, a "must-revalidate" cache-response-directive, or an
    applicable "s-maxage" or "proxy-revalidate" cache response directive;
    see Section 5.2.2).


Section 4.3.2., paragraph 4:
OLD:

    A request containing an If-None-Match header field (Section 3.2 of
    [RFC7232]) indicates that the client wants to validate one or more of
    its own stored responses in comparison to whichever stored response
    is selected by the cache.  If the field-value is "*", or if the
    field-value is a list of entity-tags and at least one of them match
    the entity-tag of the selected stored response, a cache recipient
    SHOULD generate a 304 (Not Modified) response (using the metadata of
    the selected stored response) instead of sending that stored
    response.

NEW:

    A request containing an If-None-Match header field (Section 3.2 of
    [RFC7232]) indicates that the client wants to validate one or more of
    its own stored responses in comparison to whichever stored response
    is selected by the cache.  If the field-value is "*", or if the
    field-value is a list of entity-tags and at least one of them matches
    the entity-tag of the selected stored response, a cache recipient
    SHOULD generate a 304 (Not Modified) response (using the metadata of
    the selected stored response) instead of sending that stored
    response.


Section 4.3.4., paragraph 2:
OLD:

    The stored response to update is identified by using the first match
    (if any) of:

NEW:

    The stored response to update is identified by using the first match
    (if any) of the following:


Section 4.4., paragraph 1:
OLD:

    Because unsafe request methods (Section 4.2.1 of [RFC7231]) such as
    PUT, POST or DELETE have the potential for changing state on the
    origin server, intervening caches can use them to keep their contents
    up-to-date.

NEW:

    Because unsafe request methods (Section 4.2.1 of [RFC7231]) such as
    PUT, POST or DELETE have the potential for changing state on the
    origin server, intervening caches can use them to keep their contents
    up to date.


Section 4.4., paragraph 5:
OLD:

    Here, a "non-error response" is one with a 2xx (Successful) or 3xx
    (Redirection) status code.  "Invalidate" means that the cache will
    either remove all stored responses related to the effective request
    URI, or will mark these as "invalid" and in need of a mandatory
    validation before they can be sent in response to a subsequent
    request.

NEW:

    Here, a "non-error response" is one with a 2xx (Successful) or 3xx
    (Redirection) status code.  "Invalidate" means that the cache will
    either remove all stored responses related to the effective request
    URI or will mark these as "invalid" and in need of a mandatory
    validation before they can be sent in response to a subsequent
    request.


Section 5.2.1.1., paragraph 4:
OLD:

    This directive uses the token form of the argument syntax; e.g.,
    'max-age=5', not 'max-age="5"'.  A sender SHOULD NOT generate the
    quoted-string form.

NEW:

    This directive uses the token form of the argument syntax: e.g.,
    'max-age=5' not 'max-age="5"'.  A sender SHOULD NOT generate the
    quoted-string form.


Section 5.2.1.2., paragraph 4:
OLD:

    This directive uses the token form of the argument syntax; e.g.,
    'max-stale=10', not 'max-stale="10"'.  A sender SHOULD NOT generate
    the quoted-string form.

NEW:

    This directive uses the token form of the argument syntax: e.g.,
    'max-stale=10' not 'max-stale="10"'.  A sender SHOULD NOT generate
    the quoted-string form.


Section 5.2.2.6., paragraph 7:
OLD:

    Note: This usage of the word "private" only controls where the
    response can be stored; it cannot ensure the privacy of the message
    content.  Also, private response directives with field-names are
    often handled by caches as if an unqualified private directive was
    received; i.e., the special handling for the qualified form is not
    widely implemented.

NEW:

    Note: This use of the word "private" refers only to the control of
    the location in which the response can be stored; the privacy of the
    message content cannot be ensured.  Also, private response directives
    with field-names are often handled by caches as if an unqualified
    private directive was received; i.e., the special handling for the
    qualified form is not widely implemented.


Section 5.2.2.8., paragraph 4:
OLD:

    This directive uses the token form of the argument syntax; e.g.,
    'max-age=5', not 'max-age="5"'.  A sender SHOULD NOT generate the
    quoted-string form.

NEW:

    This directive uses the token form of the argument syntax: e.g.,
    'max-age=5' not 'max-age="5"'.  A sender SHOULD NOT generate the
    quoted-string form.


Section 5.2.2.9., paragraph 4:
OLD:

    This directive uses the token form of the argument syntax; e.g.,
    's-maxage=10', not 's-maxage="10"'.  A sender SHOULD NOT generate the
    quoted-string form.

NEW:

    This directive uses the token form of the argument syntax: e.g.,
    's-maxage=10' not 's-maxage="10"'.  A sender SHOULD NOT generate the
    quoted-string form.


Section 5.5., paragraph 10:
OLD:

    o  1xx warn-codes describe the freshness or validation status of the
       response, and so MUST be deleted by a cache after validation.
       They can only be generated by a cache when validating a cached
       entry, and MUST NOT be generated in any other situation.

NEW:

    o  1xx warn-codes describe the freshness or validation status of the
       response, and so they MUST be deleted by a cache after validation.
       They can only be generated by a cache when validating a cached
       entry, and MUST NOT be generated in any other situation.


Section 5.5., paragraph 11:
OLD:

    o  2xx warn-codes describe some aspect of the representation that is
       not rectified by a validation (for example, a lossy compression of
       the representation) and MUST NOT be deleted by a cache after
       validation, unless a full response is sent, in which case they
       MUST be.

NEW:

    o  2xx warn-codes describe some aspect of the representation that is
       not rectified by a validation (for example, a lossy compression of
       the representation) and they MUST NOT be deleted by a cache after
       validation, unless a full response is sent, in which case they
       MUST be.


Section 5.5.5., paragraph 1:
OLD:

    The warning text can include arbitrary information to be presented to
    a human user, or logged.  A system receiving this warning MUST NOT
    take any automated action, besides presenting the warning to the
    user.

NEW:

    The warning text can include arbitrary information to be presented to
    a human user or logged.  A system receiving this warning MUST NOT
    take any automated action, besides presenting the warning to the
    user.


Section 5.5.6., paragraph 1:
OLD:

    MUST be added by a proxy if it applies any transformation to the
    representation, such as changing the content-coding, media-type, or
    modifying the representation data, unless this Warning code already
    appears in the response.

NEW:

    This Warning code MUST be added by a proxy if it applies any
    transformation to the representation, such as changing the content-
    coding, media-type, or modifying the representation data, unless this
    Warning code already appears in the response.


Section 5.5.7., paragraph 1:
OLD:

    The warning text can include arbitrary information to be presented to
    a human user, or logged.  A system receiving this warning MUST NOT
    take any automated action.

NEW:

    The warning text can include arbitrary information to be presented to
    a human user or logged.  A system receiving this warning MUST NOT
    take any automated action.


Section 6., paragraph 2:
OLD:

    The freshness model (Section 4.2) does not necessarily apply to
    history mechanisms.  I.e., a history mechanism can display a previous
    representation even if it has expired.

NEW:

    The freshness model (Section 4.2) does not necessarily apply to
    history mechanisms.  That is, a history mechanism can display a
    previous representation even if it has expired.


Section 6., paragraph 3:
OLD:

    This does not prohibit the history mechanism from telling the user
    that a view might be stale, or from honoring cache directives (e.g.,
    Cache-Control: no-store).

NEW:

    This does not prohibit the history mechanism from telling the user
    that a view might be stale or from honoring cache directives (e.g.,
    Cache-Control: no-store).


Section 7.1., paragraph 1:
OLD:

    The HTTP Cache Directive Registry defines the namespace for the cache
    directives.  It will be created and maintained at (the suggested URI)
    <http://www.iana.org/assignments/http-cache-directives>.

NEW:

    The "HTTP Cache Directive Registry" defines the name space for the
    cache directives.  It has been created and is now maintained at
    <http://www.iana.org/assignments/http-cache-directives>.


Section 7.1.3., paragraph 1:
OLD:

    The HTTP Cache Directive Registry has been populated with the
    registrations below:

NEW:

    The "HTTP Cache Directive Registry" shall be populated with the
    registrations below:


Section 7.2., paragraph 1:
OLD:

    The HTTP Warn Code Registry defines the namespace for warn codes.  It
    will be created and maintained at (the suggested URI)
    <http://www.iana.org/assignments/http-warn-codes>.

NEW:

    The "HTTP Warn Codes" registry defines the name space for warn codes.
    It has been created and is now maintained at
    <http://www.iana.org/assignments/http-warn-codes>.


Section 7.2.1., paragraph 5:
OLD:

    Values to be added to this namespace require IETF Review (see
    [RFC5226], Section 4.1).

NEW:

    Values to be added to this name pace require IETF Review (see
    [RFC5226], Section 4.1).


Section 7.2.2., paragraph 1:
OLD:

    The HTTP Warn Code Registry has been populated with the registrations
    below:

NEW:

    The "HTTP Warn Codes" registry has been populated with the
    registrations below:


Section 7.3., paragraph 1:
OLD:

    HTTP header fields are registered within the "Message Headers"
    registry maintained at
    <http://www.iana.org/assignments/message-headers/>.

NEW:

    HTTP header fields are registered within the Message Header Field
    Registry maintained at
    <http://www.iana.org/assignments/message-headers>.


Section 7.3., paragraph 2:
OLD:

    This document defines the following HTTP header fields, so the
    "Permanent Message Header Field Names" registry has been updated
    accordingly (see [BCP90]).

NEW:

    This document defines the following HTTP header fields, so their
    associated registry entries have been updated according to the
    permanent registrations below (see [BCP90]):


Section 10.1., paragraph 3:
OLD:

    [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
               Protocol (HTTP/1.1): Message Syntax and Routing",
               draft-ietf-httpbis-p1-messaging-latest (work in progress),
               May 2014.

NEW:

    [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
               Protocol (HTTP/1.1): Message Syntax and Routing",
               RFC 7230, May 2014.


Section 10.1., paragraph 4:
OLD:

    [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
               Protocol (HTTP/1.1): Semantics and Content",
               draft-ietf-httpbis-p2-semantics-latest (work in progress),
               May 2014.

NEW:

    [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
               Protocol (HTTP/1.1): Semantics and Content", RFC 7231,
               May 2014.


Section 10.1., paragraph 5:
OLD:

    [RFC7232]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
               Protocol (HTTP/1.1): Conditional Requests",
               draft-ietf-httpbis-p4-conditional-latest (work in
               progress), May 2014.

NEW:

    [RFC7232]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
               Protocol (HTTP/1.1): Conditional Requests", RFC 7232,
               May 2014.


Section 10.1., paragraph 6:
OLD:

    [RFC7233]  Fielding, R., Ed., Lafon, Y., Ed., and J. Reschke, Ed.,
               "Hypertext Transfer Protocol (HTTP/1.1): Range Requests",
               draft-ietf-httpbis-p5-range-latest (work in progress),
               May 2014.

NEW:

    [RFC7233]  Fielding, R., Ed., Lafon, Y., Ed., and J. Reschke, Ed.,
               "Hypertext Transfer Protocol (HTTP/1.1): Range Requests",
               RFC 7233, May 2014.


Section 10.1., paragraph 7:
OLD:

    [RFC7235]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
               Protocol (HTTP/1.1): Authentication",
               draft-ietf-httpbis-p7-auth-latest (work in progress),
               May 2014.

NEW:

    [RFC7235]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
               Protocol (HTTP/1.1): Authentication", RFC 7235, May 2014.


Appendix A., paragraph 3:
OLD:

    New status codes can now define that caches are allowed to use
    heuristic freshness with them.  Caches are now allowed to calculate
    heuristic freshness for URIs with query components.  (Section 4.2.2)
 
    The algorithm for calculating age is now less conservative.  Caches
    are now required to handle dates with timezones as if they're
    invalid, because it's not possible to accurately guess.
    (Section 4.2.3)

NEW:

    New status codes can now define that caches are allowed to use
    heuristic freshness with them.  Caches are now allowed to calculate
    heuristic freshness for URIs with query components.  (Section 4.2.2)
    The algorithm for calculating age is now less conservative.  Caches
    are now required to handle dates with timezones as if they're
    invalid, because it's not possible to accurately guess.
    (Section 4.2.3)


Appendix A., paragraph 5:
OLD:

    The algorithm for selecting a cached negotiated response to use has
    been clarified in several ways.  In particular, it now explicitly
    allows header-specific canonicalization when processing selecting
    header fields.  (Section 4.1)

NEW:

    The algorithm for selecting a cached negotiated response to use has
    been clarified in several ways.  In particular, it now explicitly
    allows header-specific canonicalization when processing selecting
    header fields.  (Section 4.1).


Appendix A., paragraph 9:
OLD:

    The "no-store" request directive doesn't apply to responses; i.e., a
    cache can satisfy a request with no-store on it, and does not
    invalidate it.  (Section 5.2.1.5)

NEW:

    The "no-store" request directive doesn't apply to responses; i.e., a
    cache can satisfy a request with no-store on it and does not
    invalidate it.  (Section 5.2.1.5)


Appendix A., paragraph 10:
OLD:

    The qualified forms of the private and no-cache cache directives are
    noted to not be widely implemented; e.g., "private=foo" is
    interpreted by many caches as simply "private".  Additionally, the
    meaning of the qualified form of no-cache has been clarified.
    (Section 5.2.2)

NEW:

    The qualified forms of the private and no-cache cache directives are
    noted to not be widely implemented; for example, "private=foo" is
    interpreted by many caches as simply "private".  Additionally, the
    meaning of the qualified form of no-cache has been clarified.
    (Section 5.2.2)


Appendix A., paragraph 14:
OLD:

    Some requirements regarding production and processing of the Warning
    header fields have been relaxed, as it is not widely implemented.
    Furthermore, the Warning header field no longer uses RFC 2047
    encoding, nor allows multiple languages, as these aspects were not
    implemented.  (Section 5.5)

NEW:

    Some requirements regarding production and processing of the Warning
    header fields have been relaxed, as it is not widely implemented.
    Furthermore, the Warning header field no longer uses RFC 2047
    encoding, nor does it allow multiple languages, as these aspects were
    not implemented.  (Section 5.5)


Appendix A., paragraph 15:
OLD:

    This specification introduces the Cache Directive and Warn Code
    Registries, and defines considerations for new cache directives.
    (Section 7.1 and Section 7.2)

NEW:

    This specification introduces the Cache Directive and Warn Code
    Registries, and defines considerations for new cache directives
    (Sections 7.1 and 7.2).

