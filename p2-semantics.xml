<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type='text/xsl' href='../myxml2rfc.xslt'?>
<!DOCTYPE rfc [
  <!ENTITY MAY "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>MAY</bcp14>">
  <!ENTITY MUST "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>MUST</bcp14>">
  <!ENTITY MUST-NOT "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>MUST NOT</bcp14>">
  <!ENTITY OPTIONAL "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>OPTIONAL</bcp14>">
  <!ENTITY RECOMMENDED "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>RECOMMENDED</bcp14>">
  <!ENTITY REQUIRED "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>REQUIRED</bcp14>">
  <!ENTITY SHALL "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>SHALL</bcp14>">
  <!ENTITY SHALL-NOT "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>SHALL NOT</bcp14>">
  <!ENTITY SHOULD "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>SHOULD</bcp14>">
  <!ENTITY SHOULD-NOT "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>SHOULD NOT</bcp14>">
  <!ENTITY ID-VERSION "latest">
  <!ENTITY ID-MONTH "October">
  <!ENTITY ID-YEAR "2011">
  <!ENTITY mdash "&#8212;">
  <!ENTITY architecture               "<xref target='Part1' x:rel='#architecture' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY notation                   "<xref target='Part1' x:rel='#notation' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY acks                       "<xref target='Part1' x:rel='#acks' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY messaging                  "<xref target='Part1' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY payload                    "<xref target='Part3' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY conditional                "<xref target='Part4' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY range                      "<xref target='Part5' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY caching                    "<xref target='Part6' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY auth                       "<xref target='Part7' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY content-negotiation        "<xref target='Part3' x:rel='#content.negotiation' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY agent-driven-negotiation   "<xref target='Part3' x:rel='#agent-driven.negotiation' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY notation-abnf              "<xref target='Part1' x:rel='#notation.abnf' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY basic-rules                "<xref target='Part1' x:rel='#basic.rules' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY field-rules                "<xref target='Part1' x:rel='#field.rules' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY uri                        "<xref target='Part1' x:rel='#uri' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY effective-request-uri      "<xref target='Part1' x:rel='#effective.request.uri' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY intermediaries             "<xref target='Part1' x:rel='#intermediaries' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY chunked-encoding           "<xref target='Part1' x:rel='#chunked.encoding' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY http-url                   "<xref target='Part1' x:rel='#http-url' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY http-version               "<xref target='Part1' x:rel='#http.version' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY use100                     "<xref target='Part1' x:rel='#use.of.the.100.status' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY qvalue                     "<xref target='Part3' x:rel='#quality.values' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY request-target             "<xref target='Part1' x:rel='#request-target' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-accept              "<xref target='Part3' x:rel='#header.accept' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-accept-charset      "<xref target='Part3' x:rel='#header.accept-charset' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-accept-encoding     "<xref target='Part3' x:rel='#header.accept-encoding' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-accept-language     "<xref target='Part3' x:rel='#header.accept-language' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-accept-ranges       "<xref target='Part5' x:rel='#header.accept-ranges' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-age                 "<xref target='Part6' x:rel='#header.age' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-authorization       "<xref target='Part7' x:rel='#header.authorization' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-cache-control       "<xref target='Part6' x:rel='#header.cache-control' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-connection          "<xref target='Part1' x:rel='#header.connection' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-content-location    "<xref target='Part3' x:rel='#header.content-location' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-content-range       "<xref target='Part5' x:rel='#header.content-range' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-content-type        "<xref target='Part3' x:rel='#header.content-type' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-etag                "<xref target='Part4' x:rel='#header.etag' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-expires             "<xref target='Part6' x:rel='#header.expires' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-fields              "<xref target='Part1' x:rel='#header.fields' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-host                "<xref target='Part1' x:rel='#header.host' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-if-match            "<xref target='Part4' x:rel='#header.if-match' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-if-modified-since   "<xref target='Part4' x:rel='#header.if-modified-since' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-if-none-match       "<xref target='Part4' x:rel='#header.if-none-match' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-if-range            "<xref target='Part5' x:rel='#header.if-range' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-if-unmodified-since "<xref target='Part4' x:rel='#header.if-unmodified-since' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-pragma              "<xref target='Part6' x:rel='#header.pragma' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-proxy-authenticate  "<xref target='Part7' x:rel='#header.proxy-authenticate' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-proxy-authorization "<xref target='Part7' x:rel='#header.proxy-authorization' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-range               "<xref target='Part5' x:rel='#header.range' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-upgrade             "<xref target='Part1' x:rel='#header.upgrade' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-te                  "<xref target='Part1' x:rel='#header.te' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-vary                "<xref target='Part6' x:rel='#header.vary' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-via                 "<xref target='Part1' x:rel='#header.via' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-warning             "<xref target='Part6' x:rel='#header.warning' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-www-authenticate    "<xref target='Part7' x:rel='#header.www-authenticate' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY media-types                "<xref target='Part3' x:rel='#media.types' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY message-body               "<xref target='Part1' x:rel='#message.body' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY product-tokens             "<xref target='Part1' x:rel='#product.tokens' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY media-type-message-http    "<xref target='Part1' x:rel='#internet.media.type.message.http' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY status-206                 "<xref target='Part5' x:rel='#status.206' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY status-304                 "<xref target='Part4' x:rel='#status.304' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY status-401                 "<xref target='Part7' x:rel='#status.401' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY status-407                 "<xref target='Part7' x:rel='#status.407' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY status-412                 "<xref target='Part4' x:rel='#status.412' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY status-416                 "<xref target='Part5' x:rel='#status.416' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY p3-header-fields           "<xref target='Part3' x:rel='#header.field.definitions' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY p4-status-codes            "<xref target='Part4' x:rel='#status.code.definitions' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY p5-status-codes            "<xref target='Part5' x:rel='#status.code.definitions' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY p7-status-codes            "<xref target='Part7' x:rel='#status.code.definitions' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY p6-heuristic               "<xref target='Part6' x:rel='#heuristic.freshness' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY p6-explicit                "<xref target='Part6' x:rel='#calculating.freshness.lifetime' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY p6-invalid                 "<xref target='Part6' x:rel='#invalidation.after.updates.or.deletions' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
]>
<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no" ?>
<?rfc linkmailto="no" ?>
<?rfc editing="no" ?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc-ext allow-markup-in-artwork="yes" ?>
<?rfc-ext include-references-in-index="yes" ?>
<rfc obsoletes="2616" updates="2817" category="std" x:maturity-level="draft"
     ipr="pre5378Trust200902" docName="draft-ietf-httpbis-p2-semantics-&ID-VERSION;"
     xmlns:x='http://purl.org/net/xml2rfc/ext'
     xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'>
<front>

  <title abbrev="HTTP/1.1, Part 2">HTTP/1.1, part 2: Message Semantics</title>

  <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
    <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
    <address>
      <postal>
        <street>345 Park Ave</street>
        <city>San Jose</city>
        <region>CA</region>
        <code>95110</code>
        <country>USA</country>
      </postal>
      <email>fielding@gbiv.com</email>
      <uri>http://roy.gbiv.com/</uri>
    </address>
  </author>

  <author initials="J." surname="Gettys" fullname="Jim Gettys">
    <organization abbrev="Alcatel-Lucent">Alcatel-Lucent Bell Labs</organization>
    <address>
      <postal>
        <street>21 Oak Knoll Road</street>
        <city>Carlisle</city>
        <region>MA</region>
        <code>01741</code>
        <country>USA</country>
      </postal>
      <email>jg@freedesktop.org</email>
      <uri>http://gettys.wordpress.com/</uri>
    </address>
  </author>
  
  <author initials="J." surname="Mogul" fullname="Jeffrey C. Mogul">
    <organization abbrev="HP">Hewlett-Packard Company</organization>
    <address>
      <postal>
        <street>HP Labs, Large Scale Systems Group</street>
        <street>1501 Page Mill Road, MS 1177</street>
        <city>Palo Alto</city>
        <region>CA</region>
        <code>94304</code>
        <country>USA</country>
      </postal>
      <email>JeffMogul@acm.org</email>
    </address>
  </author>

  <author initials="H." surname="Frystyk" fullname="Henrik Frystyk Nielsen">
    <organization abbrev="Microsoft">Microsoft Corporation</organization>
    <address>
      <postal>
        <street>1 Microsoft Way</street>
        <city>Redmond</city>
        <region>WA</region>
        <code>98052</code>
        <country>USA</country>
      </postal>
      <email>henrikn@microsoft.com</email>
    </address>
  </author>

  <author initials="L." surname="Masinter" fullname="Larry Masinter">
    <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
    <address>
      <postal>
        <street>345 Park Ave</street>
        <city>San Jose</city>
        <region>CA</region>
        <code>95110</code>
        <country>USA</country>
      </postal>
      <email>LMM@acm.org</email>
      <uri>http://larry.masinter.net/</uri>
    </address>
  </author>
  
  <author initials="P." surname="Leach" fullname="Paul J. Leach">
    <organization abbrev="Microsoft">Microsoft Corporation</organization>
    <address>
      <postal>
        <street>1 Microsoft Way</street>
        <city>Redmond</city>
        <region>WA</region>
        <code>98052</code>
      </postal>
      <email>paulle@microsoft.com</email>
    </address>
  </author>
   
  <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
    <organization abbrev="W3C/MIT">World Wide Web Consortium</organization>
    <address>
      <postal>
        <street>MIT Computer Science and Artificial Intelligence Laboratory</street>
        <street>The Stata Center, Building 32</street>
        <street>32 Vassar Street</street>
        <city>Cambridge</city>
        <region>MA</region>
        <code>02139</code>
        <country>USA</country>
      </postal>
      <email>timbl@w3.org</email>
      <uri>http://www.w3.org/People/Berners-Lee/</uri>
    </address>
  </author>

  <author initials="Y." surname="Lafon" fullname="Yves Lafon" role="editor">
    <organization abbrev="W3C">World Wide Web Consortium</organization>
    <address>
      <postal>
        <street>W3C / ERCIM</street>
        <street>2004, rte des Lucioles</street>
        <city>Sophia-Antipolis</city>
        <region>AM</region>
        <code>06902</code>
        <country>France</country>
      </postal>
      <email>ylafon@w3.org</email>
      <uri>http://www.raubacapeu.net/people/yves/</uri>
    </address>
  </author>

  <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
    <organization abbrev="greenbytes">greenbytes GmbH</organization>
    <address>
      <postal>
        <street>Hafenweg 16</street>
        <city>Muenster</city><region>NW</region><code>48155</code>
        <country>Germany</country>
      </postal>
      <phone>+49 251 2807760</phone>
      <facsimile>+49 251 2807761</facsimile>
      <email>julian.reschke@greenbytes.de</email>
      <uri>http://greenbytes.de/tech/webdav/</uri>
    </address>
  </author>

  <date month="&ID-MONTH;" year="&ID-YEAR;"/>
  <workgroup>HTTPbis Working Group</workgroup>

<abstract>
<t>
   The Hypertext Transfer Protocol (HTTP) is an application-level protocol for
   distributed, collaborative, hypertext information systems. HTTP has been in
   use by the World Wide Web global information initiative since 1990. This
   document is Part 2 of the seven-part specification that defines the protocol
   referred to as "HTTP/1.1" and, taken together, obsoletes RFC 2616.
</t>
<t>
   Part 2 defines the semantics of HTTP messages as expressed by request
   methods, request header fields, response status codes, and response header
   fields.
</t>
</abstract>

<note title="Editorial Note (To be removed by RFC Editor)">
  <t>
    Discussion of this draft should take place on the HTTPBIS working group
    mailing list (ietf-http-wg@w3.org), which is archived at
    <eref target="http://lists.w3.org/Archives/Public/ietf-http-wg/"/>.
  </t>
  <t>
    The current issues list is at
    <eref target="http://tools.ietf.org/wg/httpbis/trac/report/3"/> and related
    documents (including fancy diffs) can be found at
    <eref target="http://tools.ietf.org/wg/httpbis/"/>.
  </t>
  <t>
    The changes in this draft are summarized in <xref target="changes.since.16"/>.
  </t>
</note>
</front>
<middle>
<section title="Introduction" anchor="introduction">
<t>
   This document defines HTTP/1.1 request and response semantics.  Each HTTP
   message, as defined in &messaging;, is in the form of either a request or
   a response.  An HTTP server listens on a connection for HTTP requests and
   responds to each request, in the order received on that connection, with
   one or more HTTP response messages.  This document defines the commonly
   agreed upon semantics of the HTTP uniform interface, the intentions defined
   by each request method, and the various response messages that might be
   expected as a result of applying that method to the target resource.
</t>
<t>
   This document is currently disorganized in order to minimize the changes
   between drafts and enable reviewers to see the smaller errata changes.
   A future draft will reorganize the sections to better reflect the content.
   In particular, the sections will be ordered according to the typical
   processing of an HTTP request message (after message parsing): resource
   mapping, methods, request modifying header fields, response status,
   status modifying header fields, and resource metadata.  The current mess
   reflects how widely dispersed these topics and associated requirements
   had become in <xref target="RFC2616"/>.
</t>

<section title="Conformance and Error Handling" anchor="intro.conformance.and.error.handling">
<t>
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in <xref target="RFC2119"/>.
</t>
<t>
   This document defines conformance criteria for several roles in HTTP
   communication, including Senders, Recipients, Clients, Servers, User-Agents,
   Origin Servers, Intermediaries, Proxies and Gateways. See &architecture;
   for definitions of these terms.
</t>
<t>
   An implementation is considered conformant if it complies with all of the
   requirements associated with its role(s). Note that SHOULD-level requirements
   are relevant here, unless one of the documented exceptions is applicable.
</t>
<t>
   This document also uses ABNF to define valid protocol elements
   (<xref target="notation"/>). In addition to the prose requirements placed
   upon them, Senders &MUST-NOT; generate protocol elements that are invalid.
</t>
<t>
   Unless noted otherwise, Recipients &MAY; take steps to recover a usable
   protocol element from an invalid construct. However, HTTP does not define
   specific error handling mechanisms, except in cases where it has direct
   impact on security. This is because different uses of the protocol require
   different error handling strategies; for example, a Web browser may wish to
   transparently recover from a response where the Location header field
   doesn't parse according to the ABNF, whereby in a systems control protocol
   using HTTP, this type of error recovery could lead to dangerous consequences.
</t>
</section>

<section title="Syntax Notation" anchor="notation">
  <x:anchor-alias value="CR"/>
  <x:anchor-alias value="DIGIT"/>
  <x:anchor-alias value="LF"/>
  <x:anchor-alias value="HTAB"/>
  <x:anchor-alias value="VCHAR"/>
  <x:anchor-alias value="SP"/>
<t>
  This specification uses the ABNF syntax defined in &notation; (which
  extends the syntax defined in <xref target="RFC5234"/> with a list rule).
  <xref target="collected.abnf"/> shows the collected ABNF, with the list
  rule expanded.
</t>
<t>
  The following core rules are included by
  reference, as defined in <xref target="RFC5234" x:fmt="," x:sec="B.1"/>:
  ALPHA (letters), CR (carriage return), CRLF (CR LF), CTL (controls),
  DIGIT (decimal 0-9), DQUOTE (double quote),
  HEXDIG (hexadecimal 0-9/A-F/a-f), HTAB (horizontal tab), LF (line feed),
  OCTET (any 8-bit sequence of data), SP (space), and
  VCHAR (any visible US-ASCII character).
</t>

<section title="Core Rules" anchor="core.rules">
  <x:anchor-alias value="obs-text"/>
  <x:anchor-alias value="quoted-string"/>
  <x:anchor-alias value="token"/>
  <x:anchor-alias value="OWS"/>
  <x:anchor-alias value="RWS"/>
<t>
  The core rules below are defined in <xref target="Part1"/>:
</t>
<figure><artwork type="abnf2616">
  <x:ref>OWS</x:ref>           = &lt;OWS, defined in &basic-rules;&gt;
  <x:ref>RWS</x:ref>           = &lt;RWS, defined in &basic-rules;&gt;
  <x:ref>obs-text</x:ref>      = &lt;obs-text, defined in &basic-rules;&gt;
  <x:ref>quoted-string</x:ref> = &lt;quoted-string, defined in &field-rules;&gt;
  <x:ref>token</x:ref>         = &lt;token, defined in &field-rules;&gt;
</artwork></figure>
</section>

<section title="ABNF Rules defined in other Parts of the Specification" anchor="abnf.dependencies">
  <x:anchor-alias value="absolute-URI"/>
  <x:anchor-alias value="comment"/>
  <x:anchor-alias value="partial-URI"/>
  <x:anchor-alias value="product"/>
  <x:anchor-alias value="URI-reference"/>
<t>
  The ABNF rules below are defined in other parts: 
</t>
<figure><!--Part1--><artwork type="abnf2616">
  <x:ref>absolute-URI</x:ref>  = &lt;absolute-URI, defined in &uri;&gt;
  <x:ref>comment</x:ref>       = &lt;comment, defined in &header-fields;&gt;
  <x:ref>partial-URI</x:ref>   = &lt;partial-URI, defined in &uri;&gt;
  <x:ref>product</x:ref>       = &lt;product, defined in &product-tokens;&gt;
  <x:ref>URI-reference</x:ref> = &lt;URI-reference, defined in &uri;&gt;
</artwork></figure>
</section>
</section>
</section>

<section title="Method" anchor="method">
  <x:anchor-alias value="Method"/>
  <x:anchor-alias value="extension-method"/>
<t>
   The Method token indicates the request method to be performed on the target
   resource (&effective-request-uri;). The method is case-sensitive.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Method"/>
  <x:ref>Method</x:ref>         = <x:ref>token</x:ref>
</artwork></figure>
<t>
   The list of methods allowed by a resource can be specified in an
   Allow header field (<xref target="header.allow"/>). The status code of the response
   always notifies the client whether a method is currently allowed on a
   resource, since the set of allowed methods can change dynamically. An
   origin server &SHOULD; respond with the status code 405 (Method Not Allowed)
   if the method is known by the origin server but not allowed for the
   resource, and 501 (Not Implemented) if the method is
   unrecognized or not implemented by the origin server. The methods GET
   and HEAD &MUST; be supported by all general-purpose servers. All other
   methods are &OPTIONAL;; however, if the above methods are implemented,
   they &MUST; be implemented with the same semantics as those specified
   in <xref target="method.definitions"/>.
</t>

<section title="Overview of Methods" anchor="overview.of.methods">
<t>
  The methods listed below are defined in <xref target="method.definitions"/>.
</t>
<texttable align="left">
  <ttcol>Method Name</ttcol><ttcol>Defined in...</ttcol>
  
  <c>OPTIONS</c> <c><xref target="OPTIONS"/></c>
  <c>GET</c> <c><xref target="GET"/></c>
  <c>HEAD</c> <c><xref target="HEAD"/></c>
  <c>POST</c> <c><xref target="POST"/></c>
  <c>PUT</c> <c><xref target="PUT"/></c>
  <c>DELETE</c> <c><xref target="DELETE"/></c>
  <c>TRACE</c> <c><xref target="TRACE"/></c>
  <c>CONNECT</c> <c><xref target="CONNECT"/></c>
</texttable>
<t>
  Note that this list is not exhaustive &mdash; it does not include request methods defined
  in other specifications.
</t>
</section>

<section title="Method Registry" anchor="method.registry">
<t>
  The HTTP Method Registry defines the name space for the Method token in the
  Request line of an HTTP request.
</t>
<t>
  Registrations &MUST; include the following fields:
  <list style="symbols">
    <t>Method Name (see <xref target="method"/>)</t>
    <t>Safe ("yes" or "no", see <xref target="safe.methods"/>)</t>
    <t>Pointer to specification text</t>
  </list>
</t>
<t>
  Values to be added to this name space are subject to IETF review
  (<xref target="RFC5226" x:fmt="," x:sec="4.1"/>).
</t>
<t>
  The registry itself is maintained at <eref target="http://www.iana.org/assignments/http-methods"/>.
</t>

<section title="Considerations for New Methods" anchor="considerations.for.new.methods">
<t>
   When it is necessary to express new semantics for a HTTP request that
   aren't specific to a single application or media type, and currently defined
   methods are inadequate, it may be appropriate to register a new method.
</t>
<t>
   HTTP methods are generic; that is, they are potentially applicable to any
   resource, not just one particular media type, "type" of resource, or
   application. As such, it is preferred that new HTTP methods be registered
   in a document that isn't specific to a single application, so that this is
   clear.
</t>
<t>
   Due to the parsing rules defined in &message-body;, definitions of HTTP
   methods cannot prohibit the presence of a message-body on either the request
   or the response message (with responses to HEAD requests being the single
   exception). Definitions of new methods cannot change this rule, but they can
   specify that only zero-length bodies (as opposed to absent bodies) are allowed.
</t>
<t>
   New method definitions need to indicate whether they are safe (<xref
   target="safe.methods"/>), what semantics (if any) the request body has,
   and whether they are idempotent (<xref target="idempotent.methods"/>). 
   They also need to state whether they can be cached (&caching;); in 
   particular what conditions a cache may store the response, and under what 
   conditions such a stored response may be used to satisfy a subsequent 
   request.
</t>
</section>

</section>
</section>

<section title="Header Fields" anchor="header.fields">
<t>
   Header fields are key value pairs that can be used to communicate data about
   the message, its payload, the target resource, or about the connection
   itself (i.e., control data).  See &header-fields; for a general definition
   of their syntax.
</t>

<section title="Considerations for Creating Header Fields" anchor="considerations.for.creating.header.fields">
<t>
   New header fields are registered using the procedures described in
   <xref target="RFC3864"/>.
</t>
<t>
   The requirements for header field names are defined in
   <xref target="RFC3864" x:fmt="of" x:sec="4.1"/>.  Authors of specifications
   defining new fields are advised to keep the name as short as practical, and
   not to prefix them with "X-" if they are to be registered (either
   immediately or in the future).
</t>
<t>
   New header field values typically have their syntax defined using ABNF
   (<xref target="RFC5234"/>), using the extensions defined in &notation-abnf;
   as necessary, and are usually constrained to the range of ASCII characters.
   Header fields needing a greater range of characters can use an encoding
   such as the one defined in <xref target="RFC5987"/>. 
</t>
<t>
   Because commas (",") are used as a generic delimiter between field-values,
   they need to be treated with care if they are allowed in the field-value's
   payload. Typically, components that might contain a comma are protected with
   double-quotes using the quoted-string ABNF production (&field-rules;). 
</t>
<t>
   For example, a textual date and a URI (either of which might contain a comma)
   could be safely carried in field-values like these:
</t>
<figure><artwork type="example">
  Example-URI-Field: "http://example.com/a.html,foo",
                     "http://without-a-comma.example.com/"
  Example-Date-Field: "Sat, 04 May 1996", "Wed, 14 Sep 2005"
</artwork></figure>
<t>
   Many header fields use a format including (case-insensitively) named
   parameters (for instance, Content-Type, defined in &header-content-type;).
   Allowing both unquoted (token) and quoted (quoted-string) syntax for the
   parameter value enables recipients to use existing parser components. When
   allowing both forms, the meaning of a parameter value ought to be
   independent of the syntax used for it (for an example, see the notes on
   parameter handling for media types in &media-types;).
</t>
<t>
   Authors of specifications defining new header fields are advised to consider
   documenting:
  <list style="symbols">
    <x:lt>
      <t>Whether the field is a single value, or whether it can be a list
      (delimited by commas; see &header-fields;).</t>
      <t>If it does not use the list syntax, document how to treat messages
      where the header field occurs multiple times (a sensible default would
      be to ignore the header field, but this might not always be the right
      choice).</t>
      <t>Note that intermediaries and software libraries might combine
      multiple header field instances into a single one, despite the header
      field not allowing this. A robust format enables recipients to discover
      these situations (good example: "Content-Type", as the comma can only
      appear inside quoted strings; bad example: "Location", as a comma can
      occur inside a URI).</t>
    </x:lt>
    <x:lt><t>Under what conditions the header field can be used; e.g., only in
    responses or requests, in all messages, only on responses to a particular
    request method.</t></x:lt>
    <x:lt><t>Whether it is appropriate to list the field-name in the Connection header
    (i.e., if the header is to be hop-by-hop, see &header-connection;).</t></x:lt>
    <x:lt><t>Under what conditions intermediaries are allowed to modify the header
    field's value, insert or delete it.</t></x:lt>
    <x:lt><t>How the header might interact with caching (see <xref target="Part6"/>).</t></x:lt>
    <x:lt><t>Whether the header field is useful or allowable in trailers (see
    &chunked-encoding;).</t></x:lt>
    <x:lt><t>Whether the header field should be preserved across redirects.</t></x:lt>
  </list>
</t>
</section>

<section title="Request Header Fields" anchor="request.header.fields">
  <x:anchor-alias value="request-header"/>
<t>
   The request header fields allow the client to pass additional
   information about the request, and about the client itself, to the
   server. These fields act as request modifiers, with semantics
   equivalent to the parameters on a programming language method
   invocation.
</t>
<texttable align="left">
  <ttcol>Header Field Name</ttcol>
  <ttcol>Defined in...</ttcol>

  <c>Accept</c> <c>&header-accept;</c>
  <c>Accept-Charset</c> <c>&header-accept-charset;</c>
  <c>Accept-Encoding</c> <c>&header-accept-encoding;</c>
  <c>Accept-Language</c> <c>&header-accept-language;</c>
  <c>Authorization</c> <c>&header-authorization;</c>
  <c>Expect</c> <c><xref target="header.expect"/></c>
  <c>From</c> <c><xref target="header.from"/></c>
  <c>Host</c> <c>&header-host;</c>
  <c>If-Match</c> <c>&header-if-match;</c>
  <c>If-Modified-Since</c> <c>&header-if-modified-since;</c>
  <c>If-None-Match</c> <c>&header-if-none-match;</c>
  <c>If-Range</c> <c>&header-if-range;</c>
  <c>If-Unmodified-Since</c> <c>&header-if-unmodified-since;</c>
  <c>Max-Forwards</c> <c><xref target="header.max-forwards"/></c>
  <c>Proxy-Authorization</c> <c>&header-proxy-authorization;</c>
  <c>Range</c> <c>&header-range;</c>
  <c>Referer</c> <c><xref target="header.referer"/></c>
  <c>TE</c> <c>&header-te;</c>
  <c>User-Agent</c> <c><xref target="header.user-agent"/></c>
</texttable>
</section>

<section title="Response Header Fields" anchor="response.header.fields">
  <x:anchor-alias value="response-header"/>
<t>
   The response header fields allow the server to pass additional
   information about the response which cannot be placed in the Status-Line.
   These header fields give information about the server and about
   further access to the target resource (&effective-request-uri;).
</t>
<texttable align="left">
  <ttcol>Header Field Name</ttcol><ttcol>Defined in...</ttcol>

  <c>Accept-Ranges</c> <c>&header-accept-ranges;</c>
  <c>Age</c> <c>&header-age;</c>
  <c>Allow</c> <c><xref target="header.allow"/></c>
  <c>Date</c> <c><xref target="header.date"/></c>
  <c>ETag</c> <c>&header-etag;</c>
  <c>Location</c> <c><xref target="header.location"/></c>
  <c>Proxy-Authenticate</c> <c>&header-proxy-authenticate;</c>
  <c>Retry-After</c> <c><xref target="header.retry-after"/></c>
  <c>Server</c> <c><xref target="header.server"/></c>
  <c>Vary</c> <c>&header-vary;</c>
  <c>WWW-Authenticate</c> <c>&header-www-authenticate;</c>
</texttable>
</section>

</section>

<section title="Status Code and Reason Phrase" anchor="status.code.and.reason.phrase">
  <x:anchor-alias value="Reason-Phrase"/>
  <x:anchor-alias value="Status-Code"/>
  <x:anchor-alias value="extension-code"/>
<t>
   The Status-Code element is a 3-digit integer result code of the attempt to
   understand and satisfy the request.
</t>
<t>
   The Reason-Phrase is intended to give a short textual description of the
   Status-Code and is intended for a human user. The client does not need
   to examine or display the Reason-Phrase.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Status-Code"/><iref primary="true" item="Grammar" subitem="extension-code"/><iref primary="true" item="Grammar" subitem="Reason-Phrase"/>
  <x:ref>Status-Code</x:ref>    = 3<x:ref>DIGIT</x:ref>
  <x:ref>Reason-Phrase</x:ref>  = *( <x:ref>HTAB</x:ref> / <x:ref>SP</x:ref> / <x:ref>VCHAR</x:ref> / <x:ref>obs-text</x:ref> )
</artwork></figure>
<t>
   HTTP status codes are extensible. HTTP applications are not required
   to understand the meaning of all registered status codes, though such
   understanding is obviously desirable. However, applications &MUST;
   understand the class of any status code, as indicated by the first
   digit, and treat any unrecognized response as being equivalent to the
   x00 status code of that class, with the exception that an
   unrecognized response &MUST-NOT; be cached. For example, if an
   unrecognized status code of 431 is received by the client, it can
   safely assume that there was something wrong with its request and
   treat the response as if it had received a 400 status code. In such
   cases, user agents &SHOULD; present to the user the representation enclosed
   with the response, since that representation is likely to include human-readable
   information which will explain the unusual status.
</t>

<section title="Overview of Status Codes" anchor="overview.of.status.codes">
<t>  
   The status codes listed below are defined in <xref target="status.codes"/>
   of this specification, &p4-status-codes;, &p5-status-codes;, and &p7-status-codes;.
   The reason phrases listed here are only recommendations &mdash; they can be
   replaced by local equivalents without affecting the protocol.
</t>
<texttable align="left">
  <ttcol>Status-Code</ttcol>
  <ttcol>Reason-Phrase</ttcol>
  <ttcol>Defined in...</ttcol>
  
  <c>100</c> <c>Continue</c> <c><xref target="status.100"/></c>
  <c>101</c> <c>Switching Protocols</c> <c><xref target="status.101"/></c>

  <c>200</c> <c>OK</c> <c><xref target="status.200"/></c>
  <c>201</c> <c>Created</c> <c><xref target="status.201"/></c>
  <c>202</c> <c>Accepted</c> <c><xref target="status.202"/></c>
  <c>203</c> <c>Non-Authoritative Information</c> <c><xref target="status.203"/></c>
  <c>204</c> <c>No Content</c> <c><xref target="status.204"/></c>
  <c>205</c> <c>Reset Content</c> <c><xref target="status.205"/></c>
  <c>206</c> <c>Partial Content</c> <c>&status-206;</c>

  <c>300</c> <c>Multiple Choices</c> <c><xref target="status.300"/></c>
  <c>301</c> <c>Moved Permanently</c> <c><xref target="status.301"/></c>
  <c>302</c> <c>Found</c> <c><xref target="status.302"/></c>
  <c>303</c> <c>See Other</c> <c><xref target="status.303"/></c>
  <c>304</c> <c>Not Modified</c> <c>&status-304;</c>
  <c>305</c> <c>Use Proxy</c> <c><xref target="status.305"/></c>
  <c>307</c> <c>Temporary Redirect</c> <c><xref target="status.307"/></c>

  <c>400</c> <c>Bad Request</c> <c><xref target="status.400"/></c>
  <c>401</c> <c>Unauthorized</c> <c>&status-401;</c>
  <c>402</c> <c>Payment Required</c> <c><xref target="status.402"/></c>
  <c>403</c> <c>Forbidden</c> <c><xref target="status.403"/></c>
  <c>404</c> <c>Not Found</c> <c><xref target="status.404"/></c>
  <c>405</c> <c>Method Not Allowed</c> <c><xref target="status.405"/></c>
  <c>406</c> <c>Not Acceptable</c> <c><xref target="status.406"/></c>
  <c>407</c> <c>Proxy Authentication Required</c> <c>&status-407;</c>
  <c>408</c> <c>Request Time-out</c> <c><xref target="status.408"/></c>
  <c>409</c> <c>Conflict</c> <c><xref target="status.409"/></c>
  <c>410</c> <c>Gone</c> <c><xref target="status.410"/></c>
  <c>411</c> <c>Length Required</c> <c><xref target="status.411"/></c>
  <c>412</c> <c>Precondition Failed</c> <c>&status-412;</c>
  <c>413</c> <c>Request Representation Too Large</c> <c><xref target="status.413"/></c>
  <c>414</c> <c>URI Too Long</c> <c><xref target="status.414"/></c>
  <c>415</c> <c>Unsupported Media Type</c> <c><xref target="status.415"/></c>
  <c>416</c> <c>Requested range not satisfiable</c> <c>&status-416;</c>
  <c>417</c> <c>Expectation Failed</c> <c><xref target="status.417"/></c>
  <c>426</c> <c>Upgrade Required</c> <c><xref target="status.426"/></c>

  <c>500</c> <c>Internal Server Error</c> <c><xref target="status.500"/></c>
  <c>501</c> <c>Not Implemented</c> <c><xref target="status.501"/></c>
  <c>502</c> <c>Bad Gateway</c> <c><xref target="status.502"/></c>
  <c>503</c> <c>Service Unavailable</c> <c><xref target="status.503"/></c>
  <c>504</c> <c>Gateway Time-out</c> <c><xref target="status.504"/></c>
  <c>505</c> <c>HTTP Version not supported</c> <c><xref target="status.505"/></c>
</texttable>
<t>
   Note that this list is not exhaustive &mdash; it does not include
   extension status codes defined in other specifications.
</t>
</section>

<section title="Status Code Registry" anchor="status.code.registry">
<t>
  The HTTP Status Code Registry defines the name space for the Status-Code
  token in the Status-Line of an HTTP response.
</t>
<t>
  Values to be added to this name space are subject to IETF review
  (<xref target="RFC5226" x:fmt="," x:sec="4.1"/>).
</t>
<t>
  The registry itself is maintained at <eref target="http://www.iana.org/assignments/http-status-codes"/>.
</t>

<section title="Considerations for New Status Codes" anchor="considerations.for.new.status.codes">
<t>
   When it is necessary to express new semantics for a HTTP response that
   aren't specific to a single application or media type, and currently defined
   status codes are inadequate, a new status code can be registered.
</t>
<t>
   HTTP status codes are generic; that is, they are potentially applicable to
   any resource, not just one particular media type, "type" of resource, or
   application. As such, it is preferred that new HTTP status codes be
   registered in a document that isn't specific to a single application, so
   that this is clear.
</t>
<t>
   Definitions of new HTTP status codes typically explain the request
   conditions that produce a response containing the status code (e.g.,
   combinations of request headers and/or method(s)), along with any 
   interactions with response headers (e.g., those that are required, those
   that modify the semantics of the response).
</t>
<t>
   New HTTP status codes are required to fall under one of the categories
   defined in <xref target="status.codes"/>. To allow existing parsers to
   properly handle them, new status codes cannot disallow a response body,
   although they can mandate a zero-length response body. They can require the
   presence of one or more particular HTTP response header(s).
</t>
<t>
   Likewise, their definitions can specify that caches are allowed to use
   heuristics to determine their freshness (see &caching;; by default, it is
   not allowed), and can define how to determine the resource which they
   carry a representation for (see <xref
   target="identifying.response.associated.with.representation"/>; by default,
   it is anonymous).
</t>
</section>

</section>

</section>

<section title="Representation" anchor="representation">
<t>
   Request and Response messages &MAY; transfer a representation if not otherwise
   restricted by the request method or response status code. A representation
   consists of metadata (representation header fields) and data (representation
   body).  When a complete or partial representation is enclosed in an HTTP message,
   it is referred to as the payload of the message. HTTP representations
   are defined in &payload;.
</t>
<t>
   A representation body is only present in a message when a message-body is
   present, as described in &message-body;. The representation body is obtained
   from the message-body by decoding any Transfer-Encoding that might
   have been applied to ensure safe and proper transfer of the message.
</t>

<section title="Identifying the Resource Associated with a Representation" anchor="identifying.response.associated.with.representation">
<t>
   It is sometimes necessary to determine an identifier for the resource
   associated with a representation.
</t>
<t>
   An HTTP request representation, when present, is always associated with an
   anonymous (i.e., unidentified) resource.
</t>
<t>
   In the common case, an HTTP response is a representation of the target
   resource (see &effective-request-uri;). However, this is not always the
   case. To determine the URI of the resource a response is associated with,
   the following rules are used (with the first applicable one being selected):
</t>
<t><list style="numbers">
   <t>If the response status code is 200 or 203 and the request method was GET,
   the response payload is a representation of the target resource.</t>
   <t>If the response status code is 204, 206, or 304 and the request method was GET
   or HEAD, the response payload is a partial representation of the target
   resource.</t>
   <t>If the response has a Content-Location header field, and that URI is the same
   as the effective request URI, the response payload is a representation of the
   target resource.</t>
   <t>If the response has a Content-Location header field, and that URI is not the
   same as the effective request URI, then the response asserts that its
   payload is a representation of the resource identified by the
   Content-Location URI. However, such an assertion cannot be trusted unless
   it can be verified by other means (not defined by HTTP).</t>
   <t>Otherwise, the response is a representation of an anonymous (i.e.,
   unidentified) resource.</t>
</list></t>
<t>
  <cref anchor="TODO-req-uri">
   The comparison function is going to have to be defined somewhere,
   because we already need to compare URIs for things like cache invalidation.</cref>
</t>
</section>

</section>


<section title="Method Definitions" anchor="method.definitions">
<t>
   The set of common request methods for HTTP/1.1 is defined below. Although
   this set can be expanded, additional methods cannot be assumed to
   share the same semantics for separately extended clients and servers.
</t>

<section title="Safe and Idempotent Methods" anchor="safe.and.idempotent">

<section title="Safe Methods" anchor="safe.methods">
<iref item="Safe Methods" primary="true"/>
<t>
   Implementors need to be aware that the software represents the user in
   their interactions over the Internet, and need to allow
   the user to be aware of any actions they take which might have an
   unexpected significance to themselves or others.
</t>
<t>
   In particular, the convention has been established that the GET, HEAD,
   OPTIONS, and TRACE request methods &SHOULD-NOT; have the significance
   of taking an action other than retrieval. These request methods ought
   to be considered "<x:dfn anchor="safe">safe</x:dfn>".
   This allows user agents to represent other methods, such as POST, PUT
   and DELETE, in a special way, so that the user is made aware of the
   fact that a possibly unsafe action is being requested.
</t>
<t>
   Naturally, it is not possible to ensure that the server does not
   generate side-effects as a result of performing a GET request; in
   fact, some dynamic resources consider that a feature. The important
   distinction here is that the user did not request the side-effects,
   so therefore cannot be held accountable for them.
</t>
</section>

<section title="Idempotent Methods" anchor="idempotent.methods">
<iref item="Idempotent Methods" primary="true"/>
<t>
   Request methods can also have the property of "idempotence" in that,
   aside from error or expiration issues, the intended effect of multiple
   identical requests is the same as for a single request.
   PUT, DELETE, and all safe request methods are idempotent.
   It is important to note that idempotence refers only to changes
   requested by the client: a server is free to change its state due
   to multiple requests for the purpose of tracking those requests,
   versioning of results, etc.
</t>
</section>
</section>

<section title="OPTIONS" anchor="OPTIONS">
  <rdf:Description>
    <safe xmlns="urn:ietf:id:draft-ietf-httpbis-p2-semantics#">yes</safe>
  </rdf:Description>
  <iref primary="true" item="OPTIONS method" x:for-anchor=""/>
  <iref primary="true" item="Methods" subitem="OPTIONS" x:for-anchor=""/>
<t>
   The OPTIONS method requests information about the
   communication options available on the request/response chain
   identified by the effective request URI. This method allows a client to
   determine the options and/or requirements associated with a resource,
   or the capabilities of a server, without implying a resource action
   or initiating a resource retrieval.
</t>
<t>
   Responses to the OPTIONS method are not cacheable.
</t>
<t>
   If the OPTIONS request includes a message-body (as indicated by the
   presence of Content-Length or Transfer-Encoding), then the media type
   &MUST; be indicated by a Content-Type field. Although this
   specification does not define any use for such a body, future
   extensions to HTTP might use the OPTIONS body to make more detailed
   queries on the server.
</t>
<t>
   If the request-target is an asterisk ("*"), the OPTIONS request is
   intended to apply to the server in general rather than to a specific
   resource. Since a server's communication options typically depend on
   the resource, the "*" request is only useful as a "ping" or "no-op"
   type of method; it does nothing beyond allowing the client to test
   the capabilities of the server. For example, this can be used to test
   a proxy for HTTP/1.1 compliance (or lack thereof).
</t>
<t>
   If the request-target is not an asterisk, the OPTIONS request applies
   only to the options that are available when communicating with that
   resource.
</t>
<t>
   A 200 response &SHOULD; include any header fields that indicate
   optional features implemented by the server and applicable to that
   resource (e.g., Allow), possibly including extensions not defined by
   this specification. The response body, if any, &SHOULD; also include
   information about the communication options. The format for such a
   body is not defined by this specification, but might be defined by
   future extensions to HTTP. Content negotiation &MAY; be used to select
   the appropriate response format. If no response body is included, the
   response &MUST; include a Content-Length field with a field-value of
   "0".
</t>
<t>
   The Max-Forwards header field &MAY; be used to target a
   specific proxy in the request chain (see <xref target="header.max-forwards"/>).
   If no Max-Forwards field is present in the request, then the forwarded
   request &MUST-NOT; include a Max-Forwards field.
</t>
</section>

<section title="GET" anchor="GET">
  <rdf:Description>
    <safe xmlns="urn:ietf:id:draft-ietf-httpbis-p2-semantics#">yes</safe>
  </rdf:Description>
  <iref primary="true" item="GET method" x:for-anchor=""/>
  <iref primary="true" item="Methods" subitem="GET" x:for-anchor=""/>
<t>
   The GET method requests transfer of a current representation of
   the target resource.
</t>
<t>   
   If the target resource is a data-producing process, it is the
   produced data which shall be returned as the representation in the response and not
   the source text of the process, unless that text happens to be the output of
   the process.
</t>
<t>
   The semantics of the GET method change to a "conditional GET" if the
   request message includes an If-Modified-Since, If-Unmodified-Since,
   If-Match, If-None-Match, or If-Range header field. A conditional GET
   requests that the representation be transferred only under the
   circumstances described by the conditional header field(s). The
   conditional GET request is intended to reduce unnecessary network
   usage by allowing cached representations to be refreshed without requiring
   multiple requests or transferring data already held by the client.
</t>
<t>
   The semantics of the GET method change to a "partial GET" if the
   request message includes a Range header field. A partial GET requests
   that only part of the representation be transferred, as described in &header-range;.
   The partial GET request is intended to reduce unnecessary
   network usage by allowing partially-retrieved representations to be
   completed without transferring data already held by the client.
</t>
<t>
   Bodies on GET requests have no defined semantics. Note that sending a body
   on a GET request might cause some existing implementations to reject the
   request.
</t>
<t>
   The response to a GET request is cacheable and &MAY; be used to satisfy
   subsequent GET and HEAD requests (see &caching;).
</t>
<t>
   See <xref target="encoding.sensitive.information.in.uris"/> for security considerations when used for forms.
</t>
</section>

<section title="HEAD" anchor="HEAD">
  <rdf:Description>
    <safe xmlns="urn:ietf:id:draft-ietf-httpbis-p2-semantics#">yes</safe>
  </rdf:Description>
  <iref primary="true" item="HEAD method" x:for-anchor=""/>
  <iref primary="true" item="Methods" subitem="HEAD" x:for-anchor=""/>
<t>
   The HEAD method is identical to GET except that the server &MUST-NOT;
   return a message-body in the response. The metadata contained
   in the HTTP header fields in response to a HEAD request &SHOULD; be identical
   to the information sent in response to a GET request. This method can
   be used for obtaining metadata about the representation implied by the
   request without transferring the representation body. This method is
   often used for testing hypertext links for validity, accessibility,
   and recent modification.
</t>
<t>
   The response to a HEAD request is cacheable and &MAY; be used to satisfy
   a subsequent HEAD request; see &caching;. It also &MAY; be used to update a previously cached
   representation from that resource; if the new field values
   indicate that the cached representation differs from the current representation (as
   would be indicated by a change in Content-Length, ETag
   or Last-Modified), then the cache &MUST; treat the cache entry as
   stale.
</t>
<t>
   Bodies on HEAD requests have no defined semantics. Note that sending a body
   on a HEAD request might cause some existing implementations to reject the
   request.
</t>
</section>

<section title="POST" anchor="POST">
  <iref primary="true" item="POST method" x:for-anchor=""/>
  <iref primary="true" item="Methods" subitem="POST" x:for-anchor=""/>
<t>
   The POST method requests that the origin server accept the
   representation enclosed in the request as data to be processed by the 
   target resource. POST is designed to allow a uniform method to cover the
   following functions:
  <list style="symbols">
    <t>
      Annotation of existing resources;
    </t>
    <t>
        Posting a message to a bulletin board, newsgroup, mailing list,
        or similar group of articles;
    </t>
    <t>
        Providing a block of data, such as the result of submitting a
        form, to a data-handling process;
    </t>
    <t>
        Extending a database through an append operation.
    </t>
  </list>
</t>
<t>
   The actual function performed by the POST method is determined by the
   server and is usually dependent on the effective request URI.
</t>
<t>
   The action performed by the POST method might not result in a
   resource that can be identified by a URI. In this case, either 200
   (OK) or 204 (No Content) is the appropriate response status code,
   depending on whether or not the response includes a representation that
   describes the result.
</t>
<t>
   If a resource has been created on the origin server, the response
   &SHOULD; be 201 (Created) and contain a representation which describes the
   status of the request and refers to the new resource, and a Location
   header field (see <xref target="header.location"/>).
</t>
<t>
   Responses to POST requests are only cacheable when they
   include explicit freshness information (see &p6-explicit;). A
   cached POST response with a Content-Location header field 
   (see &header-content-location;) whose value is the effective 
   Request URI &MAY; be used to satisfy subsequent GET and HEAD requests.
</t>
<t>
   Note that POST caching is not widely implemented. 
   However, the 303 (See Other) response can be used to direct the 
   user agent to retrieve a cacheable resource.
</t>
</section>

<section title="PUT" anchor="PUT">
  <iref primary="true" item="PUT method" x:for-anchor=""/>
  <iref primary="true" item="Methods" subitem="PUT" x:for-anchor=""/>
<t>
   The PUT method requests that the state of the target resource
   be created or replaced with the state defined by the representation
   enclosed in the request message payload.  A successful PUT of a given
   representation would suggest that a subsequent GET on that same target
   resource will result in an equivalent representation being returned in
   a 200 (OK) response.  However, there is no guarantee that such a state
   change will be observable, since the target resource might be acted
   upon by other user agents in parallel, or might be subject to dynamic
   processing by the origin server, before any subsequent GET is received.
   A successful response only implies that the user agent's intent was
   achieved at the time of its processing by the origin server.
</t>
<t>   
   If the target resource does not have a current representation and
   the PUT successfully creates one, then the origin server &MUST; inform
   the user agent by sending a 201 (Created) response.  If the target
   resource does have a current representation and that representation is
   successfully modified in accordance with the state of the enclosed
   representation, then either a 200 (OK) or 204 (No Content) response
   &SHOULD; be sent to indicate successful completion of the request.
</t>
<t>
   Unrecognized header fields &SHOULD; be ignored (i.e., not saved
   as part of the resource state).
</t>
<t>
   An origin server &SHOULD; verify that the PUT representation is
   consistent with any constraints which the server has for the target
   resource that cannot or will not be changed by the PUT.  This is
   particularly important when the origin server uses internal
   configuration information related to the URI in order to set the
   values for representation metadata on GET responses.  When a PUT
   representation is inconsistent with the target resource, the origin
   server &SHOULD; either make them consistent, by transforming the
   representation or changing the resource configuration, or respond
   with an appropriate error message containing sufficient information
   to explain why the representation is unsuitable.  The 409 (Conflict)
   or 415 (Unsupported Media Type) status codes are suggested, with the
   latter being specific to constraints on Content-Type values.
</t>
<t>
   For example, if the target resource is configured to always have a
   Content-Type of "text/html" and the representation being PUT has a
   Content-Type of "image/jpeg", then the origin server &SHOULD; do one of:
   (a) reconfigure the target resource to reflect the new media type;
   (b) transform the PUT representation to a format consistent with that
   of the resource before saving it as the new resource state; or,
   (c) reject the request with a 415 response indicating that the target
   resource is limited to "text/html", perhaps including a link to a
   different resource that would be a suitable target for the new
   representation.
</t>
<t>
   HTTP does not define exactly how a PUT method affects the state
   of an origin server beyond what can be expressed by the intent of
   the user agent request and the semantics of the origin server response.
   It does not define what a resource might be, in any sense of that
   word, beyond the interface provided via HTTP.  It does not define
   how resource state is "stored", nor how such storage might change
   as a result of a change in resource state, nor how the origin server
   translates resource state into representations.  Generally speaking,
   all implementation details behind the resource interface are
   intentionally hidden by the server.
</t>
<t>
   The fundamental difference between the POST and PUT methods is
   highlighted by the different intent for the target resource.
   The target resource in a POST request is intended to handle the
   enclosed representation as a data-accepting process, such as for
   a gateway to some other protocol or a document that accepts annotations.
   In contrast, the target resource in a PUT request is intended to
   take the enclosed representation as a new or replacement value.
   Hence, the intent of PUT is idempotent and visible to intermediaries,
   even though the exact effect is only known by the origin server.
</t>
<t>
   Proper interpretation of a PUT request presumes that the user agent
   knows what target resource is desired.  A service that is intended
   to select a proper URI on behalf of the client, after receiving
   a state-changing request, &SHOULD; be implemented using the POST
   method rather than PUT.  If the origin server will not make the
   requested PUT state change to the target resource and instead
   wishes to have it applied to a different resource, such as when the
   resource has been moved to a different URI, then the origin server
   &MUST; send a 301 (Moved Permanently) response; the user agent &MAY;
   then make its own decision regarding whether or not to redirect the
   request.
</t>
<t>
   A PUT request applied to the target resource &MAY; have side-effects
   on other resources.  For example, an article might have a URI for
   identifying "the current version" (a resource) which is separate
   from the URIs identifying each particular version (different
   resources that at one point shared the same state as the current version
   resource).  A successful PUT request on "the current version" URI might
   therefore create a new version resource in addition to changing the
   state of the target resource, and might also cause links to be added
   between the related resources.
</t>
<t>
   An origin server &SHOULD; reject any PUT request that contains a
   Content-Range header field, since it might be misinterpreted as
   partial content (or might be partial content that is being mistakenly
   PUT as a full representation).  Partial content updates are
   possible by targeting a separately identified resource with state
   that overlaps a portion of the larger resource, or by using a
   different method that has been specifically defined for partial
   updates (for example, the PATCH method defined in
   <xref target="RFC5789"/>).
</t>
<t>
   Responses to the PUT method are not cacheable. If a PUT request passes 
   through a cache that has one or more stored responses for the effective 
   request URI, those stored responses will be invalidated (see
   &p6-invalid;).
</t>
</section>

<section title="DELETE" anchor="DELETE">
  <iref primary="true" item="DELETE method" x:for-anchor=""/>
  <iref primary="true" item="Methods" subitem="DELETE" x:for-anchor=""/>
<t>
   The DELETE method requests that the origin server delete the target
   resource. This method &MAY; be overridden by
   human intervention (or other means) on the origin server. The client cannot
   be guaranteed that the operation has been carried out, even if the
   status code returned from the origin server indicates that the action
   has been completed successfully. However, the server &SHOULD-NOT; 
   indicate success unless, at the time the response is given, it
   intends to delete the resource or move it to an inaccessible
   location.
</t>
<t>
   A successful response &SHOULD; be 200 (OK) if the response includes an
   representation describing the status, 202 (Accepted) if the action has not
   yet been enacted, or 204 (No Content) if the action has been enacted
   but the response does not include a representation.
</t>
<t>
   Bodies on DELETE requests have no defined semantics. Note that sending a body
   on a DELETE request might cause some existing implementations to reject the
   request.
</t>
<t>
   Responses to the DELETE method are not cacheable. If a DELETE request 
   passes through a cache that has one or more stored responses for the 
   effective request URI, those stored responses will be invalidated (see
   &p6-invalid;).
</t>
</section>

<section title="TRACE" anchor="TRACE">
  <rdf:Description>
    <safe xmlns="urn:ietf:id:draft-ietf-httpbis-p2-semantics#">yes</safe>
  </rdf:Description>
  <iref primary="true" item="TRACE method" x:for-anchor=""/>
  <iref primary="true" item="Methods" subitem="TRACE" x:for-anchor=""/>
<t>
   The TRACE method requests a remote, application-layer loop-back
   of the request message. The final recipient of the request
   &SHOULD; reflect the message received back to the client as the
   message-body of a 200 (OK) response. The final recipient is either the
   origin server or the first proxy to receive a Max-Forwards
   value of zero (0) in the request (see <xref target="header.max-forwards"/>).
   A TRACE request &MUST-NOT; include a message-body.
</t>
<t>
   TRACE allows the client to see what is being received at the other
   end of the request chain and use that data for testing or diagnostic
   information. The value of the Via header field (&header-via;) is of
   particular interest, since it acts as a trace of the request chain.
   Use of the Max-Forwards header field allows the client to limit the
   length of the request chain, which is useful for testing a chain of
   proxies forwarding messages in an infinite loop.
</t>
<t>
   If the request is valid, the response &SHOULD; have a Content-Type of
   "message/http" (see &media-type-message-http;) and contain a message-body
   that encloses a copy of the entire request message.
   Responses to the TRACE method are not cacheable.
</t>
</section>

<section title="CONNECT" anchor="CONNECT">
  <iref primary="true" item="CONNECT method" x:for-anchor=""/>
  <iref primary="true" item="Methods" subitem="CONNECT" x:for-anchor=""/>
<t>
   The CONNECT method requests that the proxy establish a tunnel
   to the request-target and then restrict its behavior to blind
   forwarding of packets until the connection is closed.
</t>
<t>
   When using CONNECT, the request-target &MUST; use the authority form
   (&request-target;); i.e., the request-target consists of only the
   host name and port number of the tunnel destination, separated by a colon.
   For example,
</t>
<figure><artwork type="message/http; msgtype=&#34;request&#34;" x:indent-with="  ">
CONNECT server.example.com:80 HTTP/1.1
Host: server.example.com:80

</artwork></figure>
<t>
   Other HTTP mechanisms can be used normally with the CONNECT method &mdash;
   except end-to-end protocol Upgrade requests, since the
   tunnel must be established first.
</t>
<t>
   For example, proxy authentication might be used to establish the
   authority to create a tunnel:
</t>
<figure><artwork type="message/http; msgtype=&#34;request&#34;" x:indent-with="  ">
CONNECT server.example.com:80 HTTP/1.1
Host: server.example.com:80
Proxy-Authorization: basic aGVsbG86d29ybGQ=

</artwork></figure>
<t>
   Bodies on CONNECT requests have no defined semantics. Note that sending a body
   on a CONNECT request might cause some existing implementations to reject the
   request.
</t>
<t>
   Like any other pipelined HTTP/1.1 request, data to be tunnel may be
   sent immediately after the blank line. The usual caveats also apply:
   data may be discarded if the eventual response is negative, and the
   connection may be reset with no response if more than one TCP segment
   is outstanding.
</t>

<section title="Establishing a Tunnel with CONNECT">
<t>
   Any successful (2xx) response to a CONNECT request indicates that the
   proxy has established a connection to the requested host and port,
   and has switched to tunneling the current connection to that server
   connection.
</t>
<t>
   It may be the case that the proxy itself can only reach the requested
   origin server through another proxy.  In this case, the first proxy
   &SHOULD; make a CONNECT request of that next proxy, requesting a tunnel
   to the authority.  A proxy &MUST-NOT; respond with any 2xx status code
   unless it has either a direct or tunnel connection established to the
   authority.
</t>
<t>
   An origin server which receives a CONNECT request for itself &MAY;
   respond with a 2xx status code to indicate that a connection is
   established.
</t>
<t>
   If at any point either one of the peers gets disconnected, any
   outstanding data that came from that peer will be passed to the other
   one, and after that also the other connection will be terminated by
   the proxy. If there is outstanding data to that peer undelivered,
   that data will be discarded.
</t>

</section>
</section>
</section>


<section title="Status Code Definitions" anchor="status.codes">
<t>
   The first digit of the Status-Code defines the class of response. The
   last two digits do not have any categorization role. There are 5
   values for the first digit:
  <list style="symbols">
    <t>
      1xx: Informational - Request received, continuing process
    </t>
    <t>
      2xx: Success - The action was successfully received,
        understood, and accepted
    </t>
    <t>
      3xx: Redirection - Further action must be taken in order to
        complete the request
    </t>
    <t>
      4xx: Client Error - The request contains bad syntax or cannot
        be fulfilled
    </t>
    <t>
      5xx: Server Error - The server failed to fulfill an apparently
        valid request
    </t>
  </list>
</t>
<t>
   Each Status-Code is described below, including any metadata required
   in the response.
</t>

<section title="Informational 1xx" anchor="status.1xx">
<t>
   This class of status code indicates a provisional response,
   consisting only of the Status-Line and optional header fields, and is
   terminated by an empty line. There are no required header fields for this
   class of status code. Since HTTP/1.0 did not define any 1xx status
   codes, servers &MUST-NOT; send a 1xx response to an HTTP/1.0 client
   except under experimental conditions.
</t>
<t>
   A client &MUST; be prepared to accept one or more 1xx status responses
   prior to a regular response, even if the client does not expect a 100
   (Continue) status message. Unexpected 1xx status responses &MAY; be
   ignored by a user agent.
</t>
<t>
   Proxies &MUST; forward 1xx responses, unless the connection between the
   proxy and its client has been closed, or unless the proxy itself
   requested the generation of the 1xx response. (For example, if a
   proxy adds a "Expect: 100-continue" field when it forwards a request,
   then it need not forward the corresponding 100 (Continue)
   response(s).)
</t>

<section title="100 Continue" anchor="status.100">
  <iref primary="true" item="100 Continue (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="100 Continue" x:for-anchor=""/>
<t>
   The client &SHOULD; continue with its request. This interim response is
   used to inform the client that the initial part of the request has
   been received and has not yet been rejected by the server. The client
   &SHOULD; continue by sending the remainder of the request or, if the
   request has already been completed, ignore this response. The server
   &MUST; send a final response after the request has been completed. See
   &use100; for detailed discussion of the use and handling of this
   status code.
</t>
</section>

<section title="101 Switching Protocols" anchor="status.101">
  <iref primary="true" item="101 Switching Protocols (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="101 Switching Protocols" x:for-anchor=""/>
<t>
   The server understands and is willing to comply with the client's
   request, via the Upgrade message header field (&header-upgrade;), for a
   change in the application protocol being used on this connection. The
   server will switch protocols to those defined by the response's
   Upgrade header field immediately after the empty line which
   terminates the 101 response.
</t>
<t>
   The protocol &SHOULD; be switched only when it is advantageous to do
   so. For example, switching to a newer version of HTTP is advantageous
   over older versions, and switching to a real-time, synchronous
   protocol might be advantageous when delivering resources that use
   such features.
</t>
</section>
</section>

<section title="Successful 2xx" anchor="status.2xx">
<t>
   This class of status code indicates that the client's request was
   successfully received, understood, and accepted.
</t>

<section title="200 OK" anchor="status.200">
  <iref primary="true" item="200 OK (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="200 OK" x:for-anchor=""/>
<t>
   The request has succeeded. The payload returned with the response
   is dependent on the method used in the request, for example:
  <list style="hanging">
    <t hangText="GET">
      a representation of the target resource is sent in the response;
    </t>
    <t hangText="HEAD">
      the same representation as GET, except without the message-body;
    </t>
    <t hangText="POST">
      a representation describing or containing the result of the action;
    </t>
    <t hangText="TRACE">
      a representation containing the request message as received by the
      end server.
    </t>
  </list>
</t>
<t>
   Caches &MAY; use a heuristic (see &p6-heuristic;) to determine 
   freshness for 200 responses.
</t>
</section>

<section title="201 Created" anchor="status.201">
  <iref primary="true" item="201 Created (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="201 Created" x:for-anchor=""/>
<t>
   The request has been fulfilled and has resulted in a new resource being
   created. The newly created resource can be referenced by the URI(s)
   returned in the payload of the response, with the most specific URI
   for the resource given by a Location header field. The response
   &SHOULD; include a payload containing a list of resource
   characteristics and location(s) from which the user or user agent can
   choose the one most appropriate. The payload format is specified by
   the media type given in the Content-Type header field. The origin
   server &MUST; create the resource before returning the 201 status code.
   If the action cannot be carried out immediately, the server &SHOULD;
   respond with 202 (Accepted) response instead.
</t>
<t>
   A 201 response &MAY; contain an ETag response header field indicating
   the current value of the entity-tag for the representation of the resource
   just created (see &header-etag;).
</t>
</section>

<section title="202 Accepted" anchor="status.202">
  <iref primary="true" item="202 Accepted (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="202 Accepted" x:for-anchor=""/>
<t>
   The request has been accepted for processing, but the processing has
   not been completed.  The request might or might not eventually be
   acted upon, as it might be disallowed when processing actually takes
   place. There is no facility for re-sending a status code from an
   asynchronous operation such as this.
</t>
<t>
   The 202 response is intentionally non-committal. Its purpose is to
   allow a server to accept a request for some other process (perhaps a
   batch-oriented process that is only run once per day) without
   requiring that the user agent's connection to the server persist
   until the process is completed. The representation returned with this
   response &SHOULD; include an indication of the request's current status
   and either a pointer to a status monitor or some estimate of when the
   user can expect the request to be fulfilled.
</t>
</section>

<section title="203 Non-Authoritative Information" anchor="status.203">
  <iref primary="true" item="203 Non-Authoritative Information (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="203 Non-Authoritative Information" x:for-anchor=""/>
<t>
   The representation in the response has been transformed or otherwise
   modified by a transforming proxy (&intermediaries;).  Note that the
   behaviour of transforming intermediaries is controlled by the no-transform
   Cache-Control directive (&header-cache-control;).
</t>
<t>
   This status code is only appropriate when the response status code would
   have been 200 (OK) otherwise. When the status code before transformation
   would have been different, the 214 Transformation Applied warn-code
   (&header-warning;) is appropriate.
</t>
<t>
   Caches &MAY; use a heuristic (see &p6-heuristic;) to determine 
   freshness for 203 responses.
</t>
</section>

<section title="204 No Content" anchor="status.204">
  <iref primary="true" item="204 No Content (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="204 No Content" x:for-anchor=""/>
<t>
   The 204 (No Content) status code indicates that the server has
   successfully fulfilled the request and that there is no additional
   content to return in the response payload body.  Metadata in the
   response header fields refer to the target resource and its current
   representation after the requested action.
</t>
<t>
   For example, if a 204 status code is received in response to a PUT
   request and the response contains an ETag header field, then the PUT
   was successful and the ETag field-value contains the entity-tag for
   the new representation of that target resource.
</t>
<t>
   The 204 response allows a server to indicate that the action has been
   successfully applied to the target resource while implying that the
   user agent &SHOULD-NOT; traverse away from its current "document view"
   (if any).  The server assumes that the user agent will provide some
   indication of the success to its user, in accord with its own interface,
   and apply any new or updated metadata in the response to the active
   representation.
</t>
<t>
   For example, a 204 status code is commonly used with document editing
   interfaces corresponding to a "save" action, such that the document
   being saved remains available to the user for editing. It is also
   frequently used with interfaces that expect automated data transfers
   to be prevalent, such as within distributed version control systems.
</t>
<t>
   The 204 response &MUST-NOT; include a message-body, and thus is always
   terminated by the first empty line after the header fields.
</t>
</section>

<section title="205 Reset Content" anchor="status.205">
  <iref primary="true" item="205 Reset Content (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="205 Reset Content" x:for-anchor=""/>
<t>
   The server has fulfilled the request and the user agent &SHOULD; reset
   the document view which caused the request to be sent. This response
   is primarily intended to allow input for actions to take place via
   user input, followed by a clearing of the form in which the input is
   given so that the user can easily initiate another input action.
</t>
<t>   
   The message-body included with the response &MUST; be empty. Note that
   receivers still need to parse the response according to the algorithm defined
   in &message-body;.
</t>
</section>

<section title="206 Partial Content" anchor="status.206">
  <iref primary="true" item="206 Partial Content (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="206 Partial Content" x:for-anchor=""/>
  <rdf:Description>
    <redirects-to xmlns="urn:ietf:id:draft-ietf-httpbis-p2-semantics#">Part5</redirects-to>
  </rdf:Description>
<t>
   The server has fulfilled the partial GET request for the resource
   and the enclosed payload is a partial representation as defined in &status-206;.
</t>
<t>
   Caches &MAY; use a heuristic (see &p6-heuristic;) to determine 
   freshness for 206 responses.
</t>
</section>
</section>

<section title="Redirection 3xx" anchor="status.3xx">
<t>
   This class of status code indicates that further action needs to be
   taken by the user agent in order to fulfill the request.  If the required
   action involves a subsequent HTTP request, it &MAY; be carried out by the
   user agent without interaction with the user if and only if the method used
   in the second request is known to be "safe", as defined in
   <xref target="safe.methods"/>.
</t>
<t>
   There are several types of redirects:
   <list style="numbers">
      <x:lt>
        <t>
          Redirects of the request to another URI, either temporarily or
          permanently. The new URI is specified in the Location header field.
          In this specification, the status codes 301 (Moved Permanently), 
          302 (Found), and 307 (Temporary Redirect) fall under this category.
        </t>
      </x:lt>
      <x:lt>
        <t>
          Redirection to a new location that represents an indirect response to
          the request, such as the result of a POST operation to be retrieved
          with a subsequent GET request. This is status code 303 (See Other).
        </t>
      </x:lt>
      <x:lt>
        <t>
          Redirection offering a choice of matching resources for use by
          agent-driven content negotiation (&agent-driven-negotiation;). This
          is status code 300 (Multiple Choices).
        </t>
      </x:lt>
      <x:lt>
        <t>
          Other kinds of redirection, such as to a cached result (status code 304
          (Not Modified)). 
        </t>
      </x:lt>
   </list>
</t>
<x:note>
  <t>
    <x:h>Note:</x:h> In HTTP/1.0, only the status codes 301 (Moved Permanently)
    and 302 (Found) were defined for the first type of redirect, and the second
    type did not exist at all (<xref target="RFC1945" x:fmt="," x:sec="9.3"/>).
    However it turned out that web forms using POST expected redirects to change
    the operation for the subsequent request to retrieval (GET). To address this
    use case, HTTP/1.1 introduced the second type of redirect with the status
    code 303 (See Other) (<xref target="RFC2068" x:fmt="," x:sec="10.3.4"/>).
    As user agents did not change their behavior to maintain backwards
    compatibility, the first revision of HTTP/1.1 added yet another status code,
    307 (Temporary Redirect), for which the backwards compatibility problems did
    not apply (<xref target="RFC2616" x:fmt="," x:sec="10.3.8"/>).
    Over 10 years later, most user agents still do method rewriting for
    status codes 301 and 302, therefore this specification makes that behavior
    compliant in case the original request was POST.
  </t>
</x:note>
<t>
   Clients &SHOULD; detect and intervene in cyclical redirections (i.e.,
   "infinite" redirection loops).
</t>
<x:note>
  <t>
    <x:h>Note:</x:h> An earlier version of this specification recommended a
    maximum of five redirections (<xref target="RFC2068" x:fmt="," x:sec="10.3"/>).
    Content developers need to be aware that some clients might
    implement such a fixed limitation.
  </t>
</x:note>

<section title="300 Multiple Choices" anchor="status.300">
  <iref primary="true" item="300 Multiple Choices (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="300 Multiple Choices" x:for-anchor=""/>
<t>
   The target resource has more than one
   representation, each with its own specific location, and agent-driven
   negotiation information (&content-negotiation;) is being provided so that
   the user (or user agent) can select a preferred representation by
   redirecting its request to that location.
</t>
<t>
   Unless it was a HEAD request, the response &SHOULD; include a representation
   containing a list of representation metadata and location(s) from
   which the user or user agent can choose the one most appropriate. The
   data format is specified by the media type given in the Content-Type
   header field. Depending upon the format and the capabilities of
   the user agent, selection of the most appropriate choice &MAY; be
   performed automatically. However, this specification does not define
   any standard for such automatic selection.
</t>
<t>
   If the server has a preferred choice of representation, it &SHOULD;
   include the specific URI for that representation in the Location
   field; user agents &MAY; use the Location field value for automatic
   redirection. 
</t>
<t>
   Caches &MAY; use a heuristic (see &p6-heuristic;) to determine 
   freshness for 300 responses.
</t>

</section>

<section title="301 Moved Permanently" anchor="status.301">
  <iref primary="true" item="301 Moved Permanently (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="301 Moved Permanently" x:for-anchor=""/>
<t>
   The target resource has been assigned a new permanent URI and any
   future references to this resource &SHOULD; use one of the returned
   URIs.  Clients with link editing capabilities ought to automatically
   re-link references to the effective request URI to one or more of the new
   references returned by the server, where possible.
</t>
<t>
   Caches &MAY; use a heuristic (see &p6-heuristic;) to determine 
   freshness for 301 responses.
</t>
<t>
   The new permanent URI &SHOULD; be given by the Location field in the
   response. Unless the request method was HEAD, the representation of the
   response &SHOULD; contain a short hypertext note with a hyperlink to
   the new URI(s).
</t>
<t>
   If the 301 status code is received in response to a request method
   that is known to be "safe", as defined in <xref target="safe.methods"/>,
   then the request &MAY; be automatically redirected by the user agent without
   confirmation.  Otherwise, the user agent &MUST-NOT; automatically redirect the
   request unless it can be confirmed by the user, since this might
   change the conditions under which the request was issued.
</t>
<x:note>
  <t>
    <x:h>Note:</x:h> For historic reasons, user agents &MAY; change the
    request method from POST to GET for the subsequent request. If this
    behavior is undesired, status code 307 (Temporary Redirect) can be used
    instead.
  </t>
</x:note>
</section>

<section title="302 Found" anchor="status.302">
  <iref primary="true" item="302 Found (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="302 Found" x:for-anchor=""/>
<t>
   The target resource resides temporarily under a different URI.
   Since the redirection might be altered on occasion, the client &SHOULD;
   continue to use the effective request URI for future requests.
</t>
<t>
   The temporary URI &SHOULD; be given by the Location field in the
   response. Unless the request method was HEAD, the representation of the
   response &SHOULD; contain a short hypertext note with a hyperlink to
   the new URI(s).
</t>
<t>
   If the 302 status code is received in response to a request method
   that is known to be "safe", as defined in <xref target="safe.methods"/>,
   then the request &MAY; be automatically redirected by the user agent without
   confirmation.  Otherwise, the user agent &MUST-NOT; automatically redirect the
   request unless it can be confirmed by the user, since this might
   change the conditions under which the request was issued.
</t>
<x:note>
  <t>
    <x:h>Note:</x:h> For historic reasons, user agents &MAY; change the
    request method from POST to GET for the subsequent request. If this
    behavior is undesired, status code 307 (Temporary Redirect) can be used
    instead.
    <cref anchor="issue312">but see <eref target="http://trac.tools.ietf.org/wg/httpbis/trac/ticket/312"/></cref>
  </t>
</x:note>
</section>

<section title="303 See Other" anchor="status.303">
  <iref primary="true" item="303 See Other (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="303 See Other" x:for-anchor=""/>
<t>
   The 303 status code indicates that the server is redirecting the
   user agent to a different resource, as indicated by a URI in the
   Location header field, that is intended to provide an indirect
   response to the original request.  In order to satisfy the original
   request, a user agent &SHOULD; perform a retrieval request using the
   Location URI (a GET or HEAD request if using HTTP), which
   may itself be redirected further, and present the eventual result as an
   answer to the original request.
   Note that the new URI in the Location header field is not considered
   equivalent to the effective request URI. 
</t>
<t>
   This status code is generally applicable to any HTTP method.  It is
   primarily used to allow the output of a POST action to redirect
   the user agent to a selected resource, since doing so provides the
   information corresponding to the POST response in a form that
   can be separately identified, bookmarked, and cached independent
   of the original request.
</t>
<t>
   A 303 response to a GET request indicates that the requested
   resource does not have a representation of its own that can be
   transferred by the server over HTTP.  The Location URI indicates a
   resource that is descriptive of the target resource, such that the
   follow-on representation might be useful to recipients without
   implying that it adequately represents the target resource.
   Note that answers to the questions of what can be represented, what
   representations are adequate, and what might be a useful description
   are outside the scope of HTTP and thus entirely determined by the
   URI owner(s).
</t>
<t>
   Except for responses to a HEAD request, the representation of a 303 
   response &SHOULD; contain a short hypertext note with a hyperlink 
   to the Location URI.
</t>
</section>

<section title="304 Not Modified" anchor="status.304">
  <iref primary="true" item="304 Not Modified (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="304 Not Modified" x:for-anchor=""/>
  <rdf:Description>
    <redirects-to xmlns="urn:ietf:id:draft-ietf-httpbis-p2-semantics#">Part4</redirects-to>
  </rdf:Description>
<t>
   The response to the request has not been modified since the conditions
   indicated by the client's conditional GET request, as defined in &status-304;.
</t>
</section>

<section title="305 Use Proxy" anchor="status.305">
  <iref primary="true" item="305 Use Proxy (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="305 Use Proxy" x:for-anchor=""/>
<t>
   The 305 status code was defined in a previous version of this specification
   (see <xref target="changes.from.rfc.2616"/>), and is now deprecated.
</t>
</section>

<section title="306 (Unused)" anchor="status.306">
  <iref primary="true" item="306 (Unused) (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="306 (Unused)" x:for-anchor=""/>
<t>
   The 306 status code was used in a previous version of the
   specification, is no longer used, and the code is reserved.
</t>
</section>

<section title="307 Temporary Redirect" anchor="status.307">
  <iref primary="true" item="307 Temporary Redirect (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="307 Temporary Redirect" x:for-anchor=""/>
<t>
   The target resource resides temporarily under a different URI.
   Since the redirection can change over time, the client &SHOULD;
   continue to use the effective request URI for future requests.
</t>
<t>
   The temporary URI &SHOULD; be given by the Location field in the
   response. Unless the request method was HEAD, the representation of the
   response &SHOULD; contain a short hypertext note with a hyperlink to
   the new URI(s), since many pre-HTTP/1.1 user agents do not
   understand the 307 status code. Therefore, the note &SHOULD; contain the
   information necessary for a user to repeat the original request on
   the new URI.
</t>
<t>
   If the 307 status code is received in response to a request method
   that is known to be "safe", as defined in <xref target="safe.methods"/>,
   then the request &MAY; be automatically redirected by the user agent without
   confirmation.  Otherwise, the user agent &MUST-NOT; automatically redirect the
   request unless it can be confirmed by the user, since this might
   change the conditions under which the request was issued.
</t>
</section>
</section>

<section title="Client Error 4xx" anchor="status.4xx">
<t>
   The 4xx class of status code is intended for cases in which the
   client seems to have erred. Except when responding to a HEAD request,
   the server &SHOULD; include a representation containing an explanation of the
   error situation, and whether it is a temporary or permanent
   condition. These status codes are applicable to any request method.
   User agents &SHOULD; display any included representation to the user.
</t>
<t>
   If the client is sending data, a server implementation using TCP
   &SHOULD; be careful to ensure that the client acknowledges receipt of
   the packet(s) containing the response, before the server closes the
   input connection. If the client continues sending data to the server
   after the close, the server's TCP stack will send a reset packet to
   the client, which might erase the client's unacknowledged input buffers
   before they can be read and interpreted by the HTTP application.
</t>

<section title="400 Bad Request" anchor="status.400">
  <iref primary="true" item="400 Bad Request (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="400 Bad Request" x:for-anchor=""/>
<t>
   The server cannot or will not process the request, due to a client error (e.g.,
   malformed syntax).</t>
</section>

<section title="401 Unauthorized" anchor="status.401">
  <iref primary="true" item="401 Unauthorized (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="401 Unauthorized" x:for-anchor=""/>
  <rdf:Description>
    <redirects-to xmlns="urn:ietf:id:draft-ietf-httpbis-p2-semantics#">Part7</redirects-to>
  </rdf:Description>
<t>
   The request requires user authentication (see &status-401;).
</t>
</section>

<section title="402 Payment Required" anchor="status.402">
  <iref primary="true" item="402 Payment Required (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="402 Payment Required" x:for-anchor=""/>
<t>
   This code is reserved for future use.
</t>
</section>

<section title="403 Forbidden" anchor="status.403">
  <iref primary="true" item="403 Forbidden (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="403 Forbidden" x:for-anchor=""/>
<t>
   The server understood the request, but refuses to authorize it. Providing
   different user authentication credentials might be successful, but any
   credentials that were provided in the request are insufficient. The request
   &SHOULD-NOT; be repeated with the same credentials.
</t>
<t>
   If the request method was not HEAD and the server wishes to make
   public why the request has not been fulfilled, it &SHOULD; describe the
   reason for the refusal in the representation.  If the server does not wish to
   make this information available to the client, the status code 404
   (Not Found) &MAY; be used instead.
</t>
</section>

<section title="404 Not Found" anchor="status.404">
  <iref primary="true" item="404 Not Found (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="404 Not Found" x:for-anchor=""/>
<t>
   The server has not found anything matching the effective request URI. No
   indication is given of whether the condition is temporary or
   permanent. The 410 (Gone) status code &SHOULD; be used if the server
   knows, through some internally configurable mechanism, that an old
   resource is permanently unavailable and has no forwarding address.
   This status code is commonly used when the server does not wish to
   reveal exactly why the request has been refused, or when no other
   response is applicable.
</t>
</section>

<section title="405 Method Not Allowed" anchor="status.405">
  <iref primary="true" item="405 Method Not Allowed (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="405 Method Not Allowed" x:for-anchor=""/>
<t>
   The method specified in the Request-Line is not allowed for the target
   resource. The response &MUST; include an Allow header field containing a
   list of valid methods for the requested resource.
</t>
</section>

<section title="406 Not Acceptable" anchor="status.406">
  <iref primary="true" item="406 Not Acceptable (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="406 Not Acceptable" x:for-anchor=""/>
<t>
   The resource identified by the request is only capable of generating
   response representations which have content characteristics not acceptable
   according to the Accept and Accept-* header fields sent in the request
   (see &p3-header-fields;).
</t>
<t>
   Unless it was a HEAD request, the response &SHOULD; include a representation
   containing a list of available representation characteristics and location(s)
   from which the user or user agent can choose the one most
   appropriate. The data format is specified by the media type given
   in the Content-Type header field. Depending upon the format and the
   capabilities of the user agent, selection of the most appropriate
   choice &MAY; be performed automatically. However, this specification
   does not define any standard for such automatic selection.
</t>
<x:note>
  <t>
    <x:h>Note:</x:h> HTTP/1.1 servers are allowed to return responses which are
    not acceptable according to the accept header fields sent in the
    request. In some cases, this might even be preferable to sending a
    406 response. User agents are encouraged to inspect the header fields of
    an incoming response to determine if it is acceptable.
  </t>
</x:note>
<t>
   If the response could be unacceptable, a user agent &SHOULD;
   temporarily stop receipt of more data and query the user for a
   decision on further actions.
</t>
</section>

<section title="407 Proxy Authentication Required" anchor="status.407">
  <iref primary="true" item="407 Proxy Authentication Required (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="407 Proxy Authentication Required" x:for-anchor=""/>
<t>
   This code is similar to 401 (Unauthorized), but indicates that the
   client must first authenticate itself with the proxy (see &status-407;).
</t>
</section>

<section title="408 Request Timeout" anchor="status.408">
  <iref primary="true" item="408 Request Timeout (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="408 Request Timeout" x:for-anchor=""/>
<t>
   The client did not produce a request within the time that the server
   was prepared to wait. The client &MAY; repeat the request without
   modifications at any later time.
</t>
</section>

<section title="409 Conflict" anchor="status.409">
  <iref primary="true" item="409 Conflict (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="409 Conflict" x:for-anchor=""/>
<t>
   The request could not be completed due to a conflict with the current
   state of the resource. This code is only allowed in situations where
   it is expected that the user might be able to resolve the conflict
   and resubmit the request. The response body &SHOULD; include enough
   information for the user to recognize the source of the conflict.
   Ideally, the response representation would include enough information for the
   user or user agent to fix the problem; however, that might not be
   possible and is not required.
</t>
<t>
   Conflicts are most likely to occur in response to a PUT request. For
   example, if versioning were being used and the representation being PUT
   included changes to a resource which conflict with those made by an
   earlier (third-party) request, the server might use the 409 response
   to indicate that it can't complete the request. In this case, the
   response representation would likely contain a list of the differences
   between the two versions in a format defined by the response
   Content-Type.
</t>
</section>

<section title="410 Gone" anchor="status.410">
  <iref primary="true" item="410 Gone (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="410 Gone" x:for-anchor=""/>
<t>
   The target resource is no longer available at the server and no
   forwarding address is known. This condition is expected to be
   considered permanent. Clients with link editing capabilities &SHOULD;
   delete references to the effective request URI after user approval. If the
   server does not know, or has no facility to determine, whether or not
   the condition is permanent, the status code 404 (Not Found) &SHOULD; be
   used instead.
</t>
<t>
   The 410 response is primarily intended to assist the task of web
   maintenance by notifying the recipient that the resource is
   intentionally unavailable and that the server owners desire that
   remote links to that resource be removed. Such an event is common for
   limited-time, promotional services and for resources belonging to
   individuals no longer working at the server's site. It is not
   necessary to mark all permanently unavailable resources as "gone" or
   to keep the mark for any length of time &mdash; that is left to the
   discretion of the server owner.
</t>
<t>
   Caches &MAY; use a heuristic (see &p6-heuristic;) to determine freshness 
   for 410 responses.
</t>

</section>

<section title="411 Length Required" anchor="status.411">
  <iref primary="true" item="411 Length Required (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="411 Length Required" x:for-anchor=""/>
<t>
   The server refuses to accept the request without a defined Content-Length.
   The client &MAY; repeat the request if it adds a valid
   Content-Length header field containing the length of the message-body
   in the request message.
</t>
</section>

<section title="412 Precondition Failed" anchor="status.412">
  <iref primary="true" item="412 Precondition Failed (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="412 Precondition Failed" x:for-anchor=""/>
  <rdf:Description>
    <redirects-to xmlns="urn:ietf:id:draft-ietf-httpbis-p2-semantics#">Part4</redirects-to>
  </rdf:Description>
<t>
   The precondition given in one or more of the header fields
   evaluated to false when it was tested on the server, as defined in
   &status-412;.
</t>
</section>

<section title="413 Request Representation Too Large" anchor="status.413">
  <iref primary="true" item="413 Request Representation Too Large (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="413 Request Representation Too Large" x:for-anchor=""/>
<t>
   The server is refusing to process a request because the request
   representation is larger than the server is willing or able to process. The
   server &MAY; close the connection to prevent the client from continuing
   the request.
</t>
<t>
   If the condition is temporary, the server &SHOULD; include a Retry-After
   header field to indicate that it is temporary and after what
   time the client &MAY; try again.
</t>
</section>

<section title="414 URI Too Long" anchor="status.414">
  <iref primary="true" item="414 URI Too Long (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="414 URI Too Long" x:for-anchor=""/>
<t>
   The server is refusing to service the request because the effective request URI
   is longer than the server is willing to interpret. This rare
   condition is only likely to occur when a client has improperly
   converted a POST request to a GET request with long query
   information, when the client has descended into a URI "black hole" of
   redirection (e.g., a redirected URI prefix that points to a suffix of
   itself), or when the server is under attack by a client attempting to
   exploit security holes present in some servers using fixed-length
   buffers for reading or manipulating the effective request URI.
</t>
</section>

<section title="415 Unsupported Media Type" anchor="status.415">
  <iref primary="true" item="415 Unsupported Media Type (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="415 Unsupported Media Type" x:for-anchor=""/>
<t>
   The server is refusing to service the request because the request
   payload is in a format not supported by this request method on the
   target resource.
</t>
</section>

<section title="416 Requested Range Not Satisfiable" anchor="status.416">
  <iref primary="true" item="416 Requested Range Not Satisfiable (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="416 Requested Range Not Satisfiable" x:for-anchor=""/>
  <rdf:Description>
    <redirects-to xmlns="urn:ietf:id:draft-ietf-httpbis-p2-semantics#">Part5</redirects-to>
  </rdf:Description>
<t>
   The request included a Range header field (&header-range;) and none of
   the range-specifier values in this field overlap the current extent
   of the selected resource. See &status-416;.
</t>
</section>

<section title="417 Expectation Failed" anchor="status.417">
  <iref primary="true" item="417 Expectation Failed (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="417 Expectation Failed" x:for-anchor=""/>
<t>
   The expectation given in an Expect header field (see <xref target="header.expect"/>)
   could not be met by this server, or, if the server is a proxy,
   the server has unambiguous evidence that the request could not be met
   by the next-hop server.
</t>
</section>

<section title="426 Upgrade Required" anchor="status.426">
  <iref primary="true" item="426 Upgrade Required (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="426 Upgrade Required" x:for-anchor=""/>
<t>
   The request can not be completed without a prior protocol upgrade. This
   response &MUST; include an Upgrade header field (&header-upgrade;)
   specifying the required protocols.
</t>
<figure>
<preamble>Example:</preamble>
<artwork type="message/http; msgtype=&#34;request&#34;" x:indent-with="  ">
HTTP/1.1 426 Upgrade Required
Upgrade: HTTP/2.0
Connection: Upgrade

</artwork></figure>
<t>
   The server &SHOULD; include a message body in the 426 response which
   indicates in human readable form the reason for the error and describes any
   alternative courses which may be available to the user.
</t>
</section>
</section>

<section title="Server Error 5xx" anchor="status.5xx">
<t>
   Response status codes beginning with the digit "5" indicate cases in
   which the server is aware that it has erred or is incapable of
   performing the request. Except when responding to a HEAD request, the
   server &SHOULD; include a representation containing an explanation of the
   error situation, and whether it is a temporary or permanent
   condition. User agents &SHOULD; display any included representation to the
   user. These response codes are applicable to any request method.
</t>

<section title="500 Internal Server Error" anchor="status.500">
  <iref primary="true" item="500 Internal Server Error (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="500 Internal Server Error" x:for-anchor=""/>
<t>
   The server encountered an unexpected condition which prevented it
   from fulfilling the request.
</t>
</section>

<section title="501 Not Implemented" anchor="status.501">
  <iref primary="true" item="501 Not Implemented (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="501 Not Implemented" x:for-anchor=""/>
<t>
   The server does not support the functionality required to fulfill the
   request. This is the appropriate response when the server does not
   recognize the request method and is not capable of supporting it for
   any resource.
</t>
</section>

<section title="502 Bad Gateway" anchor="status.502">
  <iref primary="true" item="502 Bad Gateway (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="502 Bad Gateway" x:for-anchor=""/>
<t>
   The server, while acting as a gateway or proxy, received an invalid
   response from the upstream server it accessed in attempting to
   fulfill the request.
</t>
</section>

<section title="503 Service Unavailable" anchor="status.503">
  <iref primary="true" item="503 Service Unavailable (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="503 Service Unavailable" x:for-anchor=""/>
<t>
   The server is currently unable or unwilling to handle the request due to 
   reasons such as temporary overloading, maintenance of the server, or rate
   limiting of the client.
</t>
<t>
   The implication is that this is a temporary condition which will be
   alleviated after some delay. If known, the length of the delay &MAY; be
   indicated in a Retry-After header field (<xref target="header.retry-after"/>).
   If no Retry-After is given, the client &SHOULD; handle the response as it
   would for a 500 response.
</t>
<x:note>
  <t>
    <x:h>Note:</x:h> The existence of the 503 status code does not imply that a
    server must use it when becoming overloaded. Some servers might wish
    to simply refuse the connection.
  </t>
</x:note>
</section>

<section title="504 Gateway Timeout" anchor="status.504">
  <iref primary="true" item="504 Gateway Timeout (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="504 Gateway Timeout" x:for-anchor=""/>
<t>
   The server, while acting as a gateway or proxy, did not receive a
   timely response from the upstream server specified by the URI (e.g.,
   HTTP, FTP, LDAP) or some other auxiliary server (e.g., DNS) it needed
   to access in attempting to complete the request.
</t>
<x:note>
  <t>
    <x:h>Note</x:h> to implementors: some deployed proxies are known to
    return 400 or 500 when DNS lookups time out.
  </t>
</x:note>
</section>

<section title="505 HTTP Version Not Supported" anchor="status.505">
  <iref primary="true" item="505 HTTP Version Not Supported (status code)" x:for-anchor=""/>
  <iref primary="true" item="Status Codes" subitem="505 HTTP Version Not Supported" x:for-anchor=""/>
<t>
   The server does not support, or refuses to support, the protocol
   version that was used in the request message. The server is
   indicating that it is unable or unwilling to complete the request
   using the same major version as the client, as described in &http-version;,
   other than with this error message. The response &SHOULD; contain
   a representation describing why that version is not supported and what other
   protocols are supported by that server.
</t>

</section>
</section>
</section>


<section title="Date/Time Formats" anchor="http.date">
  <x:anchor-alias value="HTTP-date"/>
<t>
   HTTP applications have historically allowed three different formats
   for date/time stamps. However, the preferred format is a fixed-length subset
   of that defined by <xref target="RFC1123"/>:
</t>
<figure><artwork type="example" x:indent-with="  ">
Sun, 06 Nov 1994 08:49:37 GMT  ; RFC 1123
</artwork></figure>
<t>
   The other formats are described here only for compatibility with obsolete
   implementations.
</t>
<figure><artwork type="example" x:indent-with="  ">
Sunday, 06-Nov-94 08:49:37 GMT ; obsolete RFC 850 format
Sun Nov  6 08:49:37 1994       ; ANSI C's asctime() format
</artwork></figure>
<t>
   HTTP/1.1 clients and servers that parse a date value &MUST; accept
   all three formats (for compatibility with HTTP/1.0), though they &MUST;
   only generate the RFC 1123 format for representing HTTP-date values
   in header fields.
</t>
<t>
   All HTTP date/time stamps &MUST; be represented in Greenwich Mean Time
   (GMT), without exception. For the purposes of HTTP, GMT is exactly
   equal to UTC (Coordinated Universal Time). This is indicated in the
   first two formats by the inclusion of "GMT" as the three-letter
   abbreviation for time zone, and &MUST; be assumed when reading the
   asctime format. HTTP-date is case sensitive and &MUST-NOT; include
   additional whitespace beyond that specifically included as SP in the
   grammar.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="HTTP-date"/>
  <x:ref>HTTP-date</x:ref>    = <x:ref>rfc1123-date</x:ref> / <x:ref>obs-date</x:ref>
</artwork></figure>
<t anchor="preferred.date.format">
  <x:anchor-alias value="rfc1123-date"/>
  <x:anchor-alias value="time-of-day"/>
  <x:anchor-alias value="hour"/>
  <x:anchor-alias value="minute"/>
  <x:anchor-alias value="second"/>
  <x:anchor-alias value="day-name"/>
  <x:anchor-alias value="day"/>
  <x:anchor-alias value="month"/>
  <x:anchor-alias value="year"/>
  <x:anchor-alias value="GMT"/>
  Preferred format:
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="rfc1123-date"/><iref primary="true" item="Grammar" subitem="date1"/><iref primary="true" item="Grammar" subitem="time-of-day"/><iref primary="true" item="Grammar" subitem="hour"/><iref primary="true" item="Grammar" subitem="minute"/><iref primary="true" item="Grammar" subitem="second"/><iref primary="true" item="Grammar" subitem="day-name"/><iref primary="true" item="Grammar" subitem="day-name-l"/><iref primary="true" item="Grammar" subitem="day"/><iref primary="true" item="Grammar" subitem="month"/><iref primary="true" item="Grammar" subitem="year"/><iref primary="true" item="Grammar" subitem="GMT"/>
  <x:ref>rfc1123-date</x:ref> = <x:ref>day-name</x:ref> "," <x:ref>SP</x:ref> date1 <x:ref>SP</x:ref> <x:ref>time-of-day</x:ref> <x:ref>SP</x:ref> <x:ref>GMT</x:ref>
  ; fixed length subset of the format defined in
  ; <xref target="RFC1123" x:fmt="of" x:sec="5.2.14"/>
  
  <x:ref>day-name</x:ref>     = <x:abnf-char-sequence>"Mon"</x:abnf-char-sequence> ; "Mon", case-sensitive
               / <x:abnf-char-sequence>"Tue"</x:abnf-char-sequence> ; "Tue", case-sensitive
               / <x:abnf-char-sequence>"Wed"</x:abnf-char-sequence> ; "Wed", case-sensitive
               / <x:abnf-char-sequence>"Thu"</x:abnf-char-sequence> ; "Thu", case-sensitive
               / <x:abnf-char-sequence>"Fri"</x:abnf-char-sequence> ; "Fri", case-sensitive
               / <x:abnf-char-sequence>"Sat"</x:abnf-char-sequence> ; "Sat", case-sensitive
               / <x:abnf-char-sequence>"Sun"</x:abnf-char-sequence> ; "Sun", case-sensitive
               
  <x:ref>date1</x:ref>        = <x:ref>day</x:ref> <x:ref>SP</x:ref> <x:ref>month</x:ref> <x:ref>SP</x:ref> <x:ref>year</x:ref>
               ; e.g., 02 Jun 1982

  <x:ref>day</x:ref>          = 2<x:ref>DIGIT</x:ref>
  <x:ref>month</x:ref>        = <x:abnf-char-sequence>"Jan"</x:abnf-char-sequence> ; "Jan", case-sensitive
               / <x:abnf-char-sequence>"Feb"</x:abnf-char-sequence> ; "Feb", case-sensitive
               / <x:abnf-char-sequence>"Mar"</x:abnf-char-sequence> ; "Mar", case-sensitive
               / <x:abnf-char-sequence>"Apr"</x:abnf-char-sequence> ; "Apr", case-sensitive
               / <x:abnf-char-sequence>"May"</x:abnf-char-sequence> ; "May", case-sensitive
               / <x:abnf-char-sequence>"Jun"</x:abnf-char-sequence> ; "Jun", case-sensitive
               / <x:abnf-char-sequence>"Jul"</x:abnf-char-sequence> ; "Jul", case-sensitive
               / <x:abnf-char-sequence>"Aug"</x:abnf-char-sequence> ; "Aug", case-sensitive
               / <x:abnf-char-sequence>"Sep"</x:abnf-char-sequence> ; "Sep", case-sensitive
               / <x:abnf-char-sequence>"Oct"</x:abnf-char-sequence> ; "Oct", case-sensitive
               / <x:abnf-char-sequence>"Nov"</x:abnf-char-sequence> ; "Nov", case-sensitive
               / <x:abnf-char-sequence>"Dec"</x:abnf-char-sequence> ; "Dec", case-sensitive
  <x:ref>year</x:ref>         = 4<x:ref>DIGIT</x:ref>

  <x:ref>GMT</x:ref>   = <x:abnf-char-sequence>"GMT"</x:abnf-char-sequence> ; "GMT", case-sensitive

  <x:ref>time-of-day</x:ref>  = <x:ref>hour</x:ref> ":" <x:ref>minute</x:ref> ":" <x:ref>second</x:ref>
                 ; 00:00:00 - 23:59:59
                 
  <x:ref>hour</x:ref>         = 2<x:ref>DIGIT</x:ref>               
  <x:ref>minute</x:ref>       = 2<x:ref>DIGIT</x:ref>               
  <x:ref>second</x:ref>       = 2<x:ref>DIGIT</x:ref>               
</artwork></figure>
<t>
  The semantics of <x:ref>day-name</x:ref>, <x:ref>day</x:ref>,
  <x:ref>month</x:ref>, <x:ref>year</x:ref>, and <x:ref>time-of-day</x:ref> are the
  same as those defined for the RFC 5322 constructs
  with the corresponding name (<xref target="RFC5322" x:fmt="," x:sec="3.3"/>).
</t>
<t anchor="obsolete.date.formats">
  <x:anchor-alias value="obs-date"/>
  <x:anchor-alias value="rfc850-date"/>
  <x:anchor-alias value="asctime-date"/>
  <x:anchor-alias value="date1"/>
  <x:anchor-alias value="date2"/>
  <x:anchor-alias value="date3"/>
  <x:anchor-alias value="rfc1123-date"/>
  <x:anchor-alias value="day-name-l"/>
  Obsolete formats:
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="obs-date"/>
  <x:ref>obs-date</x:ref>     = <x:ref>rfc850-date</x:ref> / <x:ref>asctime-date</x:ref> 
</artwork></figure>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="rfc850-date"/>
  <x:ref>rfc850-date</x:ref>  = <x:ref>day-name-l</x:ref> "," <x:ref>SP</x:ref> <x:ref>date2</x:ref> <x:ref>SP</x:ref> <x:ref>time-of-day</x:ref> <x:ref>SP</x:ref> <x:ref>GMT</x:ref>
  <x:ref>date2</x:ref>        = <x:ref>day</x:ref> "-" <x:ref>month</x:ref> "-" 2<x:ref>DIGIT</x:ref>
                 ; day-month-year (e.g., 02-Jun-82)

  <x:ref>day-name-l</x:ref>   = <x:abnf-char-sequence>"Monday"</x:abnf-char-sequence> ; "Monday", case-sensitive
         / <x:abnf-char-sequence>"Tuesday"</x:abnf-char-sequence> ; "Tuesday", case-sensitive
         / <x:abnf-char-sequence>"Wednesday"</x:abnf-char-sequence> ; "Wednesday", case-sensitive
         / <x:abnf-char-sequence>"Thursday"</x:abnf-char-sequence> ; "Thursday", case-sensitive
         / <x:abnf-char-sequence>"Friday"</x:abnf-char-sequence> ; "Friday", case-sensitive
         / <x:abnf-char-sequence>"Saturday"</x:abnf-char-sequence> ; "Saturday", case-sensitive
         / <x:abnf-char-sequence>"Sunday"</x:abnf-char-sequence> ; "Sunday", case-sensitive
</artwork></figure>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="asctime-date"/>
  <x:ref>asctime-date</x:ref> = <x:ref>day-name</x:ref> <x:ref>SP</x:ref> <x:ref>date3</x:ref> <x:ref>SP</x:ref> <x:ref>time-of-day</x:ref> <x:ref>SP</x:ref> <x:ref>year</x:ref>
  <x:ref>date3</x:ref>        = <x:ref>month</x:ref> <x:ref>SP</x:ref> ( 2<x:ref>DIGIT</x:ref> / ( <x:ref>SP</x:ref> 1<x:ref>DIGIT</x:ref> ))
                 ; month day (e.g., Jun  2)
</artwork></figure>
<x:note>
  <t>
    <x:h>Note:</x:h> Recipients of date values are encouraged to be robust in
    accepting date values that might have been sent by non-HTTP
    applications, as is sometimes the case when retrieving or posting
    messages via proxies/gateways to SMTP or NNTP.
  </t>
</x:note>
<x:note>
  <t>
    <x:h>Note:</x:h> HTTP requirements for the date/time stamp format apply only
    to their usage within the protocol stream. Clients and servers are
    not required to use these formats for user presentation, request
    logging, etc.
  </t>
</x:note>
</section>


<section title="Header Field Definitions" anchor="header.field.definitions">
<t>
   This section defines the syntax and semantics of HTTP/1.1 header fields
   related to request and response semantics.
</t>

<section title="Allow" anchor="header.allow">
  <iref primary="true" item="Allow header field" x:for-anchor=""/>
  <iref primary="true" item="Header Fields" subitem="Allow" x:for-anchor=""/>
  <x:anchor-alias value="Allow"/>
<t>
   The "Allow" header field lists the set of methods advertised as
   supported by the target resource. The purpose of this field is strictly to
   inform the recipient of valid request methods associated with the resource.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Allow"/>
  <x:ref>Allow</x:ref> = #<x:ref>Method</x:ref>
</artwork></figure>
<t>
   Example of use:
</t>
<figure><artwork type="example">
  Allow: GET, HEAD, PUT
</artwork></figure>
<t>
   The actual set of allowed methods is defined by the origin server at the
   time of each request.
</t>
<t>
   A proxy &MUST-NOT; modify the Allow header field &mdash; it does not need to
   understand all the methods specified in order to handle them according to
   the generic message handling rules.
</t>
</section>

<section title="Date" anchor="header.date">
  <iref primary="true" item="Date header field" x:for-anchor=""/>
  <iref primary="true" item="Header Fields" subitem="Date" x:for-anchor=""/>
  <x:anchor-alias value="Date"/>
<t>
   The "Date" header field represents the date and time at which
   the message was originated, having the same semantics as the Origination
   Date Field (orig-date) defined in <xref target="RFC5322" x:fmt="of" x:sec="3.6.1"/>.
   The field value is an HTTP-date, as defined in <xref target="http.date"/>;
   it &MUST; be sent in rfc1123-date format.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Date"/>
  <x:ref>Date</x:ref> = <x:ref>HTTP-date</x:ref>
</artwork></figure>
<t>
   An example is
</t>
<figure><artwork type="example">
  Date: Tue, 15 Nov 1994 08:12:31 GMT
</artwork></figure>
<t>
   Origin servers &MUST; include a Date header field in all responses,
   except in these cases:
  <list style="numbers">
      <t>If the response status code is 100 (Continue) or 101 (Switching
         Protocols), the response &MAY; include a Date header field, at
         the server's option.</t>

      <t>If the response status code conveys a server error, e.g., 500
         (Internal Server Error) or 503 (Service Unavailable), and it is
         inconvenient or impossible to generate a valid Date.</t>

      <t>If the server does not have a clock that can provide a
         reasonable approximation of the current time, its responses
         &MUST-NOT; include a Date header field.</t>
  </list>
</t>
<t>
   A received message that does not have a Date header field &MUST; be
   assigned one by the recipient if the message will be cached by that
   recipient.
</t>
<t>
   Clients can use the Date header field as well; in order to keep request
   messages small, they are advised not to include it when it doesn't convey
   any useful information (as it is usually the case for requests that do not
   contain a payload).
</t>
<t>
   The HTTP-date sent in a Date header field &SHOULD-NOT; represent a date and
   time subsequent to the generation of the message. It &SHOULD; represent
   the best available approximation of the date and time of message
   generation, unless the implementation has no means of generating a
   reasonably accurate date and time. In theory, the date ought to
   represent the moment just before the payload is generated. In
   practice, the date can be generated at any time during the message
   origination without affecting its semantic value.
</t>
</section>

<section title="Expect" anchor="header.expect">
  <iref primary="true" item="Expect header field" x:for-anchor=""/>
  <iref primary="true" item="Header Fields" subitem="Expect" x:for-anchor=""/>
  <x:anchor-alias value="Expect"/>
  <x:anchor-alias value="expectation"/>
  <x:anchor-alias value="expectation-extension"/>
  <x:anchor-alias value="expect-params"/>
<t>
   The "Expect" header field is used to indicate that particular
   server behaviors are required by the client.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Expect"/><iref primary="true" item="Grammar" subitem="expectation"/><iref primary="true" item="Grammar" subitem="expectation-extension"/><iref primary="true" item="Grammar" subitem="expect-params"/>
  <x:ref>Expect</x:ref>       = 1#<x:ref>expectation</x:ref>
  
  <x:ref>expectation</x:ref>  = "100-continue" / <x:ref>expectation-extension</x:ref>
  <x:ref>expectation-extension</x:ref> = <x:ref>token</x:ref> [ "=" ( <x:ref>token</x:ref> / <x:ref>quoted-string</x:ref> )
                           *<x:ref>expect-params</x:ref> ]
  <x:ref>expect-params</x:ref> = ";" <x:ref>token</x:ref> [ "=" ( <x:ref>token</x:ref> / <x:ref>quoted-string</x:ref> ) ]
</artwork></figure>
<t>
   A server that does not understand or is unable to comply with any of
   the expectation values in the Expect field of a request &MUST; respond
   with appropriate error status code. The server &MUST; respond with a 417
   (Expectation Failed) status code if any of the expectations cannot be met
   or, if there are other problems with the request, some other 4xx
   status code.
</t>
<t>
   This header field is defined with extensible syntax to allow for
   future extensions. If a server receives a request containing an
   Expect field that includes an expectation-extension that it does not
   support, it &MUST; respond with a 417 (Expectation Failed) status code.
</t>
<t>
   Comparison of expectation values is case-insensitive for unquoted
   tokens (including the 100-continue token), and is case-sensitive for
   quoted-string expectation-extensions.
</t>
<t>
   The Expect mechanism is hop-by-hop: that is, an HTTP/1.1 proxy &MUST;
   return a 417 (Expectation Failed) status code if it receives a request
   with an expectation that it cannot meet. However, the Expect
   header field itself is end-to-end; it &MUST; be forwarded if the
   request is forwarded.
</t>
<t>
   Many older HTTP/1.0 and HTTP/1.1 applications do not understand the
   Expect header field.
</t>
<t>
   See &use100; for the use of the 100 (Continue) status code.
</t>
</section>

<section title="From" anchor="header.from">
  <iref primary="true" item="From header field" x:for-anchor=""/>
  <iref primary="true" item="Header Fields" subitem="From" x:for-anchor=""/>
  <x:anchor-alias value="From"/>
  <x:anchor-alias value="mailbox"/>
<t>
   The "From" header field, if given, &SHOULD; contain an Internet
   e-mail address for the human user who controls the requesting user
   agent. The address &SHOULD; be machine-usable, as defined by "mailbox"
   in <xref x:sec="3.4" x:fmt="of" target="RFC5322"/>:
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="From"/>
  <x:ref>From</x:ref>    = <x:ref>mailbox</x:ref>
  
  <x:ref>mailbox</x:ref> = &lt;mailbox, defined in <xref x:sec="3.4" x:fmt="," target="RFC5322"/>&gt;
</artwork></figure>
<t>
   An example is:
</t>
<figure><artwork type="example">
  From: webmaster@example.org
</artwork></figure>
<t>
   This header field &MAY; be used for logging purposes and as a means for
   identifying the source of invalid or unwanted requests. It &SHOULD-NOT; 
   be used as an insecure form of access protection. The interpretation
   of this field is that the request is being performed on behalf of the
   person given, who accepts responsibility for the method performed. In
   particular, robot agents &SHOULD; include this header field so that the
   person responsible for running the robot can be contacted if problems
   occur on the receiving end.
</t>
<t>
   The Internet e-mail address in this field &MAY; be separate from the
   Internet host which issued the request. For example, when a request
   is passed through a proxy the original issuer's address &SHOULD; be
   used.
</t>
<t>
   The client &SHOULD-NOT;  send the From header field without the user's
   approval, as it might conflict with the user's privacy interests or
   their site's security policy. It is strongly recommended that the
   user be able to disable, enable, and modify the value of this field
   at any time prior to a request.
</t>
</section>

<section title="Location" anchor="header.location">
  <iref primary="true" item="Location header field" x:for-anchor=""/>
  <iref primary="true" item="Header Fields" subitem="Location" x:for-anchor=""/>
  <x:anchor-alias value="Location"/>
<t>
   The "Location" header field is used to identify a newly created
   resource, or to redirect the recipient to a different location for
   completion of the request.
</t>
<t>
   For 201 (Created) responses, the Location is the URI of the new resource
   which was created by the request. For 3xx responses, the location &SHOULD;
   indicate the server's preferred URI for automatic redirection to the
   resource.
</t>
<t>
   The field value consists of a single URI-reference. When it has the form
   of a relative reference (<xref target="RFC3986" x:fmt="," x:sec="4.2"/>),
   the final value is computed by resolving it against the effective request
   URI (<xref target="RFC3986" x:fmt="," x:sec="5"/>).
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Location"/>
  <x:ref>Location</x:ref> = <x:ref>URI-reference</x:ref>
</artwork></figure>
<figure>
<preamble>Examples are:</preamble><!--DO NOT DARE changing the vertical spacing below, it's necessary this way for xml2rfc-->
<artwork type="example">
  Location: http://www.example.org/pub/WWW/People.html#tim
</artwork></figure><figure><artwork type="example">  Location: /index.html
</artwork></figure>
<t>
   There are circumstances in which a fragment identifier in a Location URI
   would not be appropriate. For instance, when it appears in a 201 Created
   response, where the Location header field specifies the URI for the entire
   created resource.
</t>
<x:note>
  <t>
    <x:h>Note:</x:h> This specification does not define precedence rules
    for the case where the original URI, as navigated to by the user
    agent, and the Location header field value both contain fragment
    identifiers. Thus be aware that including fragment identifiers might
    inconvenience anyone relying on the semantics of the original URI's
    fragment identifier.
  </t>
</x:note>
<x:note>
  <t>
    <x:h>Note:</x:h> The Content-Location header field (&header-content-location;) differs
    from Location in that the Content-Location identifies the most specific
    resource corresponding to the enclosed representation.
    It is therefore possible for a response to contain header fields for
    both Location and Content-Location.
  </t>
</x:note>
</section>

<section title="Max-Forwards" anchor="header.max-forwards">
  <iref primary="true" item="Max-Forwards header field" x:for-anchor=""/>
  <iref primary="true" item="Header Fields" subitem="Max-Forwards" x:for-anchor=""/>
  <x:anchor-alias value="Max-Forwards"/>
<t>
   The "Max-Forwards" header field provides a mechanism with the
   TRACE (<xref target="TRACE"/>) and OPTIONS (<xref target="OPTIONS"/>)
   methods to limit the number of times that the request is forwarded by
   proxies. This can be useful when the client is attempting to
   trace a request which appears to be failing or looping in mid-chain.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Max-Forwards"/>
  <x:ref>Max-Forwards</x:ref> = 1*<x:ref>DIGIT</x:ref>
</artwork></figure>
<t>
   The Max-Forwards value is a decimal integer indicating the remaining
   number of times this request message can be forwarded.
</t>
<t>
   Each recipient of a TRACE or OPTIONS request
   containing a Max-Forwards header field &MUST; check and update its
   value prior to forwarding the request. If the received value is zero
   (0), the recipient &MUST-NOT; forward the request; instead, it &MUST;
   respond as the final recipient. If the received Max-Forwards value is
   greater than zero, then the forwarded message &MUST; contain an updated
   Max-Forwards field with a value decremented by one (1).
</t>
<t>
   The Max-Forwards header field &MAY; be ignored for all other request
   methods.
</t>
</section>

<section title="Referer" anchor="header.referer">
  <iref primary="true" item="Referer header field" x:for-anchor=""/>
  <iref primary="true" item="Header Fields" subitem="Referer" x:for-anchor=""/>
  <x:anchor-alias value="Referer"/>
<t>
   The "Referer" [sic] header field allows the client to specify the
   URI of the resource from which the effective request URI was obtained (the
   "referrer", although the header field is misspelled.).
</t>
<t>
   The Referer header field allows servers to generate lists of back-links to
   resources for interest, logging, optimized caching, etc. It also allows
   obsolete or mistyped links to be traced for maintenance. Some servers use
   Referer as a means of controlling where they allow links from (so-called
   "deep linking"), but legitimate requests do not always
   contain a Referer header field.
</t>
<t>
   If the effective request URI was obtained from a source that does not have its own
   URI (e.g., input from the user keyboard), the Referer field &MUST; either be
   sent with the value "about:blank", or not be sent at all. Note that this
   requirement does not apply to sources with non-HTTP URIs (e.g., FTP).
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Referer"/>
  <x:ref>Referer</x:ref> = <x:ref>absolute-URI</x:ref> / <x:ref>partial-URI</x:ref>
</artwork></figure>
<t>
   Example:
</t>
<figure><artwork type="example">
  Referer: http://www.example.org/hypertext/Overview.html
</artwork></figure>
<t>
   If the field value is a relative URI, it &SHOULD; be interpreted
   relative to the effective request URI. The URI &MUST-NOT; include a fragment. See
   <xref target="encoding.sensitive.information.in.uris"/> for security considerations.
</t>
</section>

<section title="Retry-After" anchor="header.retry-after">
  <iref primary="true" item="Retry-After header field" x:for-anchor=""/>
  <iref primary="true" item="Header Fields" subitem="Retry-After" x:for-anchor=""/>
  <x:anchor-alias value="Retry-After"/>
<t>
   The header "Retry-After" field can be used with a 503 (Service
   Unavailable) response to indicate how long the service is expected to
   be unavailable to the requesting client. This field &MAY; also be used
   with any 3xx (Redirection) response to indicate the minimum time the
   user-agent is asked wait before issuing the redirected request.
</t>
<t>
   The value of this field can be either an HTTP-date or an integer number
   of seconds (in decimal) after the time of the response.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Retry-After"/>
  <x:ref>Retry-After</x:ref> = <x:ref>HTTP-date</x:ref> / <x:ref>delta-seconds</x:ref>
</artwork></figure>
<t anchor="rule.delta-seconds">
  <x:anchor-alias value="delta-seconds"/>
   Time spans are non-negative decimal integers, representing time in
   seconds.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="delta-seconds"/>
  <x:ref>delta-seconds</x:ref>  = 1*<x:ref>DIGIT</x:ref>
</artwork></figure>
<t>
   Two examples of its use are
</t>
<figure><artwork type="example">
  Retry-After: Fri, 31 Dec 1999 23:59:59 GMT
  Retry-After: 120
</artwork></figure>
<t>
   In the latter example, the delay is 2 minutes.
</t>
</section>

<section title="Server" anchor="header.server">
  <iref primary="true" item="Server header field" x:for-anchor=""/>
  <iref primary="true" item="Header Fields" subitem="Server" x:for-anchor=""/>
  <x:anchor-alias value="Server"/>
<t>
   The "Server" header field contains information about the
   software used by the origin server to handle the request.
</t>
<t>
   The field can contain multiple product tokens (&product-tokens;) and
   comments (&header-fields;) identifying the server and any significant
   subproducts. The product tokens are listed in order of their significance
   for identifying the application.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Server"/>
  <x:ref>Server</x:ref> = <x:ref>product</x:ref> *( <x:ref>RWS</x:ref> ( <x:ref>product</x:ref> / <x:ref>comment</x:ref> ) )
</artwork></figure>
<t>
   Example:
</t>
<figure><artwork type="example">
  Server: CERN/3.0 libwww/2.17
</artwork></figure>
<t>
   If the response is being forwarded through a proxy, the proxy
   application &MUST-NOT; modify the Server header field. Instead, it
   &MUST; include a Via field (as described in &header-via;).
</t>
<x:note>
  <t>
    <x:h>Note:</x:h> Revealing the specific software version of the server might
    allow the server machine to become more vulnerable to attacks
    against software that is known to contain security holes. Server
    implementors are encouraged to make this field a configurable
    option.
  </t>
</x:note>
</section>

<section title="User-Agent" anchor="header.user-agent">
  <iref primary="true" item="User-Agent header field" x:for-anchor=""/>
  <iref primary="true" item="Header Fields" subitem="User-Agent" x:for-anchor=""/>
  <x:anchor-alias value="User-Agent"/>
<t>
   The "User-Agent" header field contains information about the user
   agent originating the request. User agents &SHOULD; include this field with
   requests.
</t>
<t>
   Typically, it is used for statistical purposes, the tracing of protocol
   violations, and tailoring responses to avoid particular user agent
   limitations.
</t>
<t>
   The field can contain multiple product tokens (&product-tokens;)
   and comments (&header-fields;) identifying the agent and its
   significant subproducts. By convention, the product tokens are listed in
   order of their significance for identifying the application.
</t>
<t>
   Because this field is usually sent on every request a user agent makes,
   implementations are encouraged not to include needlessly fine-grained
   detail, and to limit (or even prohibit) the addition of subproducts by third
   parties. Overly long and detailed User-Agent field values make requests
   larger and can also be used to identify ("fingerprint") the user against
   their wishes.
</t>
<t>
   Likewise, implementations are encouraged not to use the product tokens of
   other implementations in order to declare compatibility with them, as this
   circumvents the purpose of the field. Finally, they are encouraged not to
   use comments to identify products; doing so makes the field value more
   difficult to parse.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="User-Agent"/>
  <x:ref>User-Agent</x:ref> = <x:ref>product</x:ref> *( <x:ref>RWS</x:ref> ( <x:ref>product</x:ref> / <x:ref>comment</x:ref> ) )
</artwork></figure>
<t>
   Example:
</t>
<figure><artwork type="example">
  User-Agent: CERN-LineMode/2.15 libwww/2.17b3
</artwork></figure>
</section>

</section>

<section title="IANA Considerations" anchor="IANA.considerations">

<section title="Method Registry" anchor="method.registration">
<t>
  The registration procedure for HTTP request methods is defined by 
  <xref target="method.registry"/> of this document.
</t>
<t>
   The HTTP Method Registry shall be created at <eref target="http://www.iana.org/assignments/http-methods"/>
   and be populated with the registrations below:
</t>
<?BEGININC p2-semantics.iana-methods ?>
<!--AUTOGENERATED FROM extract-method-defs.xslt, do not edit manually-->
<texttable align="left" suppress-title="true" anchor="iana.method.registration.table">
   <ttcol>Method</ttcol>
   <ttcol>Safe</ttcol>
   <ttcol>Reference</ttcol>
   <c>CONNECT</c>
   <c>no</c>
   <c>
      <xref target="CONNECT"/>
   </c>
   <c>DELETE</c>
   <c>no</c>
   <c>
      <xref target="DELETE"/>
   </c>
   <c>GET</c>
   <c>yes</c>
   <c>
      <xref target="GET"/>
   </c>
   <c>HEAD</c>
   <c>yes</c>
   <c>
      <xref target="HEAD"/>
   </c>
   <c>OPTIONS</c>
   <c>yes</c>
   <c>
      <xref target="OPTIONS"/>
   </c>
   <c>POST</c>
   <c>no</c>
   <c>
      <xref target="POST"/>
   </c>
   <c>PUT</c>
   <c>no</c>
   <c>
      <xref target="PUT"/>
   </c>
   <c>TRACE</c>
   <c>yes</c>
   <c>
      <xref target="TRACE"/>
   </c>
</texttable>
<!--(END)-->
<?ENDINC p2-semantics.iana-methods ?>
</section>

<section title="Status Code Registry" anchor="status.code.registration">
<t>
   The registration procedure for HTTP Status Codes &mdash; previously defined
   in <xref target="RFC2817" x:fmt="of" x:sec="7.1"/> &mdash; is now defined
   by <xref target="status.code.registry"/> of this document.
</t>
<t>
   The HTTP Status Code Registry located at <eref target="http://www.iana.org/assignments/http-status-codes"/>
   shall be updated with the registrations below:
</t>
<?BEGININC p2-semantics.iana-status-codes ?>
<!--AUTOGENERATED FROM extract-status-code-defs.xslt, do not edit manually-->
<texttable align="left" suppress-title="true" anchor="iana.status.code.registration.table">
   <ttcol>Value</ttcol>
   <ttcol>Description</ttcol>
   <ttcol>Reference</ttcol>
   <c>100</c>
   <c>Continue</c>
   <c>
      <xref target="status.100"/>
   </c>
   <c>101</c>
   <c>Switching Protocols</c>
   <c>
      <xref target="status.101"/>
   </c>
   <c>200</c>
   <c>OK</c>
   <c>
      <xref target="status.200"/>
   </c>
   <c>201</c>
   <c>Created</c>
   <c>
      <xref target="status.201"/>
   </c>
   <c>202</c>
   <c>Accepted</c>
   <c>
      <xref target="status.202"/>
   </c>
   <c>203</c>
   <c>Non-Authoritative Information</c>
   <c>
      <xref target="status.203"/>
   </c>
   <c>204</c>
   <c>No Content</c>
   <c>
      <xref target="status.204"/>
   </c>
   <c>205</c>
   <c>Reset Content</c>
   <c>
      <xref target="status.205"/>
   </c>
   <c>300</c>
   <c>Multiple Choices</c>
   <c>
      <xref target="status.300"/>
   </c>
   <c>301</c>
   <c>Moved Permanently</c>
   <c>
      <xref target="status.301"/>
   </c>
   <c>302</c>
   <c>Found</c>
   <c>
      <xref target="status.302"/>
   </c>
   <c>303</c>
   <c>See Other</c>
   <c>
      <xref target="status.303"/>
   </c>
   <c>305</c>
   <c>Use Proxy</c>
   <c>
      <xref target="status.305"/>
   </c>
   <c>306</c>
   <c>(Unused)</c>
   <c>
      <xref target="status.306"/>
   </c>
   <c>307</c>
   <c>Temporary Redirect</c>
   <c>
      <xref target="status.307"/>
   </c>
   <c>400</c>
   <c>Bad Request</c>
   <c>
      <xref target="status.400"/>
   </c>
   <c>402</c>
   <c>Payment Required</c>
   <c>
      <xref target="status.402"/>
   </c>
   <c>403</c>
   <c>Forbidden</c>
   <c>
      <xref target="status.403"/>
   </c>
   <c>404</c>
   <c>Not Found</c>
   <c>
      <xref target="status.404"/>
   </c>
   <c>405</c>
   <c>Method Not Allowed</c>
   <c>
      <xref target="status.405"/>
   </c>
   <c>406</c>
   <c>Not Acceptable</c>
   <c>
      <xref target="status.406"/>
   </c>
   <c>407</c>
   <c>Proxy Authentication Required</c>
   <c>
      <xref target="status.407"/>
   </c>
   <c>408</c>
   <c>Request Timeout</c>
   <c>
      <xref target="status.408"/>
   </c>
   <c>409</c>
   <c>Conflict</c>
   <c>
      <xref target="status.409"/>
   </c>
   <c>410</c>
   <c>Gone</c>
   <c>
      <xref target="status.410"/>
   </c>
   <c>411</c>
   <c>Length Required</c>
   <c>
      <xref target="status.411"/>
   </c>
   <c>413</c>
   <c>Request Representation Too Large</c>
   <c>
      <xref target="status.413"/>
   </c>
   <c>414</c>
   <c>URI Too Long</c>
   <c>
      <xref target="status.414"/>
   </c>
   <c>415</c>
   <c>Unsupported Media Type</c>
   <c>
      <xref target="status.415"/>
   </c>
   <c>417</c>
   <c>Expectation Failed</c>
   <c>
      <xref target="status.417"/>
   </c>
   <c>426</c>
   <c>Upgrade Required</c>
   <c>
      <xref target="status.426"/>
   </c>
   <c>500</c>
   <c>Internal Server Error</c>
   <c>
      <xref target="status.500"/>
   </c>
   <c>501</c>
   <c>Not Implemented</c>
   <c>
      <xref target="status.501"/>
   </c>
   <c>502</c>
   <c>Bad Gateway</c>
   <c>
      <xref target="status.502"/>
   </c>
   <c>503</c>
   <c>Service Unavailable</c>
   <c>
      <xref target="status.503"/>
   </c>
   <c>504</c>
   <c>Gateway Timeout</c>
   <c>
      <xref target="status.504"/>
   </c>
   <c>505</c>
   <c>HTTP Version Not Supported</c>
   <c>
      <xref target="status.505"/>
   </c>
</texttable>
<!--(END)-->
<?ENDINC p2-semantics.iana-status-codes ?>
</section>
<section title="Header Field Registration" anchor="header.field.registration">
<t>
   The Message Header Field Registry located at <eref target="http://www.iana.org/assignments/message-headers/message-header-index.html"/> shall be updated
   with the permanent registrations below (see <xref target="RFC3864"/>):
</t>
<?BEGININC p2-semantics.iana-headers ?>
<!--AUTOGENERATED FROM extract-header-defs.xslt, do not edit manually-->
<texttable align="left" suppress-title="true" anchor="iana.header.registration.table">
   <ttcol>Header Field Name</ttcol>
   <ttcol>Protocol</ttcol>
   <ttcol>Status</ttcol>
   <ttcol>Reference</ttcol>

   <c>Allow</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.allow"/>
   </c>
   <c>Date</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.date"/>
   </c>
   <c>Expect</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.expect"/>
   </c>
   <c>From</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.from"/>
   </c>
   <c>Location</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.location"/>
   </c>
   <c>Max-Forwards</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.max-forwards"/>
   </c>
   <c>Referer</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.referer"/>
   </c>
   <c>Retry-After</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.retry-after"/>
   </c>
   <c>Server</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.server"/>
   </c>
   <c>User-Agent</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.user-agent"/>
   </c>
</texttable>
<!--(END)-->
<?ENDINC p2-semantics.iana-headers ?>
<t>
   The change controller is: "IETF (iesg@ietf.org) - Internet Engineering Task Force".
</t>
</section>
</section>

<section title="Security Considerations" anchor="security.considerations">
<t>
   This section is meant to inform application developers, information
   providers, and users of the security limitations in HTTP/1.1 as
   described by this document. The discussion does not include
   definitive solutions to the problems revealed, though it does make
   some suggestions for reducing security risks.
</t>

<section title="Transfer of Sensitive Information" anchor="security.sensitive">
<t>
   Like any generic data transfer protocol, HTTP cannot regulate the
   content of the data that is transferred, nor is there any a priori
   method of determining the sensitivity of any particular piece of
   information within the context of any given request. Therefore,
   applications &SHOULD; supply as much control over this information as
   possible to the provider of that information. Four header fields are
   worth special mention in this context: Server, Via, Referer and From.
</t>
<t>
   Revealing the specific software version of the server might allow the
   server machine to become more vulnerable to attacks against software
   that is known to contain security holes. Implementors &SHOULD; make the
   Server header field a configurable option.
</t>
<t>
   Proxies which serve as a portal through a network firewall &SHOULD;
   take special precautions regarding the transfer of header information
   that identifies the hosts behind the firewall. In particular, they
   &SHOULD; remove, or replace with sanitized versions, any Via fields
   generated behind the firewall.
</t>
<t>
   The Referer header field allows reading patterns to be studied and reverse
   links drawn. Although it can be very useful, its power can be abused
   if user details are not separated from the information contained in
   the Referer. Even when the personal information has been removed, the
   Referer header field might indicate a private document's URI whose
   publication would be inappropriate.
</t>
<t>
   The information sent in the From field might conflict with the user's
   privacy interests or their site's security policy, and hence it
   &SHOULD-NOT;  be transmitted without the user being able to disable,
   enable, and modify the contents of the field. The user &MUST; be able
   to set the contents of this field within a user preference or
   application defaults configuration.
</t>
<t>
   We suggest, though do not require, that a convenient toggle interface
   be provided for the user to enable or disable the sending of From and
   Referer information.
</t>
<t>
   The User-Agent (<xref target="header.user-agent"/>) or Server (<xref
   target="header.server"/>) header fields can sometimes be used to determine
   that a specific client or server have a particular security hole which might
   be exploited. Unfortunately, this same information is often used for other
   valuable purposes for which HTTP currently has no better mechanism.
</t>
<t>
   Furthermore, the User-Agent header field may contain enough entropy to be
   used, possibly in conjunction with other material, to uniquely identify the
   user.
</t>
<t>
   Some request methods, like TRACE (<xref target="TRACE"/>), expose information
   that was sent in request header fields within the body of their response. 
   Clients &SHOULD; be careful with sensitive information, like Cookies, 
   Authorization credentials, and other header fields that might be used to 
   collect data from the client.
</t> 
</section>

<section title="Encoding Sensitive Information in URIs" anchor="encoding.sensitive.information.in.uris">
<t>
   Because the source of a link might be private information or might
   reveal an otherwise private information source, it is strongly
   recommended that the user be able to select whether or not the
   Referer field is sent. For example, a browser client could have a
   toggle switch for browsing openly/anonymously, which would
   respectively enable/disable the sending of Referer and From
   information.
</t>
<t>
   Clients &SHOULD-NOT; include a Referer header field in a (non-secure)
   HTTP request if the referring page was transferred with a secure
   protocol.
</t>
<t>
   Authors of services &SHOULD-NOT; use GET-based forms for the submission of
   sensitive data because that data will be placed in the request-target. Many
   existing servers, proxies, and user agents log or display the request-target
   in places where it might be visible to third parties. Such services can
   use POST-based form submission instead.
</t>
</section>

<section title="Location Headers and Spoofing" anchor="location.spoofing">
<t>
   If a single server supports multiple organizations that do not trust
   one another, then it &MUST; check the values of Location and Content-Location
   header fields in responses that are generated under control of
   said organizations to make sure that they do not attempt to
   invalidate resources over which they have no authority.
</t>
</section>

<section title="Security Considerations for CONNECT">
<t>
   Since tunneled data is opaque to the proxy, there are additional 
   risks to tunneling to other well-known or reserved ports. 
   A HTTP client CONNECTing to port 25 could relay spam
   via SMTP, for example. As such, proxies &SHOULD; restrict CONNECT 
   access to a small number of known ports.
</t>
</section>

</section>

<section title="Acknowledgments" anchor="acks">
<t>
  See &acks;.
</t>
</section>
</middle>
<back>

<references title="Normative References">

<reference anchor="Part1">
  <front>
    <title abbrev="HTTP/1.1">HTTP/1.1, part 1: URIs, Connections, and Message Parsing</title>
    <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
      <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
      <address><email>fielding@gbiv.com</email></address>
    </author>
    <author initials="J." surname="Gettys" fullname="Jim Gettys">
      <organization abbrev="Alcatel-Lucent">Alcatel-Lucent Bell Labs</organization>
      <address><email>jg@freedesktop.org</email></address>
    </author>
    <author initials="J." surname="Mogul" fullname="Jeffrey C. Mogul">
      <organization abbrev="HP">Hewlett-Packard Company</organization>
      <address><email>JeffMogul@acm.org</email></address>
    </author>
    <author initials="H." surname="Frystyk" fullname="Henrik Frystyk Nielsen">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>henrikn@microsoft.com</email></address>
    </author>
    <author initials="L." surname="Masinter" fullname="Larry Masinter">
      <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
      <address><email>LMM@acm.org</email></address>
    </author>
    <author initials="P." surname="Leach" fullname="Paul J. Leach">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>paulle@microsoft.com</email></address>
    </author>
    <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
      <organization abbrev="W3C/MIT">World Wide Web Consortium</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <author initials="Y." surname="Lafon" fullname="Yves Lafon" role="editor">
      <organization abbrev="W3C">World Wide Web Consortium</organization>
      <address><email>ylafon@w3.org</email></address>
    </author>
    <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
      <organization abbrev="greenbytes">greenbytes GmbH</organization>
      <address><email>julian.reschke@greenbytes.de</email></address>
    </author>
    <date month="&ID-MONTH;" year="&ID-YEAR;"/>
  </front>
  <seriesInfo name="Internet-Draft" value="draft-ietf-httpbis-p1-messaging-&ID-VERSION;"/>
  <x:source href="p1-messaging.xml" basename="p1-messaging"/>
</reference>

<reference anchor="Part3">
  <front>
    <title abbrev="HTTP/1.1">HTTP/1.1, part 3: Message Payload and Content Negotiation</title>
    <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
      <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
      <address><email>fielding@gbiv.com</email></address>
    </author>
    <author initials="J." surname="Gettys" fullname="Jim Gettys">
      <organization abbrev="Alcatel-Lucent">Alcatel-Lucent Bell Labs</organization>
      <address><email>jg@freedesktop.org</email></address>
    </author>
    <author initials="J." surname="Mogul" fullname="Jeffrey C. Mogul">
      <organization abbrev="HP">Hewlett-Packard Company</organization>
      <address><email>JeffMogul@acm.org</email></address>
    </author>
    <author initials="H." surname="Frystyk" fullname="Henrik Frystyk Nielsen">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>henrikn@microsoft.com</email></address>
    </author>
    <author initials="L." surname="Masinter" fullname="Larry Masinter">
      <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
      <address><email>LMM@acm.org</email></address>
    </author>
    <author initials="P." surname="Leach" fullname="Paul J. Leach">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>paulle@microsoft.com</email></address>
    </author>
    <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
      <organization abbrev="W3C/MIT">World Wide Web Consortium</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <author initials="Y." surname="Lafon" fullname="Yves Lafon" role="editor">
      <organization abbrev="W3C">World Wide Web Consortium</organization>
      <address><email>ylafon@w3.org</email></address>
    </author>
    <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
      <organization abbrev="greenbytes">greenbytes GmbH</organization>
      <address><email>julian.reschke@greenbytes.de</email></address>
    </author>
    <date month="&ID-MONTH;" year="&ID-YEAR;"/>
  </front>
  <seriesInfo name="Internet-Draft" value="draft-ietf-httpbis-p3-payload-&ID-VERSION;"/>
  <x:source href="p3-payload.xml" basename="p3-payload"/>
</reference>

<reference anchor="Part4">
  <front>
    <title abbrev="HTTP/1.1">HTTP/1.1, part 4: Conditional Requests</title>
    <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
      <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
      <address><email>fielding@gbiv.com</email></address>
    </author>
    <author initials="J." surname="Gettys" fullname="Jim Gettys">
      <organization abbrev="Alcatel-Lucent">Alcatel-Lucent Bell Labs</organization>
      <address><email>jg@freedesktop.org</email></address>
    </author>
    <author initials="J." surname="Mogul" fullname="Jeffrey C. Mogul">
      <organization abbrev="HP">Hewlett-Packard Company</organization>
      <address><email>JeffMogul@acm.org</email></address>
    </author>
    <author initials="H." surname="Frystyk" fullname="Henrik Frystyk Nielsen">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>henrikn@microsoft.com</email></address>
    </author>
    <author initials="L." surname="Masinter" fullname="Larry Masinter">
      <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
      <address><email>LMM@acm.org</email></address>
    </author>
    <author initials="P." surname="Leach" fullname="Paul J. Leach">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>paulle@microsoft.com</email></address>
    </author>
    <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
      <organization abbrev="W3C/MIT">World Wide Web Consortium</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <author initials="Y." surname="Lafon" fullname="Yves Lafon" role="editor">
      <organization abbrev="W3C">World Wide Web Consortium</organization>
      <address><email>ylafon@w3.org</email></address>
    </author>
    <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
      <organization abbrev="greenbytes">greenbytes GmbH</organization>
      <address><email>julian.reschke@greenbytes.de</email></address>
    </author>
    <date month="&ID-MONTH;" year="&ID-YEAR;"/>
  </front>
  <seriesInfo name="Internet-Draft" value="draft-ietf-httpbis-p4-conditional-&ID-VERSION;"/>
  <x:source href="p4-conditional.xml" basename="p4-conditional"/>
</reference>

<reference anchor="Part5">
  <front>
    <title abbrev="HTTP/1.1">HTTP/1.1, part 5: Range Requests and Partial Responses</title>
    <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
      <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
      <address><email>fielding@gbiv.com</email></address>
    </author>
    <author initials="J." surname="Gettys" fullname="Jim Gettys">
      <organization abbrev="Alcatel-Lucent">Alcatel-Lucent Bell Labs</organization>
      <address><email>jg@freedesktop.org</email></address>
    </author>
    <author initials="J." surname="Mogul" fullname="Jeffrey C. Mogul">
      <organization abbrev="HP">Hewlett-Packard Company</organization>
      <address><email>JeffMogul@acm.org</email></address>
    </author>
    <author initials="H." surname="Frystyk" fullname="Henrik Frystyk Nielsen">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>henrikn@microsoft.com</email></address>
    </author>
    <author initials="L." surname="Masinter" fullname="Larry Masinter">
      <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
      <address><email>LMM@acm.org</email></address>
    </author>
    <author initials="P." surname="Leach" fullname="Paul J. Leach">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>paulle@microsoft.com</email></address>
    </author>
    <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
      <organization abbrev="W3C/MIT">World Wide Web Consortium</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <author initials="Y." surname="Lafon" fullname="Yves Lafon" role="editor">
      <organization abbrev="W3C">World Wide Web Consortium</organization>
      <address><email>ylafon@w3.org</email></address>
    </author>
    <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
      <organization abbrev="greenbytes">greenbytes GmbH</organization>
      <address><email>julian.reschke@greenbytes.de</email></address>
    </author>
    <date month="&ID-MONTH;" year="&ID-YEAR;"/>
  </front>
  <seriesInfo name="Internet-Draft" value="draft-ietf-httpbis-p5-range-&ID-VERSION;"/>
  <x:source href="p5-range.xml" basename="p5-range"/>
</reference>

<reference anchor="Part6">
  <front>
    <title abbrev="HTTP/1.1">HTTP/1.1, part 6: Caching</title>
    <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
      <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
      <address><email>fielding@gbiv.com</email></address>
    </author>
    <author initials="J." surname="Gettys" fullname="Jim Gettys">
      <organization abbrev="Alcatel-Lucent">Alcatel-Lucent Bell Labs</organization>
      <address><email>jg@freedesktop.org</email></address>
    </author>
    <author initials="J." surname="Mogul" fullname="Jeffrey C. Mogul">
      <organization abbrev="HP">Hewlett-Packard Company</organization>
      <address><email>JeffMogul@acm.org</email></address>
    </author>
    <author initials="H." surname="Frystyk" fullname="Henrik Frystyk Nielsen">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>henrikn@microsoft.com</email></address>
    </author>
    <author initials="L." surname="Masinter" fullname="Larry Masinter">
      <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
      <address><email>LMM@acm.org</email></address>
    </author>
    <author initials="P." surname="Leach" fullname="Paul J. Leach">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>paulle@microsoft.com</email></address>
    </author>
    <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
      <organization abbrev="W3C/MIT">World Wide Web Consortium</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <author initials="Y." surname="Lafon" fullname="Yves Lafon" role="editor">
      <organization abbrev="W3C">World Wide Web Consortium</organization>
      <address><email>ylafon@w3.org</email></address>
    </author>
    <author initials="M." surname="Nottingham" fullname="Mark Nottingham" role="editor">
      <organization>Rackspace</organization>
      <address><email>mnot@mnot.net</email></address>
    </author>
    <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
      <organization abbrev="greenbytes">greenbytes GmbH</organization>
      <address><email>julian.reschke@greenbytes.de</email></address>
    </author>
    <date month="&ID-MONTH;" year="&ID-YEAR;"/>
  </front>
  <seriesInfo name="Internet-Draft" value="draft-ietf-httpbis-p6-cache-&ID-VERSION;"/>
  <x:source href="p6-cache.xml" basename="p6-cache"/>
</reference>

<reference anchor="Part7">
  <front>
    <title abbrev="HTTP/1.1">HTTP/1.1, part 7: Authentication</title>
    <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
      <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
      <address><email>fielding@gbiv.com</email></address>
    </author>
    <author initials="J." surname="Gettys" fullname="Jim Gettys">
      <organization abbrev="Alcatel-Lucent">Alcatel-Lucent Bell Labs</organization>
      <address><email>jg@freedesktop.org</email></address>
    </author>
    <author initials="J." surname="Mogul" fullname="Jeffrey C. Mogul">
      <organization abbrev="HP">Hewlett-Packard Company</organization>
      <address><email>JeffMogul@acm.org</email></address>
    </author>
    <author initials="H." surname="Frystyk" fullname="Henrik Frystyk Nielsen">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>henrikn@microsoft.com</email></address>
    </author>
    <author initials="L." surname="Masinter" fullname="Larry Masinter">
      <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
      <address><email>LMM@acm.org</email></address>
    </author>
    <author initials="P." surname="Leach" fullname="Paul J. Leach">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>paulle@microsoft.com</email></address>
    </author>
    <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
      <organization abbrev="W3C/MIT">World Wide Web Consortium</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <author initials="Y." surname="Lafon" fullname="Yves Lafon" role="editor">
      <organization abbrev="W3C">World Wide Web Consortium</organization>
      <address><email>ylafon@w3.org</email></address>
    </author>
    <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
      <organization abbrev="greenbytes">greenbytes GmbH</organization>
      <address><email>julian.reschke@greenbytes.de</email></address>
    </author>
    <date month="&ID-MONTH;" year="&ID-YEAR;"/>
  </front>
  <seriesInfo name="Internet-Draft" value="draft-ietf-httpbis-p7-auth-&ID-VERSION;"/>
  <x:source href="p7-auth.xml" basename="p7-auth"/>
</reference>

<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author initials="S." surname="Bradner" fullname="Scott Bradner">
      <organization>Harvard University</organization>
      <address><email>sob@harvard.edu</email></address>
    </author>
    <date month="March" year="1997"/>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
</reference>

<reference anchor="RFC3986">
 <front>
  <title abbrev='URI Generic Syntax'>Uniform Resource Identifier (URI): Generic Syntax</title>
  <author initials='T.' surname='Berners-Lee' fullname='Tim Berners-Lee'>
    <organization abbrev="W3C/MIT">World Wide Web Consortium</organization>
    <address>
       <email>timbl@w3.org</email>
       <uri>http://www.w3.org/People/Berners-Lee/</uri>
    </address>
  </author>
  <author initials='R.' surname='Fielding' fullname='Roy T. Fielding'>
    <organization abbrev="Day Software">Day Software</organization>
    <address>
      <email>fielding@gbiv.com</email>
      <uri>http://roy.gbiv.com/</uri>
    </address>
  </author>
  <author initials='L.' surname='Masinter' fullname='Larry Masinter'>
    <organization abbrev="Adobe Systems">Adobe Systems Incorporated</organization>
    <address>
      <email>LMM@acm.org</email>
      <uri>http://larry.masinter.net/</uri>
    </address>
  </author>
  <date month='January' year='2005'></date>
 </front>
 <seriesInfo name="STD" value="66"/>
 <seriesInfo name="RFC" value="3986"/>
</reference>

<reference anchor="RFC5234">
  <front>
    <title abbrev="ABNF for Syntax Specifications">Augmented BNF for Syntax Specifications: ABNF</title>
    <author initials="D." surname="Crocker" fullname="Dave Crocker" role="editor">
      <organization>Brandenburg InternetWorking</organization>
      <address>
        <email>dcrocker@bbiw.net</email>
      </address>  
    </author>
    <author initials="P." surname="Overell" fullname="Paul Overell">
      <organization>THUS plc.</organization>
      <address>
        <email>paul.overell@thus.net</email>
      </address>
    </author>
    <date month="January" year="2008"/>
  </front>
  <seriesInfo name="STD" value="68"/>
  <seriesInfo name="RFC" value="5234"/>
</reference>

</references>

<references title="Informative References">

<reference anchor="RFC1123">
  <front>
    <title>Requirements for Internet Hosts - Application and Support</title>
    <author initials="R." surname="Braden" fullname="Robert Braden">
      <organization>University of Southern California (USC), Information Sciences Institute</organization>
      <address><email>Braden@ISI.EDU</email></address>
    </author>
    <date month="October" year="1989"/>
  </front>
  <seriesInfo name="STD" value="3"/>
  <seriesInfo name="RFC" value="1123"/>
</reference>

<reference anchor="RFC1945">
  <front>
    <title abbrev="HTTP/1.0">Hypertext Transfer Protocol -- HTTP/1.0</title>
    <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
      <organization>MIT, Laboratory for Computer Science</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <author initials="R.T." surname="Fielding" fullname="Roy T. Fielding">
      <organization>University of California, Irvine, Department of Information and Computer Science</organization>
      <address><email>fielding@ics.uci.edu</email></address>
    </author>
    <author initials="H.F." surname="Nielsen" fullname="Henrik Frystyk Nielsen">
      <organization>W3 Consortium, MIT Laboratory for Computer Science</organization>
      <address><email>frystyk@w3.org</email></address>
    </author>
    <date month="May" year="1996"/>
  </front>
  <seriesInfo name="RFC" value="1945"/>
</reference>

<reference anchor="RFC2068">
  <front>
    <title abbrev="HTTP/1.1">Hypertext Transfer Protocol -- HTTP/1.1</title>
    <author initials="R." surname="Fielding" fullname="Roy T. Fielding">
      <organization>University of California, Irvine, Department of Information and Computer Science</organization>
      <address><email>fielding@ics.uci.edu</email></address>
    </author>
    <author initials="J." surname="Gettys" fullname="Jim Gettys">
      <organization>MIT Laboratory for Computer Science</organization>
      <address><email>jg@w3.org</email></address>
    </author>
    <author initials="J." surname="Mogul" fullname="Jeffrey C. Mogul">
      <organization>Digital Equipment Corporation, Western Research Laboratory</organization>
      <address><email>mogul@wrl.dec.com</email></address>
    </author>
    <author initials="H." surname="Nielsen" fullname="Henrik Frystyk Nielsen">
      <organization>MIT Laboratory for Computer Science</organization>
      <address><email>frystyk@w3.org</email></address>
    </author>
    <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
      <organization>MIT Laboratory for Computer Science</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <date month="January" year="1997"/>
  </front>
  <seriesInfo name="RFC" value="2068"/>
</reference>

<reference anchor="RFC2616">
  <front>
    <title>Hypertext Transfer Protocol -- HTTP/1.1</title>
    <author initials="R." surname="Fielding" fullname="R. Fielding">
      <organization>University of California, Irvine</organization>
      <address><email>fielding@ics.uci.edu</email></address>
    </author>
    <author initials="J." surname="Gettys" fullname="J. Gettys">
      <organization>W3C</organization>
      <address><email>jg@w3.org</email></address>
    </author>
    <author initials="J." surname="Mogul" fullname="J. Mogul">
      <organization>Compaq Computer Corporation</organization>
      <address><email>mogul@wrl.dec.com</email></address>
    </author>
    <author initials="H." surname="Frystyk" fullname="H. Frystyk">
      <organization>MIT Laboratory for Computer Science</organization>
      <address><email>frystyk@w3.org</email></address>
    </author>
    <author initials="L." surname="Masinter" fullname="L. Masinter">
      <organization>Xerox Corporation</organization>
      <address><email>masinter@parc.xerox.com</email></address>
    </author>
    <author initials="P." surname="Leach" fullname="P. Leach">
      <organization>Microsoft Corporation</organization>
      <address><email>paulle@microsoft.com</email></address>
    </author>
    <author initials="T." surname="Berners-Lee" fullname="T. Berners-Lee">
      <organization>W3C</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <date month="June" year="1999"/>
  </front>
  <seriesInfo name="RFC" value="2616"/>
</reference>

<reference anchor='RFC2817'>
  <front>
    <title>Upgrading to TLS Within HTTP/1.1</title>
    <author initials='R.' surname='Khare' fullname='R. Khare'>
      <organization>4K Associates / UC Irvine</organization>
      <address><email>rohit@4K-associates.com</email></address>
    </author>
    <author initials='S.' surname='Lawrence' fullname='S. Lawrence'>
      <organization>Agranat Systems, Inc.</organization>
      <address><email>lawrence@agranat.com</email></address>
    </author>
    <date year='2000' month='May' />
  </front>
  <seriesInfo name='RFC' value='2817' />
</reference>

<reference anchor='RFC3864'>
  <front>
    <title>Registration Procedures for Message Header Fields</title>
    <author initials='G.' surname='Klyne' fullname='G. Klyne'>
      <organization>Nine by Nine</organization>
      <address><email>GK-IETF@ninebynine.org</email></address>
    </author>
    <author initials='M.' surname='Nottingham' fullname='M. Nottingham'>
      <organization>BEA Systems</organization>
      <address><email>mnot@pobox.com</email></address>
    </author>
    <author initials='J.' surname='Mogul' fullname='J. Mogul'>
      <organization>HP Labs</organization>
      <address><email>JeffMogul@acm.org</email></address>
    </author>
    <date year='2004' month='September' />
  </front>
  <seriesInfo name='BCP' value='90' />
  <seriesInfo name='RFC' value='3864' />
</reference>

<reference anchor='RFC5226'>
  <front>
    <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
    <author initials='T.' surname='Narten' fullname='T. Narten'>
      <organization>IBM</organization>
      <address><email>narten@us.ibm.com</email></address>
    </author>
    <author initials='H.' surname='Alvestrand' fullname='H. Alvestrand'>
      <organization>Google</organization>
      <address><email>Harald@Alvestrand.no</email></address>
    </author>
    <date year='2008' month='May' />
  </front>
  <seriesInfo name='BCP' value='26' />
  <seriesInfo name='RFC' value='5226' />
</reference>

<reference anchor="RFC5322">
  <front>
    <title>Internet Message Format</title>
    <author initials="P." surname="Resnick" fullname="P. Resnick">
      <organization>Qualcomm Incorporated</organization>
    </author>
    <date year="2008" month="October"/>
  </front> 
  <seriesInfo name="RFC" value="5322"/>
</reference>

<reference anchor='RFC5789'>
  <front>
    <title>PATCH Method for HTTP</title>
    <author initials='L.' surname='Dusseault' fullname='L. Dusseault'>
      <organization>Linden Lab</organization>
    </author>
    <author initials='J.' surname='Snell' fullname='J. Snell' />
    <date year='2010' month='March' />
  </front>
  <seriesInfo name='RFC' value='5789' />
</reference>

<reference anchor="RFC5987">
	<front>
    <title>Character Set and Language Encoding for Hypertext Transfer Protocol (HTTP) Header Field Parameters</title>
    <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke">
      <organization abbrev="greenbytes">greenbytes GmbH</organization>
      <address>
        <postal>
          <street>Hafenweg 16</street>
          <city>Muenster</city><region>NW</region><code>48155</code>
          <country>Germany</country>
        </postal>
        <email>julian.reschke@greenbytes.de</email>	
        <uri>http://greenbytes.de/tech/webdav/</uri>	
      </address>
    </author>
    <date month="August" year="2010"/>
  </front>
  <seriesInfo name="RFC" value="5987"/>
</reference>

</references>

<section title="Changes from RFC 2616" anchor="changes.from.rfc.2616">
<t>
  This document takes over the Status Code Registry, previously defined
  in <xref target="RFC2817" x:fmt="of" x:sec="7.1"/>.
  (<xref target="status.code.registry"/>)
</t>
<t>
  Clarify definition of POST.
  (<xref target="POST"/>)
</t>
<t>
  Remove requirement to handle all Content-* header fields; ban use of
  Content-Range with PUT.
  (<xref target="PUT"/>)
</t>
<t>
  Take over definition of CONNECT method from <xref target="RFC2817"/>.
  (<xref target="CONNECT"/>)
</t>
<t>
  Broadened the definition of 203 (Non-Authoritative Information) to include
  cases of payload transformations as well.
  (<xref target="status.203"/>)
</t>
<t>
  Failed to consider that there are many other request methods that are safe
  to automatically redirect, and further that the user agent is able to make
  that determination based on the request method semantics.
  Furthermore, allow user agents to rewrite the method from POST to GET
  for status codes 301 and 302.
  (Sections <xref format="counter" target="status.301"/>,
  <xref format="counter" target="status.302"/> and
  <xref format="counter" target="status.307"/>)
</t>
<t>
  Deprecate 305 Use Proxy status code, because user agents did not implement it.
  It used to indicate that the target resource must be accessed through the
  proxy given by the Location field. The Location field gave the URI of the
  proxy. The recipient was expected to repeat this single request via the proxy.
  (<xref target="status.305"/>)
</t>
<t>
  Define status 426 (Upgrade Required) (this was incorporated from
  <xref target="RFC2817"/>).
  (<xref target="status.426"/>)
</t>
<t>
  Change ABNF productions for header fields to only define the field value.
  (<xref target="header.field.definitions"/>)
</t>
<t>
  Reclassify "Allow" as response header field, removing the option to
  specify it in a PUT request.
  Relax the server requirement on the contents of the Allow header field and
  remove requirement on clients to always trust the header field value.
  (<xref target="header.allow"/>)
</t>
<t>
  Correct syntax of Location header field to allow URI references (including
  relative references and fragments), as referred symbol "absoluteURI" wasn't
  what was expected, and add some clarifications as to when use of fragments 
  would not be appropriate.
  (<xref target="header.location"/>)
</t>
<t>
  Restrict Max-Forwards header field to OPTIONS and TRACE (previously,
  extension methods could have used it as well).
  (<xref target="header.max-forwards"/>)
</t>
<t>
  Allow Referer field value of "about:blank" as alternative to not specifying it. 
  (<xref target="header.referer"/>)
</t>
<t>
  In the description of the Server header field, the Via field
  was described as a SHOULD. The requirement was and is stated
  correctly in the description of the Via header field in &header-via;.
  (<xref target="header.server"/>)
</t>
</section>

<?BEGININC p2-semantics.abnf-appendix ?>
<section xmlns:x="http://purl.org/net/xml2rfc/ext" title="Collected ABNF" anchor="collected.abnf">
<figure>
<artwork type="abnf" name="p2-semantics.parsed-abnf">
<x:ref>Allow</x:ref> = [ ( "," / Method ) *( OWS "," [ OWS Method ] ) ]

<x:ref>Date</x:ref> = HTTP-date

<x:ref>Expect</x:ref> = *( "," OWS ) expectation *( OWS "," [ OWS expectation ] )

<x:ref>From</x:ref> = mailbox

<x:ref>GMT</x:ref> = %x47.4D.54 ; GMT

<x:ref>HTTP-date</x:ref> = rfc1123-date / obs-date

<x:ref>Location</x:ref> = URI-reference

<x:ref>Max-Forwards</x:ref> = 1*DIGIT
<x:ref>Method</x:ref> = token

<x:ref>OWS</x:ref> = &lt;OWS, defined in [Part1], Section 1.2.2&gt;

<x:ref>RWS</x:ref> = &lt;RWS, defined in [Part1], Section 1.2.2&gt;
<x:ref>Reason-Phrase</x:ref> = *( HTAB / SP / VCHAR / obs-text )
<x:ref>Referer</x:ref> = absolute-URI / partial-URI
<x:ref>Retry-After</x:ref> = HTTP-date / delta-seconds

<x:ref>Server</x:ref> = product *( RWS ( product / comment ) )
<x:ref>Status-Code</x:ref> = 3DIGIT

<x:ref>URI-reference</x:ref> = &lt;URI-reference, defined in [Part1], Section 2.7&gt;
<x:ref>User-Agent</x:ref> = product *( RWS ( product / comment ) )

<x:ref>absolute-URI</x:ref> = &lt;absolute-URI, defined in [Part1], Section 2.7&gt;
<x:ref>asctime-date</x:ref> = day-name SP date3 SP time-of-day SP year

<x:ref>comment</x:ref> = &lt;comment, defined in [Part1], Section 3.2&gt;

<x:ref>date1</x:ref> = day SP month SP year
<x:ref>date2</x:ref> = day "-" month "-" 2DIGIT
<x:ref>date3</x:ref> = month SP ( 2DIGIT / ( SP DIGIT ) )
<x:ref>day</x:ref> = 2DIGIT
<x:ref>day-name</x:ref> = %x4D.6F.6E ; Mon
 / %x54.75.65 ; Tue
 / %x57.65.64 ; Wed
 / %x54.68.75 ; Thu
 / %x46.72.69 ; Fri
 / %x53.61.74 ; Sat
 / %x53.75.6E ; Sun
<x:ref>day-name-l</x:ref> = %x4D.6F.6E.64.61.79 ; Monday
 / %x54.75.65.73.64.61.79 ; Tuesday
 / %x57.65.64.6E.65.73.64.61.79 ; Wednesday
 / %x54.68.75.72.73.64.61.79 ; Thursday
 / %x46.72.69.64.61.79 ; Friday
 / %x53.61.74.75.72.64.61.79 ; Saturday
 / %x53.75.6E.64.61.79 ; Sunday
<x:ref>delta-seconds</x:ref> = 1*DIGIT

<x:ref>expect-params</x:ref> = ";" token [ "=" ( token / quoted-string ) ]
<x:ref>expectation</x:ref> = "100-continue" / expectation-extension
<x:ref>expectation-extension</x:ref> = token [ "=" ( token / quoted-string )
 *expect-params ]

<x:ref>hour</x:ref> = 2DIGIT

<x:ref>mailbox</x:ref> = &lt;mailbox, defined in [RFC5322], Section 3.4&gt;
<x:ref>minute</x:ref> = 2DIGIT
<x:ref>month</x:ref> = %x4A.61.6E ; Jan
 / %x46.65.62 ; Feb
 / %x4D.61.72 ; Mar
 / %x41.70.72 ; Apr
 / %x4D.61.79 ; May
 / %x4A.75.6E ; Jun
 / %x4A.75.6C ; Jul
 / %x41.75.67 ; Aug
 / %x53.65.70 ; Sep
 / %x4F.63.74 ; Oct
 / %x4E.6F.76 ; Nov
 / %x44.65.63 ; Dec

<x:ref>obs-date</x:ref> = rfc850-date / asctime-date
<x:ref>obs-text</x:ref> = &lt;obs-text, defined in [Part1], Section 1.2.2&gt;

<x:ref>partial-URI</x:ref> = &lt;partial-URI, defined in [Part1], Section 2.7&gt;
<x:ref>product</x:ref> = &lt;product, defined in [Part1], Section 5.2&gt;

<x:ref>quoted-string</x:ref> = &lt;quoted-string, defined in [Part1], Section 3.2.3&gt;

<x:ref>rfc1123-date</x:ref> = day-name "," SP date1 SP time-of-day SP GMT
<x:ref>rfc850-date</x:ref> = day-name-l "," SP date2 SP time-of-day SP GMT

<x:ref>second</x:ref> = 2DIGIT

<x:ref>time-of-day</x:ref> = hour ":" minute ":" second
<x:ref>token</x:ref> = &lt;token, defined in [Part1], Section 3.2.3&gt;

<x:ref>year</x:ref> = 4DIGIT
</artwork>
</figure>
<figure><preamble>ABNF diagnostics:</preamble><artwork type="inline">
; Allow defined but not used
; Date defined but not used
; Expect defined but not used
; From defined but not used
; Location defined but not used
; Max-Forwards defined but not used
; Reason-Phrase defined but not used
; Referer defined but not used
; Retry-After defined but not used
; Server defined but not used
; Status-Code defined but not used
; User-Agent defined but not used
</artwork></figure></section>
<?ENDINC p2-semantics.abnf-appendix ?>

<section title="Change Log (to be removed by RFC Editor before publication)" anchor="change.log">

<section title="Since RFC 2616">
<t>
  Extracted relevant partitions from <xref target="RFC2616"/>.
</t>
</section>

<section title="Since draft-ietf-httpbis-p2-semantics-00">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/5"/>:
      "Via is a MUST"
      (<eref target="http://purl.org/NET/http-errata#via-must"/>)
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/6"/>:
      "Fragments allowed in Location"
      (<eref target="http://purl.org/NET/http-errata#location-fragments"/>)
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/10"/>:
      "Safe Methods vs Redirection"
      (<eref target="http://purl.org/NET/http-errata#saferedirect"/>)
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/17"/>:
      "Revise description of the POST method"
      (<eref target="http://purl.org/NET/http-errata#post"/>)
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/35"/>:
      "Normative and Informative references"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/42"/>:
      "RFC2606 Compliance"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/65"/>:
      "Informative references"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/84"/>:
      "Redundant cross-references"
    </t>
  </list>
</t>
<t>
  Other changes:
  <list style="symbols"> 
    <t>
      Move definitions of 304 and 412 condition codes to <xref target="Part4"/>
    </t>
  </list>
</t>
</section>

<section title="Since draft-ietf-httpbis-p2-semantics-01">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/21"/>:
      "PUT side effects"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/91"/>:
      "Duplicate Host header requirements"
    </t>
  </list>
</t>
<t>
  Ongoing work on ABNF conversion (<eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/36"/>):
  <list style="symbols"> 
    <t>
      Move "Product Tokens" section (back) into Part 1, as "token" is used
      in the definition of the Upgrade header field.
    </t>
    <t>
      Add explicit references to BNF syntax and rules imported from other parts of the specification.
    </t>
    <t>
      Copy definition of delta-seconds from Part6 instead of referencing it.
    </t>
  </list>
</t>
</section>

<section title="Since draft-ietf-httpbis-p2-semantics-02" anchor="changes.since.02">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/24"/>:
      "Requiring Allow in 405 responses"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/59"/>:
      "Status Code Registry"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/61"/>:
      "Redirection vs. Location"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/70"/>:
      "Cacheability of 303 response"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/76"/>:
      "305 Use Proxy"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/105"/>:
      "Classification for Allow header"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/112"/>:
      "PUT - 'store under' vs 'store at'"
    </t>
  </list>
</t>
<t>
  Ongoing work on IANA Message Header Field Registration (<eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/40"/>):
  <list style="symbols"> 
    <t>
      Reference RFC 3984, and update header field registrations for headers defined
      in this document.
    </t>
  </list>
</t>
<t>
  Ongoing work on ABNF conversion (<eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/36"/>):
  <list style="symbols"> 
    <t>
      Replace string literals when the string really is case-sensitive (method).
    </t>
  </list>
</t>
</section>

<section title="Since draft-ietf-httpbis-p2-semantics-03" anchor="changes.since.03">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/98"/>:
      "OPTIONS request bodies"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/119"/>:
      "Description of CONNECT should refer to RFC2817"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/125"/>:
      "Location Content-Location reference request/response mixup"
    </t>
  </list>
</t>
<t>
  Ongoing work on Method Registry (<eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/72"/>):
  <list style="symbols"> 
    <t>
      Added initial proposal for registration process, plus initial
      content (non-HTTP/1.1 methods to be added by a separate specification).
    </t>
  </list>
</t>
</section>

<section title="Since draft-ietf-httpbis-p2-semantics-04" anchor="changes.since.04">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/103"/>:
      "Content-*"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/132"/>:
      "RFC 2822 is updated by RFC 5322"
    </t>
  </list>
</t>
<t>
  Ongoing work on ABNF conversion (<eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/36"/>):
  <list style="symbols"> 
    <t>
      Use "/" instead of "|" for alternatives.
    </t>
    <t>
      Introduce new ABNF rules for "bad" whitespace ("BWS"), optional
      whitespace ("OWS") and required whitespace ("RWS").
    </t>
    <t>
      Rewrite ABNFs to spell out whitespace rules, factor out
      header field value format definitions.
    </t>
  </list>
</t>
</section>

<section title="Since draft-ietf-httpbis-p2-semantics-05" anchor="changes.since.05">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/94"/>:
      "Reason-Phrase BNF"
    </t>
  </list>
</t>
<t>
  Final work on ABNF conversion (<eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/36"/>):
  <list style="symbols"> 
    <t>
      Add appendix containing collected and expanded ABNF, reorganize ABNF introduction.
    </t>
  </list>
</t>
</section>

<section title="Since draft-ietf-httpbis-p2-semantics-06" anchor="changes.since.06">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/144"/>:
      "Clarify when Referer is sent"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/164"/>:
      "status codes vs methods"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/170"/>:
      "Do not require "updates" relation for specs that register status codes or method names"
    </t>
  </list>
</t>
</section>

<section title="Since draft-ietf-httpbis-p2-semantics-07" anchor="changes.since.07">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/27"/>:
      "Idempotency"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/33"/>:
      "TRACE security considerations"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/110"/>:
      "Clarify rules for determining what entities a response carries"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/140"/>:
      "update note citing RFC 1945 and 2068"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/182"/>:
      "update note about redirect limit"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/191"/>:
      "Location header ABNF should use 'URI'"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/192"/>:
      "fragments in Location vs status 303"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/198"/>:
      "move IANA registrations for optional status codes"
    </t>
  </list>
</t>
<t>
  Partly resolved issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/171"/>:
      "Are OPTIONS and TRACE safe?"
    </t>
  </list>
</t>
</section>

<section title="Since draft-ietf-httpbis-p2-semantics-08" anchor="changes.since.08">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/10"/>:
      "Safe Methods vs Redirection" (we missed the introduction to the 3xx
      status codes when fixing this previously)
    </t>
  </list>
</t>
</section>

<section title="Since draft-ietf-httpbis-p2-semantics-09" anchor="changes.since.09">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/43"/>:
      "Fragment combination / precedence during redirects"
    </t>
  </list>
</t>
<t>
  Partly resolved issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/185"/>:
      "Location header payload handling"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/196"/>:
      "Term for the requested resource's URI"
    </t>
  </list>
</t>
</section>

<section title="Since draft-ietf-httpbis-p2-semantics-10" anchor="changes.since.10">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/69"/>:
      "Clarify 'Requested Variant'"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/109"/>:
      "Clarify entity / representation / variant terminology"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/139"/>:
      "Methods and Caching"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/190"/>:
      "OPTIONS vs Max-Forwards"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/199"/>:
      "Status codes and caching"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/220"/>:
      "consider removing the 'changes from 2068' sections"
    </t>
  </list>
</t>
</section>

<section title="Since draft-ietf-httpbis-p2-semantics-11" anchor="changes.since.11">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/229"/>:
      "Considerations for new status codes"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/230"/>:
      "Considerations for new methods"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/232"/>:
      "User-Agent guidelines" (relating to the 'User-Agent' header field)
    </t>
  </list>
</t>
</section>

<section title="Since draft-ietf-httpbis-p2-semantics-12" anchor="changes.since.12">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/43"/>:
      "Fragment combination / precedence during redirects" (added warning
      about having a fragid on the redirect may cause inconvenience in
      some cases) 
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/79"/>:
      "Content-* vs. PUT"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/88"/>:
      "205 Bodies"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/102"/>:
      "Understanding Content-* on non-PUT requests"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/103"/>:
      "Content-*"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/104"/>:
      "Header type defaulting"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/112"/>:
      "PUT - 'store under' vs 'store at'"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/137"/>:
      "duplicate ABNF for Reason-Phrase"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/180"/>:
      "Note special status of Content-* prefix in header registration procedures"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/203"/>:
      "Max-Forwards vs extension methods"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/213"/>:
      "What is the value space of HTTP status codes?" (actually fixed in
      draft-ietf-httpbis-p2-semantics-11)
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/224"/>:
      "Header Classification"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/225"/>:
      "PUT side effect: invalidation or just stale?"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/226"/>:
      "proxies not supporting certain methods"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/239"/>:
      "Migrate CONNECT from RFC2817 to p2"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/240"/>:
      "Migrate Upgrade details from RFC2817"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/267"/>:
      "clarify PUT semantics'"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/275"/>:
      "duplicate ABNF for 'Method'"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/276"/>:
      "untangle ABNFs for header fields"
    </t>
  </list>
</t>
</section>

<section title="Since draft-ietf-httpbis-p2-semantics-13" anchor="changes.since.13">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/276"/>:
      "untangle ABNFs for header fields"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/251"/>:
      "message-body in CONNECT request"
    </t>
  </list>
</t>
</section>

<section title="Since draft-ietf-httpbis-p2-semantics-14" anchor="changes.since.14">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/255"/>:
      "Clarify status code for rate limiting"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/294"/>:
      "clarify 403 forbidden"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/296"/>:
      "Clarify 203 Non-Authoritative Information"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/298"/>:
      "update default reason phrase for 413"
    </t>
  </list>
</t>
</section>

<section title="Since draft-ietf-httpbis-p2-semantics-15" anchor="changes.since.15">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/285"/>:
      "Strength of requirements on Accept re: 406"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/303"/>:
      "400 response isn't generic"
    </t>
  </list>
</t>
</section>

<section title="Since draft-ietf-httpbis-p2-semantics-16" anchor="changes.since.16">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/160"/>:
      "Redirects and non-GET methods"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/186"/>:
      "Document HTTP's error-handling philosophy"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/310"/>:
      "clarify 303 redirect on HEAD"
    </t>
  </list>
</t>
<t>
  Work-in-progress:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/231"/>:
      "Considerations for new headers"
    </t>
  </list>
</t>
</section>

</section>

</back>
</rfc>
