<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type='text/xsl' href='../myxml2rfc.xslt'?>
<!DOCTYPE rfc [
  <!ENTITY MAY "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>MAY</bcp14>">
  <!ENTITY MUST "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>MUST</bcp14>">
  <!ENTITY MUST-NOT "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>MUST NOT</bcp14>">
  <!ENTITY OPTIONAL "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>OPTIONAL</bcp14>">
  <!ENTITY RECOMMENDED "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>RECOMMENDED</bcp14>">
  <!ENTITY REQUIRED "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>REQUIRED</bcp14>">
  <!ENTITY SHALL "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>SHALL</bcp14>">
  <!ENTITY SHALL-NOT "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>SHALL NOT</bcp14>">
  <!ENTITY SHOULD "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>SHOULD</bcp14>">
  <!ENTITY SHOULD-NOT "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>SHOULD NOT</bcp14>">
  <!ENTITY ID-VERSION "latest">
  <!ENTITY ID-MONTH "January">
  <!ENTITY ID-YEAR "2008">
  <!ENTITY caching                "<xref target='Part6' x:rel='#caching' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY payload                "<xref target='Part3' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY media-types            "<xref target='Part3' x:rel='#media.types' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY content-codings        "<xref target='Part3' x:rel='#content.codings' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY CONNECT                "<xref target='Part2' x:rel='#CONNECT' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY content.negotiation    "<xref target='Part3' x:rel='#content.negotiation' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY diff2045entity         "<xref target='Part3' x:rel='#differences.between.http.entities.and.rfc.2045.entities' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY entity                 "<xref target='Part3' x:rel='#entity' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY entity-header-fields   "<xref target='Part3' x:rel='#entity.header.fields' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-cache-control   "<xref target='Part6' x:rel='#header.cache-control' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-expect          "<xref target='Part2' x:rel='#header.expect' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-pragma          "<xref target='Part6' x:rel='#header.pragma' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-warning         "<xref target='Part6' x:rel='#header.warning' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY idempotent-methods     "<xref target='Part2' x:rel='#idempotent.methods' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY qvalue                 "<xref target='Part3' x:rel='#quality.values' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY request-header-fields  "<xref target='Part2' x:rel='#request.header.fields' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY response-header-fields "<xref target='Part2' x:rel='#response.header.fields' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY method                 "<xref target='Part2' x:rel='#method' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY status-codes           "<xref target='Part2' x:rel='#status.codes' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY status-100             "<xref target='Part2' x:rel='#status.100' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY status-1xx             "<xref target='Part2' x:rel='#status.1xx' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY status-414             "<xref target='Part2' x:rel='#status.414' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
]>
<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no" ?>
<?rfc linkmailto="no" ?>
<?rfc editing="no" ?>
<?rfc-ext allow-markup-in-artwork="yes" ?>
<?rfc-ext include-references-in-index="yes" ?>
<rfc obsoletes="2616" category="std"
     ipr="full3978" docName="draft-ietf-httpbis-p1-messaging-&ID-VERSION;"
     xmlns:x='http://purl.org/net/xml2rfc/ext'>
<front>

  <title abbrev="HTTP/1.1, Part 1">HTTP/1.1, part 1: URIs, Connections, and Message Parsing</title>

  <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
    <organization abbrev="Day Software">Day Software</organization>
    <address>
      <postal>
        <street>23 Corporate Plaza DR, Suite 280</street>
        <city>Newport Beach</city>
        <region>CA</region>
        <code>92660</code>
        <country>USA</country>
      </postal>
      <phone>+1-949-706-5300</phone>
      <facsimile>+1-949-706-5305</facsimile>
      <email>fielding@gbiv.com</email>
      <uri>http://roy.gbiv.com/</uri>
    </address>
  </author>

  <author initials="J." surname="Gettys" fullname="Jim Gettys">
    <organization>One Laptop per Child</organization>
    <address>
      <postal>
        <street>21 Oak Knoll Road</street>
        <city>Carlisle</city>
        <region>MA</region>
        <code>01741</code>
        <country>USA</country>
      </postal>
      <email>jg@laptop.org</email>
      <uri>http://www.laptop.org/</uri>
    </address>
  </author>
  
  <author initials="J." surname="Mogul" fullname="Jeffrey C. Mogul">
    <organization abbrev="HP">Hewlett-Packard Company</organization>
    <address>
      <postal>
        <street>HP Labs, Large Scale Systems Group</street>
        <street>1501 Page Mill Road, MS 1177</street>
        <city>Palo Alto</city>
        <region>CA</region>
        <code>94304</code>
        <country>USA</country>
      </postal>
      <email>JeffMogul@acm.org</email>
    </address>
  </author>

  <author initials="H." surname="Frystyk" fullname="Henrik Frystyk Nielsen">
    <organization abbrev="Microsoft">Microsoft Corporation</organization>
    <address>
      <postal>
        <street>1 Microsoft Way</street>
        <city>Redmond</city>
        <region>WA</region>
        <code>98052</code>
        <country>USA</country>
      </postal>
      <email>henrikn@microsoft.com</email>
    </address>
  </author>

  <author initials="L." surname="Masinter" fullname="Larry Masinter">
    <organization abbrev="Adobe Systems">Adobe Systems, Incorporated</organization>
    <address>
      <postal>
        <street>345 Park Ave</street>
        <city>San Jose</city>
        <region>CA</region>
        <code>95110</code>
        <country>USA</country>
      </postal>
      <email>LMM@acm.org</email>
      <uri>http://larry.masinter.net/</uri>
    </address>
  </author>
  
  <author initials="P." surname="Leach" fullname="Paul J. Leach">
    <organization abbrev="Microsoft">Microsoft Corporation</organization>
    <address>
      <postal>
        <street>1 Microsoft Way</street>
        <city>Redmond</city>
        <region>WA</region>
        <code>98052</code>
      </postal>
      <email>paulle@microsoft.com</email>
    </address>
  </author>
   
  <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
    <organization abbrev="W3C/MIT">World Wide Web Consortium</organization>
    <address>
      <postal>
        <street>MIT Computer Science and Artificial Intelligence Laboratory</street>
        <street>The Stata Center, Building 32</street>
        <street>32 Vassar Street</street>
        <city>Cambridge</city>
        <region>MA</region>
        <code>02139</code>
        <country>USA</country>
      </postal>
      <email>timbl@w3.org</email>
      <uri>http://www.w3.org/People/Berners-Lee/</uri>
    </address>
  </author>

  <author initials="Y." surname="Lafon" fullname="Yves Lafon" role="editor">
    <organization abbrev="W3C">World Wide Web Consortium</organization>
    <address>
      <postal>
        <street>W3C / ERCIM</street>
        <street>2004, rte des Lucioles</street>
        <city>Sophia-Antipolis</city>
        <region>AM</region>
        <code>06902</code>
        <country>France</country>
      </postal>
      <email>ylafon@w3.org</email>
      <uri>http://www.raubacapeu.net/people/yves/</uri>
    </address>
  </author>

  <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
    <organization abbrev="greenbytes">greenbytes GmbH</organization>
    <address>
      <postal>
        <street>Hafenweg 16</street>
        <city>Muenster</city><region>NW</region><code>48155</code>
        <country>Germany</country>
      </postal>
      <phone>+49 251 2807760</phone>	
      <facsimile>+49 251 2807761</facsimile>	
      <email>julian.reschke@greenbytes.de</email>	
      <uri>http://greenbytes.de/tech/webdav/</uri>	
    </address>
  </author>

  <date month="&ID-MONTH;" year="&ID-YEAR;"/>

<abstract>
<t>
   The Hypertext Transfer Protocol (HTTP) is an application-level
   protocol for distributed, collaborative, hypermedia information
   systems. HTTP has been in use by the World Wide Web global information
   initiative since 1990. This document is Part 1 of the seven-part specification
   that defines the protocol referred to as "HTTP/1.1" and, taken together,
   obsoletes RFC 2616.  Part 1 provides an overview of HTTP and
   its associated terminology, defines the "http" and "https" Uniform
   Resource Identifier (URI) schemes, defines the generic message syntax
   and parsing requirements for HTTP message frames, and describes
   general security concerns for implementations.
</t>
</abstract>

<note title="Editorial Note (To be removed by RFC Editor)">
  <t>
    Discussion of this draft should take place on the HTTPBIS working group
    mailing list (ietf-http-wg@w3.org). The current issues list is
    at <eref target="http://www.tools.ietf.org/wg/httpbis/trac/report/11"/>
    and related documents (including fancy diffs) can be found at
    <eref target="http://www.tools.ietf.org/wg/httpbis/"/>.
  </t>
  <t>
    This draft incorporates those issue resolutions that were either
    collected in the original RFC2616 errata list (<eref target="http://purl.org/NET/http-errata"/>),
    or which were agreed upon on the mailing list between October 2006 and 
    November 2007 (as published in "draft-lafon-rfc2616bis-03").
  </t>
</note>
</front>
<middle>
<section title="Introduction" anchor="introduction">
<t>
   This document will define aspects of HTTP related to overall network
   operation, message framing, interaction with transport protocols, and
   URI schemes. Right now it only includes the extracted relevant sections
   of <xref target="RFC2616"/>.
</t>
<section title="Purpose" anchor="intro.purpose">
<t>
   The Hypertext Transfer Protocol (HTTP) is an application-level
   protocol for distributed, collaborative, hypermedia information
   systems. HTTP has been in use by the World-Wide Web global
   information initiative since 1990. The first version of HTTP,
   referred to as HTTP/0.9, was a simple protocol for raw data transfer
   across the Internet. HTTP/1.0, as defined by <xref target="RFC1945"/>, improved
   the protocol by allowing messages to be in the format of MIME-like
   messages, containing metainformation about the data transferred and
   modifiers on the request/response semantics. However, HTTP/1.0 does
   not sufficiently take into consideration the effects of hierarchical
   proxies, caching, the need for persistent connections, or virtual
   hosts. In addition, the proliferation of incompletely-implemented
   applications calling themselves "HTTP/1.0" has necessitated a
   protocol version change in order for two communicating applications
   to determine each other's true capabilities.
</t>
<t>
   This specification defines the protocol referred to as "HTTP/1.1".
   This protocol includes more stringent requirements than HTTP/1.0 in
   order to ensure reliable implementation of its features.
</t>
<t>
   Practical information systems require more functionality than simple
   retrieval, including search, front-end update, and annotation. HTTP
   allows an open-ended set of methods and headers that indicate the
   purpose of a request <xref target="RFC2324"/>. It builds on the discipline of reference
   provided by the Uniform Resource Identifier (URI) <xref target="RFC1630"/>, as a location
   (URL) <xref target="RFC1738"/> or name (URN) <xref target="RFC1737"/>, for indicating the resource to which a
   method is to be applied. Messages are passed in a format similar to
   that used by Internet mail <xref target="RFC2822"/> as defined by the Multipurpose
   Internet Mail Extensions (MIME) <xref target="RFC2045"/>.
</t>
<t>
   HTTP is also used as a generic protocol for communication between
   user agents and proxies/gateways to other Internet systems, including
   those supported by the SMTP <xref target="RFC2821"/>, NNTP <xref target="RFC3977"/>, FTP <xref target="RFC959"/>, Gopher <xref target="RFC1436"/>,
   and WAIS <xref target="WAIS"/> protocols. In this way, HTTP allows basic hypermedia
   access to resources available from diverse applications.
</t>
</section>

<section title="Requirements" anchor="intro.requirements">
<t>
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in <xref target="RFC2119"/>.
</t>
<t>
   An implementation is not compliant if it fails to satisfy one or more
   of the &MUST; or &REQUIRED; level requirements for the protocols it
   implements. An implementation that satisfies all the &MUST; or &REQUIRED;
   level and all the &SHOULD; level requirements for its protocols is said
   to be "unconditionally compliant"; one that satisfies all the &MUST;
   level requirements but not all the &SHOULD; level requirements for its
   protocols is said to be "conditionally compliant."
</t>
</section>

<section title="Terminology" anchor="intro.terminology">
<t>
   This specification uses a number of terms to refer to the roles
   played by participants in, and objects of, the HTTP communication.
</t>
<t>
  <iref item="connection"/>
  <x:dfn>connection</x:dfn>
  <list>
    <t>
      A transport layer virtual circuit established between two programs
      for the purpose of communication.
    </t>
  </list>
</t>
<t>
  <iref item="message"/>
  <x:dfn>message</x:dfn>
  <list>
    <t>
      The basic unit of HTTP communication, consisting of a structured
      sequence of octets matching the syntax defined in <xref target="http.message"/> and
      transmitted via the connection.
    </t>
  </list>
</t>
<t>
  <iref item="request"/>
  <x:dfn>request</x:dfn>
  <list>
    <t>
      An HTTP request message, as defined in <xref target="request"/>.
    </t>
  </list>
</t>
<t>
  <iref item="response"/>
  <x:dfn>response</x:dfn>
  <list>
    <t>
      An HTTP response message, as defined in <xref target="response"/>.
    </t>
  </list>
</t>
<t>
  <iref item="resource"/>
  <x:dfn>resource</x:dfn>
  <list>
    <t>
      A network data object or service that can be identified by a URI,
      as defined in <xref target="uri"/>. Resources may be available in multiple
      representations (e.g. multiple languages, data formats, size, and
      resolutions) or vary in other ways.
    </t>
  </list>
</t>
<t>
  <iref item="entity"/>
  <x:dfn>entity</x:dfn>
  <list>
    <t>
      The information transferred as the payload of a request or
      response. An entity consists of metainformation in the form of
      entity-header fields and content in the form of an entity-body, as
      described in &entity;.
    </t>
  </list>
</t>
<t>
  <iref item="representation"/>
  <x:dfn>representation</x:dfn>
  <list>
    <t>
      An entity included with a response that is subject to content
      negotiation, as described in &content.negotiation;. There may exist multiple
      representations associated with a particular response status.
    </t>
  </list>
</t>
<t>
  <iref item="content negotiation"/>
  <x:dfn>content negotiation</x:dfn>
  <list>
    <t>
      The mechanism for selecting the appropriate representation when
      servicing a request, as described in &content.negotiation;. The
      representation of entities in any response can be negotiated
      (including error responses).
    </t>
  </list>
</t>
<t>
  <iref item="variant"/>
  <x:dfn>variant</x:dfn>
  <list>
    <t>
      A resource may have one, or more than one, representation(s)
      associated with it at any given instant. Each of these
      representations is termed a `variant'.  Use of the term `variant'
      does not necessarily imply that the resource is subject to content
      negotiation.
    </t>
  </list>
</t>
<t>
  <iref item="client"/>
  <x:dfn>client</x:dfn>
  <list>
    <t>
      A program that establishes connections for the purpose of sending
      requests.
    </t>
  </list>
</t>
<t>
  <iref item="user agent"/>
  <x:dfn>user agent</x:dfn>
  <list>
    <t>
      The client which initiates a request. These are often browsers,
      editors, spiders (web-traversing robots), or other end user tools.
    </t>
  </list>
</t>
<t>
  <iref item="server"/>
  <x:dfn>server</x:dfn>
  <list>
    <t>
      An application program that accepts connections in order to
      service requests by sending back responses. Any given program may
      be capable of being both a client and a server; our use of these
      terms refers only to the role being performed by the program for a
      particular connection, rather than to the program's capabilities
      in general. Likewise, any server may act as an origin server,
      proxy, gateway, or tunnel, switching behavior based on the nature
      of each request.
    </t>
  </list>
</t>
<t>
  <iref item="origin server"/>
  <x:dfn>origin server</x:dfn>
  <list>
    <t>
      The server on which a given resource resides or is to be created.
    </t>
  </list>
</t>
<t>
  <iref item="proxy"/>
  <x:dfn>proxy</x:dfn>
  <list>
    <t>
      An intermediary program which acts as both a server and a client
      for the purpose of making requests on behalf of other clients.
      Requests are serviced internally or by passing them on, with
      possible translation, to other servers. A proxy &MUST; implement
      both the client and server requirements of this specification. A
      "transparent proxy" is a proxy that does not modify the request or
      response beyond what is required for proxy authentication and
      identification. A "non-transparent proxy" is a proxy that modifies
      the request or response in order to provide some added service to
      the user agent, such as group annotation services, media type
      transformation, protocol reduction, or anonymity filtering. Except
      where either transparent or non-transparent behavior is explicitly
      stated, the HTTP proxy requirements apply to both types of
      proxies.
    </t>
  </list>
</t>
<t>
  <iref item="gateway"/>
  <x:dfn>gateway</x:dfn>
  <list>
    <t>
      A server which acts as an intermediary for some other server.
      Unlike a proxy, a gateway receives requests as if it were the
      origin server for the requested resource; the requesting client
      may not be aware that it is communicating with a gateway.
    </t>
  </list>
</t>
<t>
  <iref item="tunnel"/>
  <x:dfn>tunnel</x:dfn>
  <list>
    <t>
      An intermediary program which is acting as a blind relay between
      two connections. Once active, a tunnel is not considered a party
      to the HTTP communication, though the tunnel may have been
      initiated by an HTTP request. The tunnel ceases to exist when both
      ends of the relayed connections are closed.
    </t>
  </list>
</t>
<t>
  <iref item="cache"/>
  <x:dfn>cache</x:dfn>
  <list>
    <t>
      A program's local store of response messages and the subsystem
      that controls its message storage, retrieval, and deletion. A
      cache stores cacheable responses in order to reduce the response
      time and network bandwidth consumption on future, equivalent
      requests. Any client or server may include a cache, though a cache
      cannot be used by a server that is acting as a tunnel.
    </t>
  </list>
</t>
<t>
  <iref item="cacheable"/>
  <x:dfn>cacheable</x:dfn>
  <list>
    <t>
      A response is cacheable if a cache is allowed to store a copy of
      the response message for use in answering subsequent requests. The
      rules for determining the cacheability of HTTP responses are
      defined in &caching;. Even if a resource is cacheable, there may
      be additional constraints on whether a cache can use the cached
      copy for a particular request.
    </t>
  </list>
</t>
<t>
  <iref item="upstream"/>
  <iref item="downstream"/>
  <x:dfn>upstream</x:dfn>/<x:dfn>downstream</x:dfn>
  <list>
    <t>
      Upstream and downstream describe the flow of a message: all
      messages flow from upstream to downstream.
    </t>
  </list>
</t>
<t>
  <iref item="inbound"/>
  <iref item="outbound"/>
  <x:dfn>inbound</x:dfn>/<x:dfn>outbound</x:dfn>
  <list>
    <t>
      Inbound and outbound refer to the request and response paths for
      messages: "inbound" means "traveling toward the origin server",
      and "outbound" means "traveling toward the user agent"
    </t>
  </list>
</t>
</section>

<section title="Overall Operation" anchor="intro.overall.operation">
<t>
   The HTTP protocol is a request/response protocol. A client sends a
   request to the server in the form of a request method, URI, and
   protocol version, followed by a MIME-like message containing request
   modifiers, client information, and possible body content over a
   connection with a server. The server responds with a status line,
   including the message's protocol version and a success or error code,
   followed by a MIME-like message containing server information, entity
   metainformation, and possible entity-body content. The relationship
   between HTTP and MIME is described in &diff2045entity;.
</t>
<t>
   Most HTTP communication is initiated by a user agent and consists of
   a request to be applied to a resource on some origin server. In the
   simplest case, this may be accomplished via a single connection (v)
   between the user agent (UA) and the origin server (O).
</t>
<figure><artwork type="drawing">
       request chain ------------------------&gt;
    UA -------------------v------------------- O
       &lt;----------------------- response chain
</artwork></figure>
<t>
   A more complicated situation occurs when one or more intermediaries
   are present in the request/response chain. There are three common
   forms of intermediary: proxy, gateway, and tunnel. A proxy is a
   forwarding agent, receiving requests for a URI in its absolute form,
   rewriting all or part of the message, and forwarding the reformatted
   request toward the server identified by the URI. A gateway is a
   receiving agent, acting as a layer above some other server(s) and, if
   necessary, translating the requests to the underlying server's
   protocol. A tunnel acts as a relay point between two connections
   without changing the messages; tunnels are used when the
   communication needs to pass through an intermediary (such as a
   firewall) even when the intermediary cannot understand the contents
   of the messages.
</t>
<figure><artwork type="drawing">
       request chain --------------------------------------&gt;
    UA -----v----- A -----v----- B -----v----- C -----v----- O
       &lt;------------------------------------- response chain
</artwork></figure>
<t>
   The figure above shows three intermediaries (A, B, and C) between the
   user agent and origin server. A request or response message that
   travels the whole chain will pass through four separate connections.
   This distinction is important because some HTTP communication options
   may apply only to the connection with the nearest, non-tunnel
   neighbor, only to the end-points of the chain, or to all connections
   along the chain. Although the diagram is linear, each participant may
   be engaged in multiple, simultaneous communications. For example, B
   may be receiving requests from many clients other than A, and/or
   forwarding requests to servers other than C, at the same time that it
   is handling A's request.
</t>
<t>
   Any party to the communication which is not acting as a tunnel may
   employ an internal cache for handling requests. The effect of a cache
   is that the request/response chain is shortened if one of the
   participants along the chain has a cached response applicable to that
   request. The following illustrates the resulting chain if B has a
   cached copy of an earlier response from O (via C) for a request which
   has not been cached by UA or A.
</t>
<figure><artwork type="drawing">
          request chain ----------&gt;
       UA -----v----- A -----v----- B - - - - - - C - - - - - - O
          &lt;--------- response chain
</artwork></figure>
<t>
   Not all responses are usefully cacheable, and some requests may
   contain modifiers which place special requirements on cache behavior.
   HTTP requirements for cache behavior and cacheable responses are
   defined in &caching;.
</t>
<t>
   In fact, there are a wide variety of architectures and configurations
   of caches and proxies currently being experimented with or deployed
   across the World Wide Web. These systems include national hierarchies
   of proxy caches to save transoceanic bandwidth, systems that
   broadcast or multicast cache entries, organizations that distribute
   subsets of cached data via CD-ROM, and so on. HTTP systems are used
   in corporate intranets over high-bandwidth links, and for access via
   PDAs with low-power radio links and intermittent connectivity. The
   goal of HTTP/1.1 is to support the wide diversity of configurations
   already deployed while introducing protocol constructs that meet the
   needs of those who build web applications that require high
   reliability and, failing that, at least reliable indications of
   failure.
</t>
<t>
   HTTP communication usually takes place over TCP/IP connections. The
   default port is TCP 80 (<eref target="http://www.iana.org/assignments/port-numbers"/>), but other ports can be used. This does
   not preclude HTTP from being implemented on top of any other protocol
   on the Internet, or on other networks. HTTP only presumes a reliable
   transport; any protocol that provides such guarantees can be used;
   the mapping of the HTTP/1.1 request and response structures onto the
   transport data units of the protocol in question is outside the scope
   of this specification.
</t>
<t>
   In HTTP/1.0, most implementations used a new connection for each
   request/response exchange. In HTTP/1.1, a connection may be used for
   one or more request/response exchanges, although connections may be
   closed for a variety of reasons (see <xref target="persistent.connections"/>).
</t>
</section>
</section>

<section title="Notational Conventions and Generic Grammar" anchor="notation">

<section title="Augmented BNF" anchor="notation.abnf">
<t>
   All of the mechanisms specified in this document are described in
   both prose and an augmented Backus-Naur Form (BNF) similar to that
   used by <xref target="RFC822ABNF"/>. Implementors will need to be familiar with the
   notation in order to understand this specification. The augmented BNF
   includes the following constructs:
</t>
<t>
   name = definition
  <list>
    <t>
      The name of a rule is simply the name itself (without any
      enclosing "&lt;" and "&gt;") and is separated from its definition by the
      equal "=" character. White space is only significant in that
      indentation of continuation lines is used to indicate a rule
      definition that spans more than one line. Certain basic rules are
      in uppercase, such as SP, LWS, HT, CRLF, DIGIT, ALPHA, etc. Angle
      brackets are used within definitions whenever their presence will
      facilitate discerning the use of rule names.
    </t>
  </list>
</t>
<t>
   "literal"
  <list>
    <t>
      Quotation marks surround literal text. Unless stated otherwise,
      the text is case-insensitive.
    </t>
  </list>
</t>
<t>
   rule1 | rule2
  <list>
    <t>
      Elements separated by a bar ("|") are alternatives, e.g., "yes |
      no" will accept yes or no.
    </t>
  </list>
</t>
<t>
   (rule1 rule2)
  <list>
    <t>
      Elements enclosed in parentheses are treated as a single element.
      Thus, "(elem (foo | bar) elem)" allows the token sequences "elem
      foo elem" and "elem bar elem".
    </t>
  </list>
</t>
<t>
   *rule
  <list>
    <t>
      The character "*" preceding an element indicates repetition. The
      full form is "&lt;n&gt;*&lt;m&gt;element" indicating at least &lt;n&gt; and at most
      &lt;m&gt; occurrences of element. Default values are 0 and infinity so
      that "*(element)" allows any number, including zero; "1*element"
      requires at least one; and "1*2element" allows one or two.
    </t>
  </list>
</t>
<t>
   [rule]
  <list>
    <t>
      Square brackets enclose optional elements; "[foo bar]" is
      equivalent to "*1(foo bar)".
    </t>
  </list>
</t>
<t>
   N rule
  <list>
    <t>
      Specific repetition: "&lt;n&gt;(element)" is equivalent to
      "&lt;n&gt;*&lt;n&gt;(element)"; that is, exactly &lt;n&gt; occurrences of (element).
      Thus 2DIGIT is a 2-digit number, and 3ALPHA is a string of three
      alphabetic characters.
    </t>
  </list>
</t>
<t>
   #rule
  <list>
    <t>
      A construct "#" is defined, similar to "*", for defining lists of
      elements. The full form is "&lt;n&gt;#&lt;m&gt;element" indicating at least
      &lt;n&gt; and at most &lt;m&gt; elements, each separated by one or more commas
      (",") and &OPTIONAL; linear white space (LWS). This makes the usual
      form of lists very easy; a rule such as
    </t>
    <t>
         ( *LWS element *( *LWS "," *LWS element ))
    </t>
    <t>
      can be shown as
    </t>
    <t>
         1#element
    </t>
    <t>
      Wherever this construct is used, null elements are allowed, but do
      not contribute to the count of elements present. That is,
      "(element), , (element) " is permitted, but counts as only two
      elements. Therefore, where at least one element is required, at
      least one non-null element &MUST; be present. Default values are 0
      and infinity so that "#element" allows any number, including zero;
      "1#element" requires at least one; and "1#2element" allows one or
      two.
    </t>
  </list>
</t>
<t>
   ; comment
  <list>
    <t>
      A semi-colon, set off some distance to the right of rule text,
      starts a comment that continues to the end of line. This is a
      simple way of including useful notes in parallel with the
      specifications.
    </t>
  </list>
</t>
<t>
   implied *LWS
  <list>
    <t>
      The grammar described by this specification is word-based. Except
      where noted otherwise, linear white space (LWS) can be included
      between any two adjacent words (token or quoted-string), and
      between adjacent words and separators, without changing the
      interpretation of a field. At least one delimiter (LWS and/or
      separators) &MUST; exist between any two tokens (for the definition
      of "token" below), since they would otherwise be interpreted as a
      single token.
    </t>
  </list>
</t>
</section>

<section title="Basic Rules" anchor="basic.rules">
<x:anchor-alias value="OCTET"/>
<x:anchor-alias value="CHAR"/>
<x:anchor-alias value="UPALPHA"/>
<x:anchor-alias value="LOALPHA"/>
<x:anchor-alias value="ALPHA"/>
<x:anchor-alias value="DIGIT"/>
<x:anchor-alias value="CTL"/>
<x:anchor-alias value="CR"/>
<x:anchor-alias value="LF"/>
<x:anchor-alias value="SP"/>
<x:anchor-alias value="HT"/>
<x:anchor-alias value="CRLF"/>
<x:anchor-alias value="LWS"/>
<x:anchor-alias value="TEXT"/>
<x:anchor-alias value="HEX"/>
<x:anchor-alias value="token"/>
<x:anchor-alias value="separators"/>
<x:anchor-alias value="comment"/>
<x:anchor-alias value="ctext"/>
<x:anchor-alias value="quoted-string"/>
<x:anchor-alias value="qdtext"/>
<x:anchor-alias value="quoted-pair"/>
<t>
   The following rules are used throughout this specification to
   describe basic parsing constructs. The US-ASCII coded character set
   is defined by ANSI X3.4-1986 <xref target="USASCII"/>.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="OCTET"/><iref primary="true" item="Grammar" subitem="CHAR"/><iref primary="true" item="Grammar" subitem="UPALPHA"/><iref primary="true" item="Grammar" subitem="LOALPHA"/><iref primary="true" item="Grammar" subitem="ALPHA"/><iref primary="true" item="Grammar" subitem="DIGIT"/><iref primary="true" item="Grammar" subitem="CTL"/><iref primary="true" item="Grammar" subitem="CR"/><iref primary="true" item="Grammar" subitem="LF"/><iref primary="true" item="Grammar" subitem="SP"/><iref primary="true" item="Grammar" subitem="HT"/>
  OCTET          = &lt;any 8-bit sequence of data&gt;
  CHAR           = &lt;any US-ASCII character (octets 0 - 127)&gt;
  UPALPHA        = &lt;any US-ASCII uppercase letter "A".."Z"&gt;
  LOALPHA        = &lt;any US-ASCII lowercase letter "a".."z"&gt;
  ALPHA          = UPALPHA | LOALPHA
  DIGIT          = &lt;any US-ASCII digit "0".."9"&gt;
  CTL            = &lt;any US-ASCII control character
                   (octets 0 - 31) and DEL (127)&gt;
  CR             = &lt;US-ASCII CR, carriage return (13)&gt;
  LF             = &lt;US-ASCII LF, linefeed (10)&gt;
  SP             = &lt;US-ASCII SP, space (32)&gt;
  HT             = &lt;US-ASCII HT, horizontal-tab (9)&gt;
  &lt;"&gt;            = &lt;US-ASCII double-quote mark (34)&gt;
</artwork></figure>
<t>
   HTTP/1.1 defines the sequence CR LF as the end-of-line marker for all
   protocol elements except the entity-body (see <xref target="tolerant.applications"/> for
   tolerant applications). The end-of-line marker within an entity-body
   is defined by its associated media type, as described in &media-types;.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="CRLF"/>
  CRLF           = CR LF
</artwork></figure>
<t>
   HTTP/1.1 header field values can be folded onto multiple lines if the
   continuation line begins with a space or horizontal tab. All linear
   white space, including folding, has the same semantics as SP. A
   recipient &MAY; replace any linear white space with a single SP before
   interpreting the field value or forwarding the message downstream.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="LWS"/>
  LWS            = [CRLF] 1*( SP | HT )
</artwork></figure>
<t>
   The TEXT rule is only used for descriptive field contents and values
   that are not intended to be interpreted by the message parser. Words
   of *TEXT &MAY; contain characters from character sets other than ISO-8859-1
   <xref target="ISO-8859-1"/> only when encoded according to the rules of
   <xref target="RFC2047"/>.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="TEXT"/>
  TEXT           = &lt;any OCTET except CTLs,
                   but including LWS&gt;
</artwork></figure>
<t>
   A CRLF is allowed in the definition of TEXT only as part of a header
   field continuation. It is expected that the folding LWS will be
   replaced with a single SP before interpretation of the TEXT value.
</t>
<t>
   Hexadecimal numeric characters are used in several protocol elements.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="HEX"/>
  HEX            = "A" | "B" | "C" | "D" | "E" | "F"
                 | "a" | "b" | "c" | "d" | "e" | "f" | DIGIT
</artwork></figure>
<t>
   Many HTTP/1.1 header field values consist of words separated by LWS
   or special characters. These special characters &MUST; be in a quoted
   string to be used within a parameter value (as defined in
   <xref target="transfer.codings"/>).
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="token"/><iref primary="true" item="Grammar" subitem="separators"/>
  token          = 1*&lt;any CHAR except CTLs or separators&gt;
  separators     = "(" | ")" | "&lt;" | "&gt;" | "@"
                 | "," | ";" | ":" | "\" | &lt;"&gt;
                 | "/" | "[" | "]" | "?" | "="
                 | "{" | "}" | SP | HT
</artwork></figure>
<t>
   Comments can be included in some HTTP header fields by surrounding
   the comment text with parentheses. Comments are only allowed in
   fields containing "comment" as part of their field value definition.
   In all other fields, parentheses are considered part of the field
   value.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="comment"/><iref primary="true" item="Grammar" subitem="ctext"/>
  comment        = "(" *( ctext | quoted-pair | comment ) ")"
  ctext          = &lt;any TEXT excluding "(" and ")"&gt;
</artwork></figure>
<t>
   A string of text is parsed as a single word if it is quoted using
   double-quote marks.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="quoted-string"/><iref primary="true" item="Grammar" subitem="qdtext"/>
  quoted-string  = ( &lt;"&gt; *(qdtext | quoted-pair ) &lt;"&gt; )
  qdtext         = &lt;any TEXT excluding &lt;"> and "\">
</artwork></figure>
<t>
   The backslash character ("\") &MAY; be used as a single-character
   quoting mechanism only within quoted-string and comment constructs.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="quoted-pair"/>
  quoted-pair    = "\" CHAR
</artwork></figure>
</section>
</section>

<section title="Protocol Parameters" anchor="protocol.parameters">

<section title="HTTP Version" anchor="http.version">
<t>
   HTTP uses a "&lt;major&gt;.&lt;minor&gt;" numbering scheme to indicate versions
   of the protocol. The protocol versioning policy is intended to allow
   the sender to indicate the format of a message and its capacity for
   understanding further HTTP communication, rather than the features
   obtained via that communication. No change is made to the version
   number for the addition of message components which do not affect
   communication behavior or which only add to extensible field values.
   The &lt;minor&gt; number is incremented when the changes made to the
   protocol add features which do not change the general message parsing
   algorithm, but which may add to the message semantics and imply
   additional capabilities of the sender. The &lt;major&gt; number is
   incremented when the format of a message within the protocol is
   changed. See <xref target="RFC2145"/> for a fuller explanation.
</t>
<t>
   The version of an HTTP message is indicated by an HTTP-Version field
   in the first line of the message. HTTP-Version is case-sensitive.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="HTTP-Version"/>
  HTTP-Version   = "HTTP" "/" 1*DIGIT "." 1*DIGIT
</artwork></figure>
<t>
   Note that the major and minor numbers &MUST; be treated as separate
   integers and that each &MAY; be incremented higher than a single digit.
   Thus, HTTP/2.4 is a lower version than HTTP/2.13, which in turn is
   lower than HTTP/12.3. Leading zeros &MUST; be ignored by recipients and
   &MUST-NOT; be sent.
</t>
<t>
   An application that sends a request or response message that includes
   HTTP-Version of "HTTP/1.1" &MUST; be at least conditionally compliant
   with this specification. Applications that are at least conditionally
   compliant with this specification &SHOULD; use an HTTP-Version of
   "HTTP/1.1" in their messages, and &MUST; do so for any message that is
   not compatible with HTTP/1.0. For more details on when to send
   specific HTTP-Version values, see <xref target="RFC2145"/>.
</t>
<t>
   The HTTP version of an application is the highest HTTP version for
   which the application is at least conditionally compliant.
</t>
<t>
   Proxy and gateway applications need to be careful when forwarding
   messages in protocol versions different from that of the application.
   Since the protocol version indicates the protocol capability of the
   sender, a proxy/gateway &MUST-NOT; send a message with a version
   indicator which is greater than its actual version. If a higher
   version request is received, the proxy/gateway &MUST; either downgrade
   the request version, or respond with an error, or switch to tunnel
   behavior.
</t>
<t>
   Due to interoperability problems with HTTP/1.0 proxies discovered
   since the publication of <xref target="RFC2068"/>, caching proxies &MUST;, gateways
   &MAY;, and tunnels &MUST-NOT; upgrade the request to the highest version
   they support. The proxy/gateway's response to that request &MUST; be in
   the same major version as the request.
</t>
<t>
  <list>
    <t>
      <x:h>Note:</x:h> Converting between versions of HTTP may involve modification
      of header fields required or forbidden by the versions involved.
    </t>
  </list>
</t>
</section>

<section title="Uniform Resource Identifiers" anchor="uri">
<t>
   URIs have been known by many names: WWW addresses, Universal Document
   Identifiers, Universal Resource Identifiers <xref target="RFC1630"/>, and finally the
   combination of Uniform Resource Locators (URL) <xref target="RFC1738"/> and Names (URN)
   <xref target="RFC1737"/>. As far as HTTP is concerned, Uniform Resource Identifiers are
   simply formatted strings which identify--via name, location, or any
   other characteristic--a resource.
</t>

<section title="General Syntax" anchor="general.syntax">
<t>
   URIs in HTTP can be represented in absolute form or relative to some
   known base URI <xref target="RFC1808"/>, depending upon the context of their use. The two
   forms are differentiated by the fact that absolute URIs always begin
   with a scheme name followed by a colon. For definitive information on
   URL syntax and semantics, see "Uniform Resource Identifiers (URI):
   Generic Syntax and Semantics," <xref target="RFC2396"/> (which replaces <xref target="RFC1738"/>
   and <xref target="RFC1808"/>). This specification adopts the
   definitions of "URI-reference", "absoluteURI", "relativeURI", "port",
   "host", "abs_path", "rel_path", "query", and "authority" from that
   specification.
</t>
<t>
   The HTTP protocol does not place any a priori limit on the length of
   a URI. Servers &MUST; be able to handle the URI of any resource they
   serve, and &SHOULD; be able to handle URIs of unbounded length if they
   provide GET-based forms that could generate such URIs. A server
   &SHOULD; return 414 (Request-URI Too Long) status if a URI is longer
   than the server can handle (see &status-414;).
</t>
<t>
  <list>
    <t>
      <x:h>Note:</x:h> Servers ought to be cautious about depending on URI lengths
      above 255 bytes, because some older client or proxy
      implementations might not properly support these lengths.
    </t>
  </list>
</t>
</section>

<section title="http URL" anchor="http.url">
<t>
   The "http" scheme is used to locate network resources via the HTTP
   protocol. This section defines the scheme-specific syntax and
   semantics for http URLs.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="http_URL"/>
  http_URL = "http:" "//" host [ ":" port ] [ abs_path [ "?" query ]]
</artwork></figure>
<t>
   If the port is empty or not given, port 80 is assumed. The semantics
   are that the identified resource is located at the server listening
   for TCP connections on that port of that host, and the Request-URI
   for the resource is abs_path (<xref target="request-uri"/>). The use of IP addresses
   in URLs &SHOULD; be avoided whenever possible (see <xref target="RFC1900"/>). If
   the abs_path is not present in the URL, it &MUST; be given as "/" when
   used as a Request-URI for a resource (<xref target="request-uri"/>). If a proxy

   receives a host name which is not a fully qualified domain name, it
   &MAY; add its domain to the host name it received. If a proxy receives
   a fully qualified domain name, the proxy &MUST-NOT; change the host
   name.
</t>
</section>

<section title="URI Comparison" anchor="uri.comparison">
<t>
   When comparing two URIs to decide if they match or not, a client
   &SHOULD; use a case-sensitive octet-by-octet comparison of the entire
   URIs, with these exceptions:
  <list style="symbols">
    <t>A port that is empty or not given is equivalent to the default
        port for that URI-reference;</t>
    <t>Comparisons of host names &MUST; be case-insensitive;</t>
    <t>Comparisons of scheme names &MUST; be case-insensitive;</t>
    <t>An empty abs_path is equivalent to an abs_path of "/".</t>
  </list>
</t>
<t>
   Characters other than those in the "reserved" set (see
   <xref target="RFC2396"/>) are equivalent to their ""%" HEX HEX" encoding.
</t>
<t>
   For example, the following three URIs are equivalent:
</t>
<figure><artwork type="example">
   http://example.com:80/~smith/home.html
   http://EXAMPLE.com/%7Esmith/home.html
   http://EXAMPLE.com:/%7esmith/home.html
</artwork></figure>
</section>
</section>

<section title="Date/Time Formats" anchor="date.time.formats">
<section title="Full Date" anchor="full.date">
<t>
   HTTP applications have historically allowed three different formats
   for the representation of date/time stamps:
</t>
<figure><artwork type="example">
   Sun, 06 Nov 1994 08:49:37 GMT  ; RFC 822, updated by RFC 1123
   Sunday, 06-Nov-94 08:49:37 GMT ; obsolete RFC 850 format
   Sun Nov  6 08:49:37 1994       ; ANSI C's asctime() format
</artwork></figure>
<t>
   The first format is preferred as an Internet standard and represents
   a fixed-length subset of that defined by <xref target="RFC1123"/> (an update to
   <xref target="RFC822"/>). The other formats are described here only for
   compatibility with obsolete implementations.
   HTTP/1.1 clients and servers that parse the date value &MUST; accept
   all three formats (for compatibility with HTTP/1.0), though they &MUST;
   only generate the RFC 1123 format for representing HTTP-date values
   in header fields. See <xref target="tolerant.applications"/> for further information.
</t>
<t><list><t>
      <x:h>Note:</x:h> Recipients of date values are encouraged to be robust in
      accepting date values that may have been sent by non-HTTP
      applications, as is sometimes the case when retrieving or posting
      messages via proxies/gateways to SMTP or NNTP.
</t></list></t>
<t>
   All HTTP date/time stamps &MUST; be represented in Greenwich Mean Time
   (GMT), without exception. For the purposes of HTTP, GMT is exactly
   equal to UTC (Coordinated Universal Time). This is indicated in the
   first two formats by the inclusion of "GMT" as the three-letter
   abbreviation for time zone, and &MUST; be assumed when reading the
   asctime format. HTTP-date is case sensitive and &MUST-NOT; include
   additional LWS beyond that specifically included as SP in the
   grammar.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="HTTP-date"/><iref primary="true" item="Grammar" subitem="rfc1123-date"/><iref primary="true" item="Grammar" subitem="rfc850-date"/><iref primary="true" item="Grammar" subitem="asctime-date"/><iref primary="true" item="Grammar" subitem="date1"/><iref primary="true" item="Grammar" subitem="date2"/><iref primary="true" item="Grammar" subitem="date3"/><iref primary="true" item="Grammar" subitem="time"/><iref primary="true" item="Grammar" subitem="wkday"/><iref primary="true" item="Grammar" subitem="weekday"/><iref primary="true" item="Grammar" subitem="month"/>
  HTTP-date    = rfc1123-date | rfc850-date | asctime-date
  rfc1123-date = wkday "," SP date1 SP time SP "GMT"
  rfc850-date  = weekday "," SP date2 SP time SP "GMT"
  asctime-date = wkday SP date3 SP time SP 4DIGIT
  date1        = 2DIGIT SP month SP 4DIGIT
                 ; day month year (e.g., 02 Jun 1982)
  date2        = 2DIGIT "-" month "-" 2DIGIT
                 ; day-month-year (e.g., 02-Jun-82)
  date3        = month SP ( 2DIGIT | ( SP 1DIGIT ))
                 ; month day (e.g., Jun  2)
  time         = 2DIGIT ":" 2DIGIT ":" 2DIGIT
                 ; 00:00:00 - 23:59:59
  wkday        = "Mon" | "Tue" | "Wed"
               | "Thu" | "Fri" | "Sat" | "Sun"
  weekday      = "Monday" | "Tuesday" | "Wednesday"
               | "Thursday" | "Friday" | "Saturday" | "Sunday"
  month        = "Jan" | "Feb" | "Mar" | "Apr"
               | "May" | "Jun" | "Jul" | "Aug"
               | "Sep" | "Oct" | "Nov" | "Dec"
</artwork></figure>
<t>
      <x:h>Note:</x:h> HTTP requirements for the date/time stamp format apply only
      to their usage within the protocol stream. Clients and servers are
      not required to use these formats for user presentation, request
      logging, etc.
</t>
</section>
</section>

<section title="Transfer Codings" anchor="transfer.codings">
<t>
   Transfer-coding values are used to indicate an encoding
   transformation that has been, can be, or may need to be applied to an
   entity-body in order to ensure "safe transport" through the network.
   This differs from a content coding in that the transfer-coding is a
   property of the message, not of the original entity.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="transfer-coding"/><iref primary="true" item="Grammar" subitem="transfer-extension"/>
  transfer-coding         = "chunked" | transfer-extension
  transfer-extension      = token *( ";" parameter )
</artwork></figure>
<t>
   Parameters are in  the form of attribute/value pairs.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="parameter"/><iref primary="true" item="Grammar" subitem="attribute"/><iref primary="true" item="Grammar" subitem="value"/>
  parameter               = attribute "=" value
  attribute               = token
  value                   = token | quoted-string
</artwork></figure>
<t>
   All transfer-coding values are case-insensitive. HTTP/1.1 uses
   transfer-coding values in the TE header field (<xref target="header.te"/>) and in
   the Transfer-Encoding header field (<xref target="header.transfer-encoding"/>).
</t>
<t>
   Whenever a transfer-coding is applied to a message-body, the set of
   transfer-codings &MUST; include "chunked", unless the message is
   terminated by closing the connection. When the "chunked" transfer-coding
   is used, it &MUST; be the last transfer-coding applied to the
   message-body. The "chunked" transfer-coding &MUST-NOT; be applied more
   than once to a message-body. These rules allow the recipient to
   determine the transfer-length of the message (<xref target="message.length"/>).
</t>
<t>
   Transfer-codings are analogous to the Content-Transfer-Encoding
   values of MIME <xref target="RFC2045"/>, which were designed to enable safe transport of
   binary data over a 7-bit transport service. However, safe transport
   has a different focus for an 8bit-clean transfer protocol. In HTTP,
   the only unsafe characteristic of message-bodies is the difficulty in
   determining the exact body length (<xref target="message.length"/>), or the desire to
   encrypt data over a shared transport.
</t>
<t>
   The Internet Assigned Numbers Authority (IANA) acts as a registry for
   transfer-coding value tokens. Initially, the registry contains the
   following tokens: "chunked" (<xref target="chunked.transfer.encoding"/>),
   "gzip", "compress", and "deflate" (&content-codings;).
</t>
<t>
   New transfer-coding value tokens &SHOULD; be registered in the same way
   as new content-coding value tokens (&content-codings;).
</t>
<t>
   A server which receives an entity-body with a transfer-coding it does
   not understand &SHOULD; return 501 (Not Implemented), and close the
   connection. A server &MUST-NOT; send transfer-codings to an HTTP/1.0
   client.
</t>

<section title="Chunked Transfer Coding" anchor="chunked.transfer.encoding">
<t>
   The chunked encoding modifies the body of a message in order to
   transfer it as a series of chunks, each with its own size indicator,
   followed by an &OPTIONAL; trailer containing entity-header fields. This
   allows dynamically produced content to be transferred along with the
   information necessary for the recipient to verify that it has
   received the full message.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Chunked-Body"/><iref primary="true" item="Grammar" subitem="chunk"/><iref primary="true" item="Grammar" subitem="chunk-size"/><iref primary="true" item="Grammar" subitem="last-chunk"/><iref primary="true" item="Grammar" subitem="chunk-extension"/><iref primary="true" item="Grammar" subitem="chunk-ext-name"/><iref primary="true" item="Grammar" subitem="chunk-ext-val"/><iref primary="true" item="Grammar" subitem="chunk-data"/><iref primary="true" item="Grammar" subitem="trailer"/>
  Chunked-Body   = *chunk
                   last-chunk
                   trailer
                   CRLF
  
  chunk          = chunk-size [ chunk-extension ] CRLF
                   chunk-data CRLF
  chunk-size     = 1*HEX
  last-chunk     = 1*("0") [ chunk-extension ] CRLF
  
  chunk-extension= *( ";" chunk-ext-name [ "=" chunk-ext-val ] )
  chunk-ext-name = token
  chunk-ext-val  = token | quoted-string
  chunk-data     = chunk-size(OCTET)
  trailer        = *(entity-header CRLF)
</artwork></figure>
<t>
   The chunk-size field is a string of hex digits indicating the size of
   the chunk-data in octets. The chunked encoding is ended by any chunk whose size is
   zero, followed by the trailer, which is terminated by an empty line.
</t>
<t>
   The trailer allows the sender to include additional HTTP header
   fields at the end of the message. The Trailer header field can be
   used to indicate which header fields are included in a trailer (see
   <xref target="header.trailer"/>).
</t>
<t>
   A server using chunked transfer-coding in a response &MUST-NOT; use the
   trailer for any header fields unless at least one of the following is
   true:
  <list style="numbers">
    <t>the request included a TE header field that indicates "trailers" is
     acceptable in the transfer-coding of the  response, as described in
     <xref target="header.te"/>; or,</t>

    <t>the server is the origin server for the response, the trailer
     fields consist entirely of optional metadata, and the recipient
     could use the message (in a manner acceptable to the origin server)
     without receiving this metadata.  In other words, the origin server
     is willing to accept the possibility that the trailer fields might
     be silently discarded along the path to the client.</t>
  </list>
</t>
<t>
   This requirement prevents an interoperability failure when the
   message is being received by an HTTP/1.1 (or later) proxy and
   forwarded to an HTTP/1.0 recipient. It avoids a situation where
   compliance with the protocol would have necessitated a possibly
   infinite buffer on the proxy.
</t>
<t>
   A process for decoding the "chunked" transfer-coding
   can be represented in pseudo-code as:
</t>
<figure><artwork type="code">
    length := 0
    read chunk-size, chunk-extension (if any) and CRLF
    while (chunk-size &gt; 0) {
       read chunk-data and CRLF
       append chunk-data to entity-body
       length := length + chunk-size
       read chunk-size and CRLF
    }
    read entity-header
    while (entity-header not empty) {
       append entity-header to existing header fields
       read entity-header
    }
    Content-Length := length
    Remove "chunked" from Transfer-Encoding
</artwork></figure>
<t>
   All HTTP/1.1 applications &MUST; be able to receive and decode the
   "chunked" transfer-coding, and &MUST; ignore chunk-extension extensions
   they do not understand.
</t>
</section>
</section>

</section>

<section title="HTTP Message" anchor="http.message">

<section title="Message Types" anchor="message.types">
<t>
   HTTP messages consist of requests from client to server and responses
   from server to client.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="HTTP-message"/>
  HTTP-message   = Request | Response     ; HTTP/1.1 messages
</artwork></figure>
<t>
   Request (<xref target="request"/>) and Response (<xref target="response"/>) messages use the generic
   message format of <xref target="RFC2822"/> for transferring entities (the payload
   of the message). Both types of message consist of a start-line, zero
   or more header fields (also known as "headers"), an empty line (i.e.,
   a line with nothing preceding the CRLF) indicating the end of the
   header fields, and possibly a message-body.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="generic-message"/><iref primary="true" item="Grammar" subitem="start-line"/>
  generic-message = start-line
                    *(message-header CRLF)
                    CRLF
                    [ message-body ]
  start-line      = Request-Line | Status-Line
</artwork></figure>
<t>
   In the interest of robustness, servers &SHOULD; ignore any empty
   line(s) received where a Request-Line is expected. In other words, if
   the server is reading the protocol stream at the beginning of a
   message and receives a CRLF first, it should ignore the CRLF.
</t>
<t>
   Certain buggy HTTP/1.0 client implementations generate extra CRLF's
   after a POST request. To restate what is explicitly forbidden by the
   BNF, an HTTP/1.1 client &MUST-NOT; preface or follow a request with an
   extra CRLF.
</t>
</section>

<section title="Message Headers" anchor="message.headers">
<t>
   HTTP header fields, which include general-header (<xref target="general.header.fields"/>),
   request-header (&request-header-fields;), response-header (&response-header-fields;), and
   entity-header (&entity-header-fields;) fields, follow the same generic format as
   that given in <xref target="RFC2822" x:fmt="of" x:sec="2.1"/>. Each header field consists
   of a name followed by a colon (":") and the field value. Field names
   are case-insensitive. The field value &MAY; be preceded by any amount
   of LWS, though a single SP is preferred. Header fields can be
   extended over multiple lines by preceding each extra line with at
   least one SP or HT. Applications ought to follow "common form", where
   one is known or indicated, when generating HTTP constructs, since
   there might exist some implementations that fail to accept anything
   beyond the common forms.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="message-header"/><iref primary="true" item="Grammar" subitem="field-name"/><iref primary="true" item="Grammar" subitem="field-value"/><iref primary="true" item="Grammar" subitem="field-content"/>
  message-header = field-name ":" [ field-value ]
  field-name     = token
  field-value    = *( field-content | LWS )
  field-content  = &lt;the OCTETs making up the field-value
                   and consisting of either *TEXT or combinations
                   of token, separators, and quoted-string&gt;
</artwork></figure>
<t>
   The field-content does not include any leading or trailing LWS:
   linear white space occurring before the first non-whitespace
   character of the field-value or after the last non-whitespace
   character of the field-value. Such leading or trailing LWS &MAY; be
   removed without changing the semantics of the field value. Any LWS
   that occurs between field-content &MAY; be replaced with a single SP
   before interpreting the field value or forwarding the message
   downstream.
</t>
<t>
   The order in which header fields with differing field names are
   received is not significant. However, it is "good practice" to send
   general-header fields first, followed by request-header or response-header
   fields, and ending with the entity-header fields.
</t>
<t>
   Multiple message-header fields with the same field-name &MAY; be
   present in a message if and only if the entire field-value for that
   header field is defined as a comma-separated list [i.e., #(values)].
   It &MUST; be possible to combine the multiple header fields into one
   "field-name: field-value" pair, without changing the semantics of the
   message, by appending each subsequent field-value to the first, each
   separated by a comma. The order in which header fields with the same
   field-name are received is therefore significant to the
   interpretation of the combined field value, and thus a proxy &MUST-NOT;
   change the order of these field values when a message is forwarded.
</t>
</section>

<section title="Message Body" anchor="message.body">
<t>
   The message-body (if any) of an HTTP message is used to carry the
   entity-body associated with the request or response. The message-body
   differs from the entity-body only when a transfer-coding has been
   applied, as indicated by the Transfer-Encoding header field (<xref target="header.transfer-encoding"/>).
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="message-body"/>
  message-body = entity-body
               | &lt;entity-body encoded as per Transfer-Encoding&gt;
</artwork></figure>
<t>
   Transfer-Encoding &MUST; be used to indicate any transfer-codings
   applied by an application to ensure safe and proper transfer of the
   message. Transfer-Encoding is a property of the message, not of the
   entity, and thus &MAY; be added or removed by any application along the
   request/response chain. (However, <xref target="transfer.codings"/> places restrictions on
   when certain transfer-codings may be used.)
</t>
<t>
   The rules for when a message-body is allowed in a message differ for
   requests and responses.
</t>
<t>
   The presence of a message-body in a request is signaled by the
   inclusion of a Content-Length or Transfer-Encoding header field in
   the request's message-headers. A message-body &MUST-NOT; be included in
   a request if the specification of the request method (&method;)
   does not allow sending an entity-body in requests. A server &SHOULD;
   read and forward a message-body on any request; if the request method
   does not include defined semantics for an entity-body, then the
   message-body &SHOULD; be ignored when handling the request.
</t>
<t>
   For response messages, whether or not a message-body is included with
   a message is dependent on both the request method and the response
   status code (<xref target="status.code.and.reason.phrase"/>). All responses to the HEAD request method
   &MUST-NOT; include a message-body, even though the presence of entity-header
   fields might lead one to believe they do. All 1xx
   (informational), 204 (No Content), and 304 (Not Modified) responses
   &MUST-NOT; include a message-body. All other responses do include a
   message-body, although it &MAY; be of zero length.
</t>
</section>

<section title="Message Length" anchor="message.length">
<t>
   The transfer-length of a message is the length of the message-body as
   it appears in the message; that is, after any transfer-codings have
   been applied. When a message-body is included with a message, the
   transfer-length of that body is determined by one of the following
   (in order of precedence):
</t>
<t>
  <list style="numbers">
    <x:lt><t>
     Any response message which "&MUST-NOT;" include a message-body (such
     as the 1xx, 204, and 304 responses and any response to a HEAD
     request) is always terminated by the first empty line after the
     header fields, regardless of the entity-header fields present in
     the message.
    </t></x:lt>
    <x:lt><t>
     If a Transfer-Encoding header field (<xref target="header.transfer-encoding"/>)
     is present, then the transfer-length is
     defined by use of the "chunked" transfer-coding (<xref target="transfer.codings"/>),
     unless the message is terminated by closing the connection.
    </t></x:lt>
    <x:lt><t>
     If a Content-Length header field (<xref target="header.content-length"/>) is present, its
     decimal value in OCTETs represents both the entity-length and the
     transfer-length. The Content-Length header field &MUST-NOT; be sent
     if these two lengths are different (i.e., if a Transfer-Encoding
     header field is present). If a message is received with both a
     Transfer-Encoding header field and a Content-Length header field,
     the latter &MUST; be ignored.
    </t></x:lt>
    <x:lt><t>
     If the message uses the media type "multipart/byteranges", and the
     transfer-length is not otherwise specified, then this self-delimiting
     media type defines the transfer-length. This media type
     &MUST-NOT; be used unless the sender knows that the recipient can parse
     it; the presence in a request of a Range header with multiple byte-range
     specifiers from a 1.1 client implies that the client can parse
     multipart/byteranges responses.
    <list style="empty"><t>
       A range header might be forwarded by a 1.0 proxy that does not
       understand multipart/byteranges; in this case the server &MUST;
       delimit the message using methods defined in items 1, 3 or 5 of
       this section.
    </t></list>
    </t></x:lt>
    <x:lt><t>
     By the server closing the connection. (Closing the connection
     cannot be used to indicate the end of a request body, since that
     would leave no possibility for the server to send back a response.)
    </t></x:lt>
  </list>
</t>
<t>
   For compatibility with HTTP/1.0 applications, HTTP/1.1 requests
   containing a message-body &MUST; include a valid Content-Length header
   field unless the server is known to be HTTP/1.1 compliant. If a
   request contains a message-body and a Content-Length is not given,
   the server &SHOULD; respond with 400 (Bad Request) if it cannot
   determine the length of the message, or with 411 (Length Required) if
   it wishes to insist on receiving a valid Content-Length.
</t>
<t>
   All HTTP/1.1 applications that receive entities &MUST; accept the
   "chunked" transfer-coding (<xref target="transfer.codings"/>), thus allowing this mechanism
   to be used for messages when the message length cannot be determined
   in advance.
</t>
<t>
   Messages &MUST-NOT; include both a Content-Length header field and a
   transfer-coding. If the message does include a
   transfer-coding, the Content-Length &MUST; be ignored.
</t>
<t>
   When a Content-Length is given in a message where a message-body is
   allowed, its field value &MUST; exactly match the number of OCTETs in
   the message-body. HTTP/1.1 user agents &MUST; notify the user when an
   invalid length is received and detected.
</t>
</section>

<section title="General Header Fields" anchor="general.header.fields">
<t>
   There are a few header fields which have general applicability for
   both request and response messages, but which do not apply to the
   entity being transferred. These header fields apply only to the
   message being transmitted.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="general-header"/>
  general-header = Cache-Control            ; &header-cache-control;
                 | Connection               ; <xref target="header.connection"/>
                 | Date                     ; <xref target="header.date"/>
                 | Pragma                   ; &header-pragma;
                 | Trailer                  ; <xref target="header.trailer"/>
                 | Transfer-Encoding        ; <xref target="header.transfer-encoding"/>
                 | Upgrade                  ; <xref target="header.upgrade"/>
                 | Via                      ; <xref target="header.via"/>
                 | Warning                  ; &header-warning;
</artwork></figure>
<t>
   General-header field names can be extended reliably only in
   combination with a change in the protocol version. However, new or
   experimental header fields may be given the semantics of general
   header fields if all parties in the communication recognize them to
   be general-header fields. Unrecognized header fields are treated as
   entity-header fields.
</t>
</section>
</section>

<section title="Request" anchor="request">
<t>
   A request message from a client to a server includes, within the
   first line of that message, the method to be applied to the resource,
   the identifier of the resource, and the protocol version in use.
</t>
<!--                 Host                      ; should be moved here eventually -->
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Request"/>
  Request       = Request-Line              ; <xref target="request-line"/>
                  *(( general-header        ; <xref target="general.header.fields"/>
                   | request-header         ; &request-header-fields;
                   | entity-header ) CRLF)  ; &entity-header-fields;
                  CRLF
                  [ message-body ]          ; <xref target="message.body"/>
</artwork></figure>

<section title="Request-Line" anchor="request-line">
<t>
   The Request-Line begins with a method token, followed by the
   Request-URI and the protocol version, and ending with CRLF. The
   elements are separated by SP characters. No CR or LF is allowed
   except in the final CRLF sequence.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Request-Line"/>
  Request-Line   = Method SP Request-URI SP HTTP-Version CRLF
</artwork></figure>

<section title="Method" anchor="method">
<t>
   The Method  token indicates the method to be performed on the
   resource identified by the Request-URI. The method is case-sensitive.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Method"/><iref primary="true" item="Grammar" subitem="extension-method"/>
  Method         = token
</artwork></figure>
</section>

<section title="Request-URI" anchor="request-uri">
<t>
   The Request-URI is a Uniform Resource Identifier (<xref target="uri"/>) and
   identifies the resource upon which to apply the request.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Request-URI"/>
  Request-URI    = "*"
                 | absoluteURI
                 | ( abs_path [ "?" query ] )
                 | authority
</artwork></figure>
<t>
   The four options for Request-URI are dependent on the nature of the
   request. The asterisk "*" means that the request does not apply to a
   particular resource, but to the server itself, and is only allowed
   when the method used does not necessarily apply to a resource. One
   example would be
</t>
<figure><artwork type="example">
    OPTIONS * HTTP/1.1
</artwork></figure>
<t>
   The absoluteURI form is &REQUIRED; when the request is being made to a
   proxy. The proxy is requested to forward the request or service it
   from a valid cache, and return the response. Note that the proxy &MAY;
   forward the request on to another proxy or directly to the server
   specified by the absoluteURI. In order to avoid request loops, a
   proxy &MUST; be able to recognize all of its server names, including
   any aliases, local variations, and the numeric IP address. An example
   Request-Line would be:
</t>
<figure><artwork type="example">
    GET http://www.example.org/pub/WWW/TheProject.html HTTP/1.1
</artwork></figure>
<t>
   To allow for transition to absoluteURIs in all requests in future
   versions of HTTP, all HTTP/1.1 servers &MUST; accept the absoluteURI
   form in requests, even though HTTP/1.1 clients will only generate
   them in requests to proxies.
</t>
<t>
   The authority form is only used by the CONNECT method (&CONNECT;).
</t>
<t>
   The most common form of Request-URI is that used to identify a
   resource on an origin server or gateway. In this case the absolute
   path of the URI &MUST; be transmitted (see <xref target="general.syntax"/>, abs_path) as
   the Request-URI, and the network location of the URI (authority) &MUST;
   be transmitted in a Host header field. For example, a client wishing
   to retrieve the resource above directly from the origin server would
   create a TCP connection to port 80 of the host "www.example.org" and send
   the lines:
</t>
<figure><artwork type="example">
    GET /pub/WWW/TheProject.html HTTP/1.1
    Host: www.example.org
</artwork></figure>
<t>
   followed by the remainder of the Request. Note that the absolute path
   cannot be empty; if none is present in the original URI, it &MUST; be
   given as "/" (the server root).
</t>
<t>
   The Request-URI is transmitted in the format specified in 
   <xref target="general.syntax"/>. If the Request-URI is encoded using the "% HEX HEX" encoding
   <xref target="RFC2396"/>, the origin server &MUST; decode the Request-URI in order to
   properly interpret the request. Servers &SHOULD; respond to invalid
   Request-URIs with an appropriate status code.
</t>
<t>
   A transparent proxy &MUST-NOT; rewrite the "abs_path" part of the
   received Request-URI when forwarding it to the next inbound server,
   except as noted above to replace a null abs_path with "/".
</t>
<t>
  <list><t>
      <x:h>Note:</x:h> The "no rewrite" rule prevents the proxy from changing the
      meaning of the request when the origin server is improperly using
      a non-reserved URI character for a reserved purpose.  Implementors
      should be aware that some pre-HTTP/1.1 proxies have been known to
      rewrite the Request-URI.
  </t></list>
</t>
</section>
</section>

<section title="The Resource Identified by a Request" anchor="the.resource.identified.by.a.request">
<t>
   The exact resource identified by an Internet request is determined by
   examining both the Request-URI and the Host header field.
</t>
<t>
   An origin server that does not allow resources to differ by the
   requested host &MAY; ignore the Host header field value when
   determining the resource identified by an HTTP/1.1 request. (But see
   <xref target="changes.to.simplify.multi-homed.web.servers.and.conserve.ip.addresses"/>
   for other requirements on Host support in HTTP/1.1.)
</t>
<t>
   An origin server that does differentiate resources based on the host
   requested (sometimes referred to as virtual hosts or vanity host
   names) &MUST; use the following rules for determining the requested
   resource on an HTTP/1.1 request:
  <list style="numbers">
    <t>If Request-URI is an absoluteURI, the host is part of the
     Request-URI. Any Host header field value in the request &MUST; be
     ignored.</t>
    <t>If the Request-URI is not an absoluteURI, and the request includes
     a Host header field, the host is determined by the Host header
     field value.</t>
    <t>If the host as determined by rule 1 or 2 is not a valid host on
     the server, the response &MUST; be a 400 (Bad Request) error message.</t>
  </list>
</t>
<t>
   Recipients of an HTTP/1.0 request that lacks a Host header field &MAY;
   attempt to use heuristics (e.g., examination of the URI path for
   something unique to a particular host) in order to determine what
   exact resource is being requested.
</t>
</section>

</section>


<section title="Response" anchor="response">
<t>
   After receiving and interpreting a request message, a server responds
   with an HTTP response message.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Response"/>
  Response      = Status-Line               ; <xref target="status-line"/>
                  *(( general-header        ; <xref target="general.header.fields"/>
                   | response-header        ; &response-header-fields;
                   | entity-header ) CRLF)  ; &entity-header-fields;
                  CRLF
                  [ message-body ]          ; <xref target="message.body"/>
</artwork></figure>

<section title="Status-Line" anchor="status-line">
<t>
   The first line of a Response message is the Status-Line, consisting
   of the protocol version followed by a numeric status code and its
   associated textual phrase, with each element separated by SP
   characters. No CR or LF is allowed except in the final CRLF sequence.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Status-Line"/>
  Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF
</artwork></figure>

<section title="Status Code and Reason Phrase" anchor="status.code.and.reason.phrase">
<t>
   The Status-Code element is a 3-digit integer result code of the
   attempt to understand and satisfy the request. These codes are fully
   defined in &status-codes;. The Reason-Phrase is intended to give a short
   textual description of the Status-Code. The Status-Code is intended
   for use by automata and the Reason-Phrase is intended for the human
   user. The client is not required to examine or display the Reason-Phrase.
</t>
<t>
   The first digit of the Status-Code defines the class of response. The
   last two digits do not have any categorization role. There are 5
   values for the first digit:
  <list style="symbols">
    <t>
      1xx: Informational - Request received, continuing process
    </t>
    <t>
      2xx: Success - The action was successfully received,
        understood, and accepted
    </t>
    <t>
      3xx: Redirection - Further action must be taken in order to
        complete the request
    </t>
    <t>
      4xx: Client Error - The request contains bad syntax or cannot
        be fulfilled
    </t>
    <t>
      5xx: Server Error - The server failed to fulfill an apparently
        valid request
    </t>
  </list>
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Status-Code"/><iref primary="true" item="Grammar" subitem="extension-code"/><iref primary="true" item="Grammar" subitem="Reason-Phrase"/>
  Status-Code    = 3DIGIT
  Reason-Phrase  = *&lt;TEXT, excluding CR, LF&gt;
</artwork></figure>
</section>
</section>

</section>


<section title="Connections" anchor="connections">

<section title="Persistent Connections" anchor="persistent.connections">

<section title="Purpose" anchor="persistent.purpose">
<t>
   Prior to persistent connections, a separate TCP connection was
   established to fetch each URL, increasing the load on HTTP servers
   and causing congestion on the Internet. The use of inline images and
   other associated data often require a client to make multiple
   requests of the same server in a short amount of time. Analysis of
   these performance problems and results from a prototype
   implementation are available <xref target="Pad1995"/> <xref target="Spe"/>. Implementation experience and
   measurements of actual HTTP/1.1 (<xref target="RFC2068" x:fmt="none">RFC 2068</xref>) implementations show good
   results <xref target="Nie1997"/>. Alternatives have also been explored, for example,
   T/TCP <xref target="Tou1998"/>.
</t>
<t>
   Persistent HTTP connections have a number of advantages:
  <list style="symbols">
      <t>
        By opening and closing fewer TCP connections, CPU time is saved
        in routers and hosts (clients, servers, proxies, gateways,
        tunnels, or caches), and memory used for TCP protocol control
        blocks can be saved in hosts.
      </t>
      <t>
        HTTP requests and responses can be pipelined on a connection.
        Pipelining allows a client to make multiple requests without
        waiting for each response, allowing a single TCP connection to
        be used much more efficiently, with much lower elapsed time.
      </t>
      <t>
        Network congestion is reduced by reducing the number of packets
        caused by TCP opens, and by allowing TCP sufficient time to
        determine the congestion state of the network.
      </t>
      <t>
        Latency on subsequent requests is reduced since there is no time
        spent in TCP's connection opening handshake.
      </t>
      <t>
        HTTP can evolve more gracefully, since errors can be reported
        without the penalty of closing the TCP connection. Clients using
        future versions of HTTP might optimistically try a new feature,
        but if communicating with an older server, retry with old
        semantics after an error is reported.
      </t>
    </list>
</t>
<t>
   HTTP implementations &SHOULD; implement persistent connections.
</t>
</section>

<section title="Overall Operation" anchor="persistent.overall">
<t>
   A significant difference between HTTP/1.1 and earlier versions of
   HTTP is that persistent connections are the default behavior of any
   HTTP connection. That is, unless otherwise indicated, the client
   &SHOULD; assume that the server will maintain a persistent connection,
   even after error responses from the server.
</t>
<t>
   Persistent connections provide a mechanism by which a client and a
   server can signal the close of a TCP connection. This signaling takes
   place using the Connection header field (<xref target="header.connection"/>). Once a close
   has been signaled, the client &MUST-NOT; send any more requests on that
   connection.
</t>

<section title="Negotiation" anchor="persistent.negotiation">
<t>
   An HTTP/1.1 server &MAY; assume that a HTTP/1.1 client intends to
   maintain a persistent connection unless a Connection header including
   the connection-token "close" was sent in the request. If the server
   chooses to close the connection immediately after sending the
   response, it &SHOULD; send a Connection header including the
   connection-token close.
</t>
<t>
   An HTTP/1.1 client &MAY; expect a connection to remain open, but would
   decide to keep it open based on whether the response from a server
   contains a Connection header with the connection-token close. In case
   the client does not want to maintain a connection for more than that
   request, it &SHOULD; send a Connection header including the
   connection-token close.
</t>
<t>
   If either the client or the server sends the close token in the
   Connection header, that request becomes the last one for the
   connection.
</t>
<t>
   Clients and servers &SHOULD-NOT;  assume that a persistent connection is
   maintained for HTTP versions less than 1.1 unless it is explicitly
   signaled. See <xref target="compatibility.with.http.1.0.persistent.connections"/> for more information on backward
   compatibility with HTTP/1.0 clients.
</t>
<t>
   In order to remain persistent, all messages on the connection &MUST;
   have a self-defined message length (i.e., one not defined by closure
   of the connection), as described in <xref target="message.length"/>.
</t>
</section>

<section title="Pipelining" anchor="pipelining">
<t>
   A client that supports persistent connections &MAY; "pipeline" its
   requests (i.e., send multiple requests without waiting for each
   response). A server &MUST; send its responses to those requests in the
   same order that the requests were received.
</t>
<t>
   Clients which assume persistent connections and pipeline immediately
   after connection establishment &SHOULD; be prepared to retry their
   connection if the first pipelined attempt fails. If a client does
   such a retry, it &MUST-NOT; pipeline before it knows the connection is
   persistent. Clients &MUST; also be prepared to resend their requests if
   the server closes the connection before sending all of the
   corresponding responses.
</t>
<t>
   Clients &SHOULD-NOT;  pipeline requests using non-idempotent methods or
   non-idempotent sequences of methods (see &idempotent-methods;). Otherwise, a
   premature termination of the transport connection could lead to
   indeterminate results. A client wishing to send a non-idempotent
   request &SHOULD; wait to send that request until it has received the
   response status for the previous request.
</t>
</section>
</section>

<section title="Proxy Servers" anchor="persistent.proxy">
<t>
   It is especially important that proxies correctly implement the
   properties of the Connection header field as specified in <xref target="header.connection"/>.
</t>
<t>
   The proxy server &MUST; signal persistent connections separately with
   its clients and the origin servers (or other proxy servers) that it
   connects to. Each persistent connection applies to only one transport
   link.
</t>
<t>
   A proxy server &MUST-NOT; establish a HTTP/1.1 persistent connection
   with an HTTP/1.0 client (but see <xref target="RFC2068"/> for information and
   discussion of the problems with the Keep-Alive header implemented by
   many HTTP/1.0 clients).
</t>
</section>

<section title="Practical Considerations" anchor="persistent.practical">
<t>
   Servers will usually have some time-out value beyond which they will
   no longer maintain an inactive connection. Proxy servers might make
   this a higher value since it is likely that the client will be making
   more connections through the same server. The use of persistent
   connections places no requirements on the length (or existence) of
   this time-out for either the client or the server.
</t>
<t>
   When a client or server wishes to time-out it &SHOULD; issue a graceful
   close on the transport connection. Clients and servers &SHOULD; both
   constantly watch for the other side of the transport close, and
   respond to it as appropriate. If a client or server does not detect
   the other side's close promptly it could cause unnecessary resource
   drain on the network.
</t>
<t>
   A client, server, or proxy &MAY; close the transport connection at any
   time. For example, a client might have started to send a new request
   at the same time that the server has decided to close the "idle"
   connection. From the server's point of view, the connection is being
   closed while it was idle, but from the client's point of view, a
   request is in progress.
</t>
<t>
   This means that clients, servers, and proxies &MUST; be able to recover
   from asynchronous close events. Client software &SHOULD; reopen the
   transport connection and retransmit the aborted sequence of requests
   without user interaction so long as the request sequence is
   idempotent (see &idempotent-methods;). Non-idempotent methods or sequences
   &MUST-NOT; be automatically retried, although user agents &MAY; offer a
   human operator the choice of retrying the request(s). Confirmation by
   user-agent software with semantic understanding of the application
   &MAY; substitute for user confirmation. The automatic retry &SHOULD-NOT; 
   be repeated if the second sequence of requests fails.
</t>
<t>
   Servers &SHOULD; always respond to at least one request per connection,
   if at all possible. Servers &SHOULD-NOT;  close a connection in the
   middle of transmitting a response, unless a network or client failure
   is suspected.
</t>
<t>
   Clients that use persistent connections &SHOULD; limit the number of
   simultaneous connections that they maintain to a given server. A
   single-user client &SHOULD-NOT; maintain more than 2 connections with
   any server or proxy. A proxy &SHOULD; use up to 2*N connections to
   another server or proxy, where N is the number of simultaneously
   active users. These guidelines are intended to improve HTTP response
   times and avoid congestion.
</t>
</section>
</section>

<section title="Message Transmission Requirements" anchor="message.transmission.requirements">

<section title="Persistent Connections and Flow Control" anchor="persistent.flow">
<t>
   HTTP/1.1 servers &SHOULD; maintain persistent connections and use TCP's
   flow control mechanisms to resolve temporary overloads, rather than
   terminating connections with the expectation that clients will retry.
   The latter technique can exacerbate network congestion.
</t>
</section>

<section title="Monitoring Connections for Error Status Messages" anchor="persistent.monitor">
<t>
   An HTTP/1.1 (or later) client sending a message-body &SHOULD; monitor
   the network connection for an error status while it is transmitting
   the request. If the client sees an error status, it &SHOULD;
   immediately cease transmitting the body. If the body is being sent
   using a "chunked" encoding (<xref target="transfer.codings"/>), a zero length chunk and
   empty trailer &MAY; be used to prematurely mark the end of the message.
   If the body was preceded by a Content-Length header, the client &MUST;
   close the connection.
</t>
</section>

<section title="Use of the 100 (Continue) Status" anchor="use.of.the.100.status">
<t>
   The purpose of the 100 (Continue) status (see &status-100;) is to
   allow a client that is sending a request message with a request body
   to determine if the origin server is willing to accept the request
   (based on the request headers) before the client sends the request
   body. In some cases, it might either be inappropriate or highly
   inefficient for the client to send the body if the server will reject
   the message without looking at the body.
</t>
<t>
   Requirements for HTTP/1.1 clients:
  <list style="symbols">
    <t>
        If a client will wait for a 100 (Continue) response before
        sending the request body, it &MUST; send an Expect request-header
        field (&header-expect;) with the "100-continue" expectation.
    </t>
    <t>
        A client &MUST-NOT; send an Expect request-header field (&header-expect;)
        with the "100-continue" expectation if it does not intend
        to send a request body.
    </t>
  </list>
</t>
<t>
   Because of the presence of older implementations, the protocol allows
   ambiguous situations in which a client may send "Expect: 100-continue"
   without receiving either a 417 (Expectation Failed) status
   or a 100 (Continue) status. Therefore, when a client sends this
   header field to an origin server (possibly via a proxy) from which it
   has never seen a 100 (Continue) status, the client &SHOULD-NOT;  wait
   for an indefinite period before sending the request body.
</t>
<t>
   Requirements for HTTP/1.1 origin servers:
  <list style="symbols">
    <t> Upon receiving a request which includes an Expect request-header
        field with the "100-continue" expectation, an origin server &MUST;
        either respond with 100 (Continue) status and continue to read
        from the input stream, or respond with a final status code. The
        origin server &MUST-NOT; wait for the request body before sending
        the 100 (Continue) response. If it responds with a final status
        code, it &MAY; close the transport connection or it &MAY; continue
        to read and discard the rest of the request.  It &MUST-NOT;
        perform the requested method if it returns a final status code.
    </t>
    <t> An origin server &SHOULD-NOT;  send a 100 (Continue) response if
        the request message does not include an Expect request-header
        field with the "100-continue" expectation, and &MUST-NOT; send a
        100 (Continue) response if such a request comes from an HTTP/1.0
        (or earlier) client. There is an exception to this rule: for
        compatibility with <xref target="RFC2068"/>, a server &MAY; send a 100 (Continue)
        status in response to an HTTP/1.1 PUT or POST request that does
        not include an Expect request-header field with the "100-continue"
        expectation. This exception, the purpose of which is
        to minimize any client processing delays associated with an
        undeclared wait for 100 (Continue) status, applies only to
        HTTP/1.1 requests, and not to requests with any other HTTP-version
        value.
    </t>
    <t> An origin server &MAY; omit a 100 (Continue) response if it has
        already received some or all of the request body for the
        corresponding request.
    </t>
    <t> An origin server that sends a 100 (Continue) response &MUST;
    ultimately send a final status code, once the request body is
        received and processed, unless it terminates the transport
        connection prematurely.
    </t>
    <t> If an origin server receives a request that does not include an
        Expect request-header field with the "100-continue" expectation,
        the request includes a request body, and the server responds
        with a final status code before reading the entire request body
        from the transport connection, then the server &SHOULD-NOT;  close
        the transport connection until it has read the entire request,
        or until the client closes the connection. Otherwise, the client
        might not reliably receive the response message. However, this
        requirement is not be construed as preventing a server from
        defending itself against denial-of-service attacks, or from
        badly broken client implementations.
      </t>
    </list>
</t>
<t>
   Requirements for HTTP/1.1 proxies:
  <list style="symbols">
    <t> If a proxy receives a request that includes an Expect request-header
        field with the "100-continue" expectation, and the proxy
        either knows that the next-hop server complies with HTTP/1.1 or
        higher, or does not know the HTTP version of the next-hop
        server, it &MUST; forward the request, including the Expect header
        field.
    </t>
    <t> If the proxy knows that the version of the next-hop server is
        HTTP/1.0 or lower, it &MUST-NOT; forward the request, and it &MUST;
        respond with a 417 (Expectation Failed) status.
    </t>
    <t> Proxies &SHOULD; maintain a cache recording the HTTP version
        numbers received from recently-referenced next-hop servers.
    </t>
    <t> A proxy &MUST-NOT; forward a 100 (Continue) response if the
        request message was received from an HTTP/1.0 (or earlier)
        client and did not include an Expect request-header field with
        the "100-continue" expectation. This requirement overrides the
        general rule for forwarding of 1xx responses (see &status-1xx;).
    </t>
  </list>
</t>
</section>

<section title="Client Behavior if Server Prematurely Closes Connection" anchor="connection.premature">
<t>
   If an HTTP/1.1 client sends a request which includes a request body,
   but which does not include an Expect request-header field with the
   "100-continue" expectation, and if the client is not directly
   connected to an HTTP/1.1 origin server, and if the client sees the
   connection close before receiving any status from the server, the
   client &SHOULD; retry the request.  If the client does retry this
   request, it &MAY; use the following "binary exponential backoff"
   algorithm to be assured of obtaining a reliable response:
  <list style="numbers">
    <t>
      Initiate a new connection to the server
    </t>
    <t>
      Transmit the request-headers
    </t>
    <t>
      Initialize a variable R to the estimated round-trip time to the
         server (e.g., based on the time it took to establish the
         connection), or to a constant value of 5 seconds if the round-trip
         time is not available.
    </t>
    <t>
       Compute T = R * (2**N), where N is the number of previous
         retries of this request.
    </t>
    <t>
       Wait either for an error response from the server, or for T
         seconds (whichever comes first)
    </t>
    <t>
       If no error response is received, after T seconds transmit the
         body of the request.
    </t>
    <t>
       If client sees that the connection is closed prematurely,
         repeat from step 1 until the request is accepted, an error
         response is received, or the user becomes impatient and
         terminates the retry process.
    </t>
  </list>
</t>
<t>
   If at any point an error status is received, the client
  <list style="symbols">
      <t>&SHOULD-NOT;  continue and</t>

      <t>&SHOULD; close the connection if it has not completed sending the
        request message.</t>
    </list>
</t>
</section>
</section>
</section>


<section title="Header Field Definitions" anchor="header.fields">
<t>
   This section defines the syntax and semantics of HTTP/1.1 header fields
   related to message framing and transport protocols.
</t>
<t>
   For entity-header fields, both sender and recipient refer to either the
   client or the server, depending on who sends and who receives the entity.
</t>

<section title="Connection" anchor="header.connection">
  <iref primary="true" item="Connection header" x:for-anchor=""/>
  <iref primary="true" item="Headers" subitem="Connection" x:for-anchor=""/>
<t>
   The Connection general-header field allows the sender to specify
   options that are desired for that particular connection and &MUST-NOT;
   be communicated by proxies over further connections.
</t>
<t>
   The Connection header has the following grammar:
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Connection"/><iref primary="true" item="Grammar" subitem="connection-token"/>
  Connection = "Connection" ":" 1#(connection-token)
  connection-token  = token
</artwork></figure>
<t>
   HTTP/1.1 proxies &MUST; parse the Connection header field before a
   message is forwarded and, for each connection-token in this field,
   remove any header field(s) from the message with the same name as the
   connection-token. Connection options are signaled by the presence of
   a connection-token in the Connection header field, not by any
   corresponding additional header field(s), since the additional header
   field may not be sent if there are no parameters associated with that
   connection option.
</t>
<t>
   Message headers listed in the Connection header &MUST-NOT; include
   end-to-end headers, such as Cache-Control.
</t>
<t>
   HTTP/1.1 defines the "close" connection option for the sender to
   signal that the connection will be closed after completion of the
   response. For example,
</t>
<figure><artwork type="example">
    Connection: close
</artwork></figure>
<t>
   in either the request or the response header fields indicates that
   the connection &SHOULD-NOT;  be considered `persistent' (<xref target="persistent.connections"/>)
   after the current request/response is complete.
</t>
<t>
   An HTTP/1.1 client that does not support persistent connections &MUST;
   include the "close" connection option in every request message.
</t>
<t>
   An HTTP/1.1 server that does not support persistent connections &MUST;
   include the "close" connection option in every response message that
   does not have a 1xx (informational) status code.
</t>
<t>
   A system receiving an HTTP/1.0 (or lower-version) message that
   includes a Connection header &MUST;, for each connection-token in this
   field, remove and ignore any header field(s) from the message with
   the same name as the connection-token. This protects against mistaken
   forwarding of such header fields by pre-HTTP/1.1 proxies. See <xref target="compatibility.with.http.1.0.persistent.connections"/>.
</t>
</section>

<section title="Content-Length" anchor="header.content-length">
  <iref primary="true" item="Content-Length header" x:for-anchor=""/>
  <iref primary="true" item="Headers" subitem="Content-Length" x:for-anchor=""/>
<t>
   The Content-Length entity-header field indicates the size of the
   entity-body, in decimal number of OCTETs, sent to the recipient or,
   in the case of the HEAD method, the size of the entity-body that
   would have been sent had the request been a GET.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Content-Length"/>
  Content-Length    = "Content-Length" ":" 1*DIGIT
</artwork></figure>
<t>
   An example is
</t>
<figure><artwork type="example">
    Content-Length: 3495
</artwork></figure>
<t>
   Applications &SHOULD; use this field to indicate the transfer-length of
   the message-body, unless this is prohibited by the rules in <xref target="message.length"/>.
</t>
<t>
   Any Content-Length greater than or equal to zero is a valid value.
   <xref target="message.length"/> describes how to determine the length of a message-body
   if a Content-Length is not given.
</t>
<t>
   Note that the meaning of this field is significantly different from
   the corresponding definition in MIME, where it is an optional field
   used within the "message/external-body" content-type. In HTTP, it
   &SHOULD; be sent whenever the message's length can be determined prior
   to being transferred, unless this is prohibited by the rules in
   <xref target="message.length"/>.
</t>
</section>

<section title="Date" anchor="header.date">
  <iref primary="true" item="Date header" x:for-anchor=""/>
  <iref primary="true" item="Headers" subitem="Date" x:for-anchor=""/>
<t>
   The Date general-header field represents the date and time at which
   the message was originated, having the same semantics as orig-date in
   <xref target="RFC2822" x:fmt="of" x:sec="3.6.1"/>. The field value is an HTTP-date, as described in <xref target="full.date"/>;
   it &MUST; be sent in rfc1123-date format.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Date"/>
  Date  = "Date" ":" HTTP-date
</artwork></figure>
<t>
   An example is
</t>
<figure><artwork type="example">
    Date: Tue, 15 Nov 1994 08:12:31 GMT
</artwork></figure>
<t>
   Origin servers &MUST; include a Date header field in all responses,
   except in these cases:
  <list style="numbers">
      <t>If the response status code is 100 (Continue) or 101 (Switching
         Protocols), the response &MAY; include a Date header field, at
         the server's option.</t>

      <t>If the response status code conveys a server error, e.g. 500
         (Internal Server Error) or 503 (Service Unavailable), and it is
         inconvenient or impossible to generate a valid Date.</t>

      <t>If the server does not have a clock that can provide a
         reasonable approximation of the current time, its responses
         &MUST-NOT; include a Date header field. In this case, the rules
         in <xref target="clockless.origin.server.operation"/> &MUST; be followed.</t>
  </list>
</t>
<t>
   A received message that does not have a Date header field &MUST; be
   assigned one by the recipient if the message will be cached by that
   recipient or gatewayed via a protocol which requires a Date. An HTTP
   implementation without a clock &MUST-NOT; cache responses without
   revalidating them on every use. An HTTP cache, especially a shared
   cache, &SHOULD; use a mechanism, such as NTP <xref target="RFC1305"/>, to synchronize its
   clock with a reliable external standard.
</t>
<t>
   Clients &SHOULD; only send a Date header field in messages that include
   an entity-body, as in the case of the PUT and POST requests, and even
   then it is optional. A client without a clock &MUST-NOT; send a Date
   header field in a request.
</t>
<t>
   The HTTP-date sent in a Date header &SHOULD-NOT;  represent a date and
   time subsequent to the generation of the message. It &SHOULD; represent
   the best available approximation of the date and time of message
   generation, unless the implementation has no means of generating a
   reasonably accurate date and time. In theory, the date ought to
   represent the moment just before the entity is generated. In
   practice, the date can be generated at any time during the message
   origination without affecting its semantic value.
</t>

<section title="Clockless Origin Server Operation" anchor="clockless.origin.server.operation">
<t>
   Some origin server implementations might not have a clock available.
   An origin server without a clock &MUST-NOT; assign Expires or Last-Modified
   values to a response, unless these values were associated
   with the resource by a system or user with a reliable clock. It &MAY;
   assign an Expires value that is known, at or before server
   configuration time, to be in the past (this allows "pre-expiration"
   of responses without storing separate Expires values for each
   resource).
</t>
</section>
</section>

<section title="Host" anchor="header.host">
  <iref primary="true" item="Host header" x:for-anchor=""/>
  <iref primary="true" item="Headers" subitem="Host" x:for-anchor=""/>
<t>
   The Host request-header field specifies the Internet host and port
   number of the resource being requested, as obtained from the original
   URI given by the user or referring resource (generally an HTTP URL,
   as described in <xref target="http.url"/>). The Host field value &MUST; represent
   the naming authority of the origin server or gateway given by the
   original URL. This allows the origin server or gateway to
   differentiate between internally-ambiguous URLs, such as the root "/"
   URL of a server for multiple host names on a single IP address.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Host"/>
  Host = "Host" ":" host [ ":" port ] ; <xref target="http.url"/>
</artwork></figure>
<t>
   A "host" without any trailing port information implies the default
   port for the service requested (e.g., "80" for an HTTP URL). For
   example, a request on the origin server for
   &lt;http://www.example.org/pub/WWW/&gt; would properly include:
</t>
<figure><artwork type="example">
    GET /pub/WWW/ HTTP/1.1
    Host: www.example.org
</artwork></figure>
<t>
   A client &MUST; include a Host header field in all HTTP/1.1 request
   messages. If the requested URI does not include an Internet host
   name for the service being requested, then the Host header field &MUST;
   be given with an empty value. An HTTP/1.1 proxy &MUST; ensure that any
   request message it forwards does contain an appropriate Host header
   field that identifies the service being requested by the proxy. All
   Internet-based HTTP/1.1 servers &MUST; respond with a 400 (Bad Request)
   status code to any HTTP/1.1 request message which lacks a Host header
   field.
</t>
<t>
   See Sections <xref target="the.resource.identified.by.a.request" format="counter"/>
   and <xref target="changes.to.simplify.multi-homed.web.servers.and.conserve.ip.addresses" format="counter"/>
   for other requirements relating to Host.
</t>
</section>

<section title="TE" anchor="header.te">
  <iref primary="true" item="TE header" x:for-anchor=""/>
  <iref primary="true" item="Headers" subitem="TE" x:for-anchor=""/>
<t>
   The TE request-header field indicates what extension transfer-codings
   it is willing to accept in the response and whether or not it is
   willing to accept trailer fields in a chunked transfer-coding. Its
   value may consist of the keyword "trailers" and/or a comma-separated
   list of extension transfer-coding names with optional accept
   parameters (as described in <xref target="transfer.codings"/>).
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="TE"/><iref primary="true" item="Grammar" subitem="t-codings"/>
  TE        = "TE" ":" #( t-codings )
  t-codings = "trailers" | ( transfer-extension [ accept-params ] )
</artwork></figure>
<t>
   The presence of the keyword "trailers" indicates that the client is
   willing to accept trailer fields in a chunked transfer-coding, as
   defined in <xref target="chunked.transfer.encoding"/>. This keyword is reserved for use with
   transfer-coding values even though it does not itself represent a
   transfer-coding.
</t>
<t>
   Examples of its use are:
</t>
<figure><artwork type="example">
    TE: deflate
    TE:
    TE: trailers, deflate;q=0.5
</artwork></figure>
<t>
   The TE header field only applies to the immediate connection.
   Therefore, the keyword &MUST; be supplied within a Connection header
   field (<xref target="header.connection"/>) whenever TE is present in an HTTP/1.1 message.
</t>
<t>
   A server tests whether a transfer-coding is acceptable, according to
   a TE field, using these rules:
  <list style="numbers">
    <x:lt>
      <t>The "chunked" transfer-coding is always acceptable. If the
         keyword "trailers" is listed, the client indicates that it is
         willing to accept trailer fields in the chunked response on
         behalf of itself and any downstream clients. The implication is
         that, if given, the client is stating that either all
         downstream clients are willing to accept trailer fields in the
         forwarded response, or that it will attempt to buffer the
         response on behalf of downstream recipients.
      </t><t>
         <x:h>Note:</x:h> HTTP/1.1 does not define any means to limit the size of a
         chunked response such that a client can be assured of buffering
         the entire response.</t>
    </x:lt>
    <x:lt>
      <t>If the transfer-coding being tested is one of the transfer-codings
         listed in the TE field, then it is acceptable unless it
         is accompanied by a qvalue of 0. (As defined in &qvalue;, a
         qvalue of 0 means "not acceptable.")</t>
    </x:lt>
    <x:lt>
      <t>If multiple transfer-codings are acceptable, then the
         acceptable transfer-coding with the highest non-zero qvalue is
         preferred.  The "chunked" transfer-coding always has a qvalue
         of 1.</t>
    </x:lt>
  </list>
</t>
<t>
   If the TE field-value is empty or if no TE field is present, the only
   transfer-coding  is "chunked". A message with no transfer-coding is
   always acceptable.
</t>
</section>

<section title="Trailer" anchor="header.trailer">
  <iref primary="true" item="Trailer header" x:for-anchor=""/>
  <iref primary="true" item="Headers" subitem="Trailer" x:for-anchor=""/>
<t>
   The Trailer general field value indicates that the given set of
   header fields is present in the trailer of a message encoded with
   chunked transfer-coding.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Trailer"/>
  Trailer  = "Trailer" ":" 1#field-name
</artwork></figure>
<t>
   An HTTP/1.1 message &SHOULD; include a Trailer header field in a
   message using chunked transfer-coding with a non-empty trailer. Doing
   so allows the recipient to know which header fields to expect in the
   trailer.
</t>
<t>
   If no Trailer header field is present, the trailer &SHOULD-NOT;  include
   any header fields. See <xref target="chunked.transfer.encoding"/> for restrictions on the use of
   trailer fields in a "chunked" transfer-coding.
</t>
<t>
   Message header fields listed in the Trailer header field &MUST-NOT;
   include the following header fields:
  <list style="symbols">
    <t>Transfer-Encoding</t>
    <t>Content-Length</t>
    <t>Trailer</t>
  </list>
</t>
</section>

<section title="Transfer-Encoding" anchor="header.transfer-encoding">
  <iref primary="true" item="Transfer-Encoding header" x:for-anchor=""/>
  <iref primary="true" item="Headers" subitem="Transfer-Encoding" x:for-anchor=""/>
<t>
   The Transfer-Encoding general-header field indicates what (if any)
   type of transformation has been applied to the message body in order
   to safely transfer it between the sender and the recipient. This
   differs from the content-coding in that the transfer-coding is a
   property of the message, not of the entity.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Transfer-Encoding"/>
  Transfer-Encoding       = "Transfer-Encoding" ":" 1#transfer-coding
</artwork></figure>
<t>
   Transfer-codings are defined in <xref target="transfer.codings"/>. An example is:
</t>
<figure><artwork type="example">
  Transfer-Encoding: chunked
</artwork></figure>
<t>
   If multiple encodings have been applied to an entity, the transfer-codings
   &MUST; be listed in the order in which they were applied.
   Additional information about the encoding parameters &MAY; be provided
   by other entity-header fields not defined by this specification.
</t>
<t>
   Many older HTTP/1.0 applications do not understand the Transfer-Encoding
   header.
</t>
</section>

<section title="Upgrade" anchor="header.upgrade">
  <iref primary="true" item="Upgrade header" x:for-anchor=""/>
  <iref primary="true" item="Headers" subitem="Upgrade" x:for-anchor=""/>
<t>
   The Upgrade general-header allows the client to specify what
   additional communication protocols it supports and would like to use
   if the server finds it appropriate to switch protocols. The server
   &MUST; use the Upgrade header field within a 101 (Switching Protocols)
   response to indicate which protocol(s) are being switched.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Upgrade"/>
  Upgrade        = "Upgrade" ":" 1#product
</artwork></figure>
<t>
   For example,
</t>
<figure><artwork type="example">
    Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11
</artwork></figure>
<t>
   The Upgrade header field is intended to provide a simple mechanism
   for transition from HTTP/1.1 to some other, incompatible protocol. It
   does so by allowing the client to advertise its desire to use another
   protocol, such as a later version of HTTP with a higher major version
   number, even though the current request has been made using HTTP/1.1.
   This eases the difficult transition between incompatible protocols by
   allowing the client to initiate a request in the more commonly
   supported protocol while indicating to the server that it would like
   to use a "better" protocol if available (where "better" is determined
   by the server, possibly according to the nature of the method and/or
   resource being requested).
</t>
<t>
   The Upgrade header field only applies to switching application-layer
   protocols upon the existing transport-layer connection. Upgrade
   cannot be used to insist on a protocol change; its acceptance and use
   by the server is optional. The capabilities and nature of the
   application-layer communication after the protocol change is entirely
   dependent upon the new protocol chosen, although the first action
   after changing the protocol &MUST; be a response to the initial HTTP
   request containing the Upgrade header field.
</t>
<t>
   The Upgrade header field only applies to the immediate connection.
   Therefore, the upgrade keyword &MUST; be supplied within a Connection
   header field (<xref target="header.connection"/>) whenever Upgrade is present in an
   HTTP/1.1 message.
</t>
<t>
   The Upgrade header field cannot be used to indicate a switch to a
   protocol on a different connection. For that purpose, it is more
   appropriate to use a 301, 302, 303, or 305 redirection response.
</t>
<t>
   This specification only defines the protocol name "HTTP" for use by
   the family of Hypertext Transfer Protocols, as defined by the HTTP
   version rules of <xref target="http.version"/> and future updates to this
   specification. Any token can be used as a protocol name; however, it
   will only be useful if both the client and server associate the name
   with the same protocol.
</t>
</section>

<section title="Via" anchor="header.via">
  <iref primary="true" item="Via header" x:for-anchor=""/>
  <iref primary="true" item="Headers" subitem="Via" x:for-anchor=""/>
<t>
   The Via general-header field &MUST; be used by gateways and proxies to
   indicate the intermediate protocols and recipients between the user
   agent and the server on requests, and between the origin server and
   the client on responses. It is analogous to the "Received" field of
   <xref target="RFC2822"/> and is intended to be used for tracking message forwards,
   avoiding request loops, and identifying the protocol capabilities of
   all senders along the request/response chain.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Via"/><iref primary="true" item="Grammar" subitem="received-protocol"/><iref primary="true" item="Grammar" subitem="protocol-name"/><iref primary="true" item="Grammar" subitem="protocol-version"/><iref primary="true" item="Grammar" subitem="received-by"/><iref primary="true" item="Grammar" subitem="pseudonym"/>
  Via =  "Via" ":" 1#( received-protocol received-by [ comment ] )
  received-protocol = [ protocol-name "/" ] protocol-version
  protocol-name     = token
  protocol-version  = token
  received-by       = ( host [ ":" port ] ) | pseudonym
  pseudonym         = token
</artwork></figure>
<t>
   The received-protocol indicates the protocol version of the message
   received by the server or client along each segment of the
   request/response chain. The received-protocol version is appended to
   the Via field value when the message is forwarded so that information
   about the protocol capabilities of upstream applications remains
   visible to all recipients.
</t>
<t>
   The protocol-name is optional if and only if it would be "HTTP". The
   received-by field is normally the host and optional port number of a
   recipient server or client that subsequently forwarded the message.
   However, if the real host is considered to be sensitive information,
   it &MAY; be replaced by a pseudonym. If the port is not given, it &MAY;
   be assumed to be the default port of the received-protocol.
</t>
<t>
   Multiple Via field values represents each proxy or gateway that has
   forwarded the message. Each recipient &MUST; append its information
   such that the end result is ordered according to the sequence of
   forwarding applications.
</t>
<t>
   Comments &MAY; be used in the Via header field to identify the software
   of the recipient proxy or gateway, analogous to the User-Agent and
   Server header fields. However, all comments in the Via field are
   optional and &MAY; be removed by any recipient prior to forwarding the
   message.
</t>
<t>
   For example, a request message could be sent from an HTTP/1.0 user
   agent to an internal proxy code-named "fred", which uses HTTP/1.1 to
   forward the request to a public proxy at p.example.net, which completes
   the request by forwarding it to the origin server at www.example.com.
   The request received by www.example.com would then have the following
   Via header field:
</t>
<figure><artwork type="example">
    Via: 1.0 fred, 1.1 p.example.net (Apache/1.1)
</artwork></figure>
<t>
   Proxies and gateways used as a portal through a network firewall
   &SHOULD-NOT;, by default, forward the names and ports of hosts within
   the firewall region. This information &SHOULD; only be propagated if
   explicitly enabled. If not enabled, the received-by host of any host
   behind the firewall &SHOULD; be replaced by an appropriate pseudonym
   for that host.
</t>
<t>
   For organizations that have strong privacy requirements for hiding
   internal structures, a proxy &MAY; combine an ordered subsequence of
   Via header field entries with identical received-protocol values into
   a single such entry. For example,
</t>
<figure><artwork type="example">
    Via: 1.0 ricky, 1.1 ethel, 1.1 fred, 1.0 lucy
</artwork></figure>
<t>
        could be collapsed to
</t>
<figure><artwork type="example">
    Via: 1.0 ricky, 1.1 mertz, 1.0 lucy
</artwork></figure>
<t>
   Applications &SHOULD-NOT;  combine multiple entries unless they are all
   under the same organizational control and the hosts have already been
   replaced by pseudonyms. Applications &MUST-NOT; combine entries which
   have different received-protocol values.
</t>
</section>

</section>

<section title="IANA Considerations" anchor="IANA.considerations">
<t>
   TBD.
</t>
</section>

<section title="Security Considerations" anchor="security.considerations">
<t>
   This section is meant to inform application developers, information
   providers, and users of the security limitations in HTTP/1.1 as
   described by this document. The discussion does not include
   definitive solutions to the problems revealed, though it does make
   some suggestions for reducing security risks.
</t>

<section title="Personal Information" anchor="personal.information">
<t>
   HTTP clients are often privy to large amounts of personal information
   (e.g. the user's name, location, mail address, passwords, encryption
   keys, etc.), and &SHOULD; be very careful to prevent unintentional
   leakage of this information via the HTTP protocol to other sources.
   We very strongly recommend that a convenient interface be provided
   for the user to control dissemination of such information, and that
   designers and implementors be particularly careful in this area.
   History shows that errors in this area often create serious security
   and/or privacy problems and generate highly adverse publicity for the
   implementor's company.
</t>
</section>

<section title="Abuse of Server Log Information" anchor="abuse.of.server.log.information">
<t>
   A server is in the position to save personal data about a user's
   requests which might identify their reading patterns or subjects of
   interest. This information is clearly confidential in nature and its
   handling can be constrained by law in certain countries. People using
   the HTTP protocol to provide data are responsible for ensuring that
   such material is not distributed without the permission of any
   individuals that are identifiable by the published results.
</t>
</section>

<section title="Attacks Based On File and Path Names" anchor="attack.pathname">
<t>
   Implementations of HTTP origin servers &SHOULD; be careful to restrict
   the documents returned by HTTP requests to be only those that were
   intended by the server administrators. If an HTTP server translates
   HTTP URIs directly into file system calls, the server &MUST; take
   special care not to serve files that were not intended to be
   delivered to HTTP clients. For example, UNIX, Microsoft Windows, and
   other operating systems use ".." as a path component to indicate a
   directory level above the current one. On such a system, an HTTP
   server &MUST; disallow any such construct in the Request-URI if it
   would otherwise allow access to a resource outside those intended to
   be accessible via the HTTP server. Similarly, files intended for
   reference only internally to the server (such as access control
   files, configuration files, and script code) &MUST; be protected from
   inappropriate retrieval, since they might contain sensitive
   information. Experience has shown that minor bugs in such HTTP server
   implementations have turned into security risks.
</t>
</section>

<section title="DNS Spoofing" anchor="dns.spoofing">
<t>
   Clients using HTTP rely heavily on the Domain Name Service, and are
   thus generally prone to security attacks based on the deliberate
   mis-association of IP addresses and DNS names. Clients need to be
   cautious in assuming the continuing validity of an IP number/DNS name
   association.
</t>
<t>
   In particular, HTTP clients &SHOULD; rely on their name resolver for
   confirmation of an IP number/DNS name association, rather than
   caching the result of previous host name lookups. Many platforms
   already can cache host name lookups locally when appropriate, and
   they &SHOULD; be configured to do so. It is proper for these lookups to
   be cached, however, only when the TTL (Time To Live) information
   reported by the name server makes it likely that the cached
   information will remain useful.
</t>
<t>
   If HTTP clients cache the results of host name lookups in order to
   achieve a performance improvement, they &MUST; observe the TTL
   information reported by DNS.
</t>
<t>
   If HTTP clients do not observe this rule, they could be spoofed when
   a previously-accessed server's IP address changes. As network
   renumbering is expected to become increasingly common <xref target="RFC1900"/>, the
   possibility of this form of attack will grow. Observing this
   requirement thus reduces this potential security vulnerability.
</t>
<t>
   This requirement also improves the load-balancing behavior of clients
   for replicated servers using the same DNS name and reduces the
   likelihood of a user's experiencing failure in accessing sites which
   use that strategy.
</t>
</section>

<section title="Proxies and Caching" anchor="attack.proxies">
<t>
   By their very nature, HTTP proxies are men-in-the-middle, and
   represent an opportunity for man-in-the-middle attacks. Compromise of
   the systems on which the proxies run can result in serious security
   and privacy problems. Proxies have access to security-related
   information, personal information about individual users and
   organizations, and proprietary information belonging to users and
   content providers. A compromised proxy, or a proxy implemented or
   configured without regard to security and privacy considerations,
   might be used in the commission of a wide range of potential attacks.
</t>
<t>
   Proxy operators should protect the systems on which proxies run as
   they would protect any system that contains or transports sensitive
   information. In particular, log information gathered at proxies often
   contains highly sensitive personal information, and/or information
   about organizations. Log information should be carefully guarded, and
   appropriate guidelines for use developed and followed. (<xref target="abuse.of.server.log.information"/>).
</t>
<t>
   Proxy implementors should consider the privacy and security
   implications of their design and coding decisions, and of the
   configuration options they provide to proxy operators (especially the
   default configuration).
</t>
<t>
   Users of a proxy need to be aware that they are no trustworthier than
   the people who run the proxy; HTTP itself cannot solve this problem.
</t>
<t>
   The judicious use of cryptography, when appropriate, may suffice to
   protect against a broad range of security and privacy attacks. Such
   cryptography is beyond the scope of the HTTP/1.1 specification.
</t>
</section>

<section title="Denial of Service Attacks on Proxies" anchor="attack.DoS">
<t>
   They exist. They are hard to defend against. Research continues.
   Beware.
</t>
</section>
</section>

<section title="Acknowledgments" anchor="ack">
<t>
   This specification makes heavy use of the augmented BNF and generic
   constructs defined by David H. Crocker for <xref target="RFC822ABNF"/>. Similarly, it
   reuses many of the definitions provided by Nathaniel Borenstein and
   Ned Freed for MIME <xref target="RFC2045"/>. We hope that their inclusion in this
   specification will help reduce past confusion over the relationship
   between HTTP and Internet mail message formats.
</t>
<t>
   The HTTP protocol has evolved considerably over the years. It has
   benefited from a large and active developer community--the many
   people who have participated on the www-talk mailing list--and it is
   that community which has been most responsible for the success of
   HTTP and of the World-Wide Web in general. Marc Andreessen, Robert
   Cailliau, Daniel W. Connolly, Bob Denny, John Franks, Jean-Francois
   Groff, Phillip M. Hallam-Baker, Hakon W. Lie, Ari Luotonen, Rob
   McCool, Lou Montulli, Dave Raggett, Tony Sanders, and Marc
   VanHeyningen deserve special recognition for their efforts in
   defining early aspects of the protocol.
</t>
<t>
   This document has benefited greatly from the comments of all those
   participating in the HTTP-WG. In addition to those already mentioned,
   the following individuals have contributed to this specification:
</t>
<t>
   Gary Adams, Harald Tveit Alvestrand, Keith Ball, Brian Behlendorf,
   Paul Burchard, Maurizio Codogno, Mike Cowlishaw, Roman Czyborra,
   Michael A. Dolan, Daniel DuBois, David J. Fiander, Alan Freier, Marc Hedlund, Greg Herlihy,
   Koen Holtman, Alex Hopmann, Bob Jernigan, Shel Kaphan, Rohit Khare,
   John Klensin, Martijn Koster, Alexei Kosut, David M. Kristol,
   Daniel LaLiberte, Ben Laurie, Paul J. Leach, Albert Lunde,
   John C. Mallery, Jean-Philippe Martin-Flatin, Mitra, David Morris,
   Gavin Nicol, Ross Patterson, Bill Perry, Jeffrey Perry, Scott Powers, Owen Rees,
   Luigi Rizzo, David Robinson, Marc Salomon, Rich Salz,
   Allan M. Schiffman, Jim Seidman, Chuck Shotton, Eric W. Sink,
   Simon E. Spero, Richard N. Taylor, Robert S. Thau,
   Bill (BearHeart) Weinman, Francois Yergeau, Mary Ellen Zurko,
   Josh Cohen.
</t>
<t>
   Thanks to the "cave men" of Palo Alto. You know who you are.
</t>
<t>
   Jim Gettys (the editor of <xref target="RFC2616"/>) wishes particularly
   to thank Roy Fielding, the editor of <xref target="RFC2068"/>, along
   with John Klensin, Jeff Mogul, Paul Leach, Dave Kristol, Koen
   Holtman, John Franks, Josh Cohen, Alex Hopmann, Scott Lawrence, and
   Larry Masinter for their help. And thanks go particularly to Jeff
   Mogul and Scott Lawrence for performing the "MUST/MAY/SHOULD" audit.
</t>
<t>
   The Apache Group, Anselm Baird-Smith, author of Jigsaw, and Henrik
   Frystyk implemented RFC 2068 early, and we wish to thank them for the
   discovery of many of the problems that this document attempts to
   rectify.
</t>
</section>

</middle>
<back>

<references title="Normative References">

<reference anchor="ISO-8859-1">
  <front>
    <title>
     Information technology -- 8-bit single-byte coded graphic character sets -- Part 1: Latin alphabet No. 1
    </title>
    <author>
      <organization>International Organization for Standardization</organization>
    </author>
    <date year="1998"/>
  </front>
  <seriesInfo name="ISO/IEC" value="8859-1:1998"/>
</reference>

<reference anchor="Part2">
  <front>
    <title abbrev="HTTP/1.1">HTTP/1.1, part 2: Message Semantics</title>
    <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
      <organization abbrev="Day Software">Day Software</organization>
      <address><email>fielding@gbiv.com</email></address>
    </author>
    <author initials="J." surname="Gettys" fullname="Jim Gettys">
      <organization>One Laptop per Child</organization>
      <address><email>jg@laptop.org</email></address>
    </author>
    <author initials="J." surname="Mogul" fullname="Jeffrey C. Mogul">
      <organization abbrev="HP">Hewlett-Packard Company</organization>
      <address><email>JeffMogul@acm.org</email></address>
    </author>
    <author initials="H." surname="Frystyk" fullname="Henrik Frystyk Nielsen">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>henrikn@microsoft.com</email></address>
    </author>
    <author initials="L." surname="Masinter" fullname="Larry Masinter">
      <organization abbrev="Adobe Systems">Adobe Systems, Incorporated</organization>
      <address><email>LMM@acm.org</email></address>
    </author>
    <author initials="P." surname="Leach" fullname="Paul J. Leach">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>paulle@microsoft.com</email></address>
    </author>
    <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
      <organization abbrev="W3C/MIT">World Wide Web Consortium</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <author initials="Y." surname="Lafon" fullname="Yves Lafon" role="editor">
      <organization abbrev="W3C">World Wide Web Consortium</organization>
      <address><email>ylafon@w3.org</email></address>
    </author>
    <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
      <organization abbrev="greenbytes">greenbytes GmbH</organization>
      <address><email>julian.reschke@greenbytes.de</email></address>
    </author>
    <date month="&ID-MONTH;" year="&ID-YEAR;"/>
  </front>
  <seriesInfo name="Internet-Draft" value="draft-ietf-httpbis-p2-semantics-&ID-VERSION;"/>
  <x:source href="p2-semantics.xml" basename="p2-semantics"/>
</reference>

<reference anchor="Part3">
  <front>
    <title abbrev="HTTP/1.1">HTTP/1.1, part 3: Message Payload and Content Negotiation</title>
    <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
      <organization abbrev="Day Software">Day Software</organization>
      <address><email>fielding@gbiv.com</email></address>
    </author>
    <author initials="J." surname="Gettys" fullname="Jim Gettys">
      <organization>One Laptop per Child</organization>
      <address><email>jg@laptop.org</email></address>
    </author>
    <author initials="J." surname="Mogul" fullname="Jeffrey C. Mogul">
      <organization abbrev="HP">Hewlett-Packard Company</organization>
      <address><email>JeffMogul@acm.org</email></address>
    </author>
    <author initials="H." surname="Frystyk" fullname="Henrik Frystyk Nielsen">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>henrikn@microsoft.com</email></address>
    </author>
    <author initials="L." surname="Masinter" fullname="Larry Masinter">
      <organization abbrev="Adobe Systems">Adobe Systems, Incorporated</organization>
      <address><email>LMM@acm.org</email></address>
    </author>
    <author initials="P." surname="Leach" fullname="Paul J. Leach">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>paulle@microsoft.com</email></address>
    </author>
    <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
      <organization abbrev="W3C/MIT">World Wide Web Consortium</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <author initials="Y." surname="Lafon" fullname="Yves Lafon" role="editor">
      <organization abbrev="W3C">World Wide Web Consortium</organization>
      <address><email>ylafon@w3.org</email></address>
    </author>
    <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
      <organization abbrev="greenbytes">greenbytes GmbH</organization>
      <address><email>julian.reschke@greenbytes.de</email></address>
    </author>
    <date month="&ID-MONTH;" year="&ID-YEAR;"/>
  </front>
  <seriesInfo name="Internet-Draft" value="draft-ietf-httpbis-p3-payload-&ID-VERSION;"/>
  <x:source href="p3-payload.xml" basename="p3-payload"/>
</reference>

<reference anchor="Part5">
  <front>
    <title abbrev="HTTP/1.1">HTTP/1.1, part 5: Range Requests and Partial Responses</title>
    <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
      <organization abbrev="Day Software">Day Software</organization>
      <address><email>fielding@gbiv.com</email></address>
    </author>
    <author initials="J." surname="Gettys" fullname="Jim Gettys">
      <organization>One Laptop per Child</organization>
      <address><email>jg@laptop.org</email></address>
    </author>
    <author initials="J." surname="Mogul" fullname="Jeffrey C. Mogul">
      <organization abbrev="HP">Hewlett-Packard Company</organization>
      <address><email>JeffMogul@acm.org</email></address>
    </author>
    <author initials="H." surname="Frystyk" fullname="Henrik Frystyk Nielsen">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>henrikn@microsoft.com</email></address>
    </author>
    <author initials="L." surname="Masinter" fullname="Larry Masinter">
      <organization abbrev="Adobe Systems">Adobe Systems, Incorporated</organization>
      <address><email>LMM@acm.org</email></address>
    </author>
    <author initials="P." surname="Leach" fullname="Paul J. Leach">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>paulle@microsoft.com</email></address>
    </author>
    <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
      <organization abbrev="W3C/MIT">World Wide Web Consortium</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <author initials="Y." surname="Lafon" fullname="Yves Lafon" role="editor">
      <organization abbrev="W3C">World Wide Web Consortium</organization>
      <address><email>ylafon@w3.org</email></address>
    </author>
    <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
      <organization abbrev="greenbytes">greenbytes GmbH</organization>
      <address><email>julian.reschke@greenbytes.de</email></address>
    </author>
    <date month="&ID-MONTH;" year="&ID-YEAR;"/>
  </front>
  <seriesInfo name="Internet-Draft" value="draft-ietf-httpbis-p5-range-&ID-VERSION;"/>
  <x:source href="p5-range.xml" basename="p5-range"/>
</reference>

<reference anchor="Part6">
  <front>
    <title abbrev="HTTP/1.1">HTTP/1.1, part 6: Caching</title>
    <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
      <organization abbrev="Day Software">Day Software</organization>
      <address><email>fielding@gbiv.com</email></address>
    </author>
    <author initials="J." surname="Gettys" fullname="Jim Gettys">
      <organization>One Laptop per Child</organization>
      <address><email>jg@laptop.org</email></address>
    </author>
    <author initials="J." surname="Mogul" fullname="Jeffrey C. Mogul">
      <organization abbrev="HP">Hewlett-Packard Company</organization>
      <address><email>JeffMogul@acm.org</email></address>
    </author>
    <author initials="H." surname="Frystyk" fullname="Henrik Frystyk Nielsen">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>henrikn@microsoft.com</email></address>
    </author>
    <author initials="L." surname="Masinter" fullname="Larry Masinter">
      <organization abbrev="Adobe Systems">Adobe Systems, Incorporated</organization>
      <address><email>LMM@acm.org</email></address>
    </author>
    <author initials="P." surname="Leach" fullname="Paul J. Leach">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>paulle@microsoft.com</email></address>
    </author>
    <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
      <organization abbrev="W3C/MIT">World Wide Web Consortium</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <author initials="Y." surname="Lafon" fullname="Yves Lafon" role="editor">
      <organization abbrev="W3C">World Wide Web Consortium</organization>
      <address><email>ylafon@w3.org</email></address>
    </author>
    <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
      <organization abbrev="greenbytes">greenbytes GmbH</organization>
      <address><email>julian.reschke@greenbytes.de</email></address>
    </author>
    <date month="&ID-MONTH;" year="&ID-YEAR;"/>
  </front>
  <seriesInfo name="Internet-Draft" value="draft-ietf-httpbis-p6-cache-&ID-VERSION;"/>
  <x:source href="p6-cache.xml" basename="p6-cache"/>
</reference>

<reference anchor="RFC822ABNF">
  <front>
    <title abbrev="Standard for ARPA Internet Text Messages">Standard for the format of ARPA Internet text messages</title>
    <author initials="D.H." surname="Crocker" fullname="David H. Crocker">
      <organization>University of Delaware, Dept. of Electrical Engineering</organization>
      <address><email>DCrocker@UDel-Relay</email></address>
    </author>
    <date month="August" day="13" year="1982"/>
  </front>
  <seriesInfo name="STD" value="11"/>
  <seriesInfo name="RFC" value="822"/>
</reference>

<reference anchor="RFC2045">
  <front>
    <title abbrev="Internet Message Bodies">Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</title>
    <author initials="N." surname="Freed" fullname="Ned Freed">
      <organization>Innosoft International, Inc.</organization>
      <address><email>ned@innosoft.com</email></address>
    </author>
    <author initials="N.S." surname="Borenstein" fullname="Nathaniel S. Borenstein">
      <organization>First Virtual Holdings</organization>
      <address><email>nsb@nsb.fv.com</email></address>
    </author>
    <date month="November" year="1996"/>
  </front>
  <seriesInfo name="RFC" value="2045"/>
</reference>

<reference anchor="RFC2047">
  <front>
    <title abbrev="Message Header Extensions">MIME (Multipurpose Internet Mail Extensions) Part Three: Message Header Extensions for Non-ASCII Text</title>
    <author initials="K." surname="Moore" fullname="Keith Moore">
      <organization>University of Tennessee</organization>
      <address><email>moore@cs.utk.edu</email></address>
    </author>
    <date month="November" year="1996"/>
  </front>
  <seriesInfo name="RFC" value="2047"/>
</reference>

<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author initials="S." surname="Bradner" fullname="Scott Bradner">
      <organization>Harvard University</organization>
      <address><email>sob@harvard.edu</email></address>
    </author>
    <date month="March" year="1997"/>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
</reference>

<reference anchor="RFC2396">
  <front>
    <title abbrev="URI Generic Syntax">Uniform Resource Identifiers (URI): Generic Syntax</title>
    <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
      <organization abbrev="MIT/LCS">World Wide Web Consortium</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <author initials="R.T." surname="Fielding" fullname="Roy T. Fielding">
      <organization abbrev="U.C. Irvine">Department of Information and Computer Science</organization>
      <address><email>fielding@ics.uci.edu</email></address>
    </author>
    <author initials="L." surname="Masinter" fullname="Larry Masinter">
      <organization abbrev="Xerox Corporation">Xerox PARC</organization>
      <address><email>masinter@parc.xerox.com</email></address>
    </author>
    <date month="August" year="1998"/>
  </front>
  <seriesInfo name="RFC" value="2396"/>
</reference>

<reference anchor="RFC4288">
  <front>
    <title>Media Type Specifications and Registration Procedures</title>
    <author initials="N." surname="Freed" fullname="N. Freed">
      <organization>Sun Microsystems</organization>
      <address>
        <email>ned.freed@mrochek.com</email>
      </address>
    </author>
    <author initials="J." surname="Klensin" fullname="J. Klensin">
      <organization/>
      <address>
        <email>klensin+ietf@jck.com</email>
      </address>
    </author>
    <date year="2005" month="December"/>
  </front>
  <seriesInfo name="BCP" value="13"/>
  <seriesInfo name="RFC" value="4288"/>
</reference>

<reference anchor="USASCII">
  <front>
    <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange</title>
    <author>
      <organization>American National Standards Institute</organization>
    </author>
    <date year="1986"/>
  </front>
  <seriesInfo name="ANSI" value="X3.4"/>
</reference>

</references>

<references title="Informative References">

<reference anchor="Nie1997" target="http://doi.acm.org/10.1145/263105.263157">
  <front>
    <title>Network Performance Effects of HTTP/1.1, CSS1, and PNG</title>
    <author initials="H.F.." surname="Nielsen" fullname="H.F. Nielsen">
      <organization/>
    </author>
    <author initials="J." surname="Gettys" fullname="J. Gettys">
      <organization/>
    </author>
    <author initials="E." surname="Prud'hommeaux" fullname="E. Prud'hommeaux">
      <organization/>
    </author>
    <author initials="H." surname="Lie" fullname="H. Lie">
      <organization/>
    </author>
    <author initials="C." surname="Lilley" fullname="C. Lilley">
      <organization/>
    </author>
    <date year="1997" month="September"/>
  </front>
  <seriesInfo name="ACM" value="Proceedings of the ACM SIGCOMM '97 conference on Applications, technologies, architectures, and protocols for computer communication SIGCOMM '97"/>
</reference>

<reference anchor="Pad1995">
  <front>
    <title>Improving HTTP Latency</title>
    <author initials="V.N." surname="Padmanabhan" fullname="Venkata N. Padmanabhan">
      <organization/>
    </author>
    <author initials="J.C." surname="Mogul" fullname="Jeffrey C. Mogul">
      <organization/>
    </author>
    <date year="1995" month="December"/>
  </front>
  <seriesInfo name="Computer Networks and ISDN Systems" value="v. 28, pp. 25-35"/>
  <annotation>
    Slightly revised version of paper in Proc. 2nd International WWW Conference '94: Mosaic and the Web, Oct. 1994,
    which is available at <eref target="http://www.ncsa.uiuc.edu/SDG/IT94/Proceedings/DDay/mogul/HTTPLatency.html"/>.
  </annotation>
</reference>

<reference anchor="RFC822">
  <front>
    <title abbrev="Standard for ARPA Internet Text Messages">Standard for the format of ARPA Internet text messages</title>
    <author initials="D.H." surname="Crocker" fullname="David H. Crocker">
      <organization>University of Delaware, Dept. of Electrical Engineering</organization>
      <address><email>DCrocker@UDel-Relay</email></address>
    </author>
    <date month="August" day="13" year="1982"/>
  </front>
  <seriesInfo name="STD" value="11"/>
  <seriesInfo name="RFC" value="822"/>
</reference>

<reference anchor="RFC959">
  <front>
    <title abbrev="File Transfer Protocol">File Transfer Protocol</title>
    <author initials="J." surname="Postel" fullname="J. Postel">
      <organization>Information Sciences Institute (ISI)</organization>
    </author>
    <author initials="J." surname="Reynolds" fullname="J. Reynolds">
      <organization/>
    </author>
    <date month="October" year="1985"/>
  </front>
  <seriesInfo name="STD" value="9"/>
  <seriesInfo name="RFC" value="959"/>
</reference>

<reference anchor="RFC1123">
  <front>
    <title>Requirements for Internet Hosts - Application and Support</title>
    <author initials="R." surname="Braden" fullname="Robert Braden">
      <organization>University of Southern California (USC), Information Sciences Institute</organization>
      <address><email>Braden@ISI.EDU</email></address>
    </author>
    <date month="October" year="1989"/>
  </front>
  <seriesInfo name="STD" value="3"/>
  <seriesInfo name="RFC" value="1123"/>
</reference>

<reference anchor="RFC1305">
  <front>
    <title>Network Time Protocol (Version 3) Specification, Implementation</title>
    <author initials="D." surname="Mills" fullname="David L. Mills">
      <organization>University of Delaware, Electrical Engineering Department</organization>
      <address><email>mills@udel.edu</email></address>
    </author>
    <date month="March" year="1992"/>
  </front>
  <seriesInfo name="RFC" value="1305"/>
</reference>

<reference anchor="RFC1436">
  <front>
    <title abbrev="Gopher">The Internet Gopher Protocol (a distributed document search and retrieval protocol)</title>
    <author initials="F." surname="Anklesaria" fullname="Farhad Anklesaria">
      <organization>University of Minnesota, Computer and Information Services</organization>
      <address><email>fxa@boombox.micro.umn.edu</email></address>
    </author>
    <author initials="M." surname="McCahill" fullname="Mark McCahill">
      <organization>University of Minnesota, Computer and Information Services</organization>
      <address><email>mpm@boombox.micro.umn.edu</email></address>
    </author>
    <author initials="P." surname="Lindner" fullname="Paul Lindner">
      <organization>University of Minnesota, Computer and Information Services</organization>
      <address><email>lindner@boombox.micro.umn.edu</email></address>
    </author>
    <author initials="D." surname="Johnson" fullname="David Johnson">
      <organization>University of Minnesota, Computer and Information Services</organization>
      <address><email>dmj@boombox.micro.umn.edu</email></address>
    </author>
    <author initials="D." surname="Torrey" fullname="Daniel Torrey">
      <organization>University of Minnesota, Computer and Information Services</organization>
      <address><email>daniel@boombox.micro.umn.edu</email></address>
    </author>
    <author initials="B." surname="Alberti" fullname="Bob Alberti">
      <organization>University of Minnesota, Computer and Information Services</organization>
      <address><email>alberti@boombox.micro.umn.edu</email></address>
    </author>
    <date month="March" year="1993"/>
  </front>
  <seriesInfo name="RFC" value="1436"/>
</reference>

<reference anchor="RFC1630">
  <front>
    <title abbrev="URIs in WWW">Universal Resource Identifiers in WWW: A Unifying Syntax for the Expression of Names and Addresses of Objects on the Network as used in the World-Wide Web</title>
    <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
      <organization>CERN, World-Wide Web project</organization>
      <address><email>timbl@info.cern.ch</email></address>
    </author>
    <date month="June" year="1994"/>
  </front>
  <seriesInfo name="RFC" value="1630"/>
</reference>

<reference anchor="RFC1737">
  <front>
    <title abbrev="Requirements for Uniform Resource Names">Functional Requirements for Uniform Resource Names</title>
    <author initials="L." surname="Masinter" fullname="Larry Masinter">
      <organization>Xerox Palo Alto Research Center</organization>
      <address><email>masinter@parc.xerox.com</email></address>
    </author>
    <author initials="K." surname="Sollins" fullname="Karen Sollins">
      <organization>MIT Laboratory for Computer Science</organization>
      <address><email>sollins@lcs.mit.edu</email></address>
    </author>
    <date month="December" year="1994"/>
  </front>
  <seriesInfo name="RFC" value="1737"/>
</reference>

<reference anchor="RFC1738">
  <front>
    <title>Uniform Resource Locators (URL)</title>
    <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
      <organization>CERN, World-Wide Web project</organization>
      <address><email>timbl@info.cern.ch</email></address>
    </author>
    <author initials="L." surname="Masinter" fullname="Larry Masinter">
      <organization>Xerox PARC</organization>
      <address><email>masinter@parc.xerox.com</email></address>
    </author>
    <author initials="M." surname="McCahill" fullname="Mark McCahill">
      <organization>University of Minnesota, Computer and Information Services</organization>
      <address><email>mpm@boombox.micro.umn.edu</email></address>
    </author>
    <date month="December" year="1994"/>
  </front>
  <seriesInfo name="RFC" value="1738"/>
</reference>

<reference anchor="RFC1808">
  <front>
    <title>Relative Uniform Resource Locators</title>
    <author initials="R." surname="Fielding" fullname="Roy T. Fielding">
      <organization>University of California Irvine, Department of Information and Computer Science</organization>
      <address><email>fielding@ics.uci.edu</email></address>
    </author>
    <date month="June" year="1995"/>
  </front>
  <seriesInfo name="RFC" value="1808"/>
</reference>

<reference anchor="RFC1900">
  <front>
    <title>Renumbering Needs Work</title>
    <author initials="B." surname="Carpenter" fullname="Brian E. Carpenter">
      <organization>CERN, Computing and Networks Division</organization>
      <address><email>brian@dxcoms.cern.ch</email></address>
    </author>
    <author initials="Y." surname="Rekhter" fullname="Yakov Rekhter">
      <organization>cisco Systems</organization>
      <address><email>yakov@cisco.com</email></address>
    </author>
    <date month="February" year="1996"/>
  </front>
  <seriesInfo name="RFC" value="1900"/>
</reference>

<reference anchor="RFC1945">
  <front>
    <title abbrev="HTTP/1.0">Hypertext Transfer Protocol -- HTTP/1.0</title>
    <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
      <organization>MIT, Laboratory for Computer Science</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <author initials="R.T." surname="Fielding" fullname="Roy T. Fielding">
      <organization>University of California, Irvine, Department of Information and Computer Science</organization>
      <address><email>fielding@ics.uci.edu</email></address>
    </author>
    <author initials="H.F." surname="Nielsen" fullname="Henrik Frystyk Nielsen">
      <organization>W3 Consortium, MIT Laboratory for Computer Science</organization>
      <address><email>frystyk@w3.org</email></address>
    </author>
    <date month="May" year="1996"/>
  </front>
  <seriesInfo name="RFC" value="1945"/>
</reference>

<reference anchor="RFC2068">
  <front>
    <title abbrev="HTTP/1.1">Hypertext Transfer Protocol -- HTTP/1.1</title>
    <author initials="R." surname="Fielding" fullname="Roy T. Fielding">
      <organization>University of California, Irvine, Department of Information and Computer Science</organization>
      <address><email>fielding@ics.uci.edu</email></address>
    </author>
    <author initials="J." surname="Gettys" fullname="Jim Gettys">
      <organization>MIT Laboratory for Computer Science</organization>
      <address><email>jg@w3.org</email></address>
    </author>
    <author initials="J." surname="Mogul" fullname="Jeffrey C. Mogul">
      <organization>Digital Equipment Corporation, Western Research Laboratory</organization>
      <address><email>mogul@wrl.dec.com</email></address>
    </author>
    <author initials="H." surname="Nielsen" fullname="Henrik Frystyk Nielsen">
      <organization>MIT Laboratory for Computer Science</organization>
      <address><email>frystyk@w3.org</email></address>
    </author>
    <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
      <organization>MIT Laboratory for Computer Science</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <date month="January" year="1997"/>
  </front>
  <seriesInfo name="RFC" value="2068"/>
</reference>

<reference anchor="RFC2145">
  <front>
    <title abbrev="HTTP Version Numbers">Use and Interpretation of HTTP Version Numbers</title>
    <author initials="J.C." surname="Mogul" fullname="Jeffrey C. Mogul">
      <organization>Western Research Laboratory</organization>
      <address><email>mogul@wrl.dec.com</email></address>
    </author>
    <author initials="R.T." surname="Fielding" fullname="Roy T. Fielding">
      <organization>Department of Information and Computer Science</organization>
      <address><email>fielding@ics.uci.edu</email></address>
    </author>
    <author initials="J." surname="Gettys" fullname="Jim Gettys">
      <organization>MIT Laboratory for Computer Science</organization>
      <address><email>jg@w3.org</email></address>
    </author>
    <author initials="H.F." surname="Nielsen" fullname="Henrik Frystyk Nielsen">
      <organization>W3 Consortium</organization>
      <address><email>frystyk@w3.org</email></address>
    </author>
    <date month="May" year="1997"/>
  </front>
  <seriesInfo name="RFC" value="2145"/>
</reference>

<reference anchor="RFC2324">
  <front>
    <title abbrev="HTCPCP/1.0">Hyper Text Coffee Pot Control Protocol (HTCPCP/1.0)</title>
    <author initials="L." surname="Masinter" fullname="Larry Masinter">
      <organization>Xerox Palo Alto Research Center</organization>
      <address><email>masinter@parc.xerox.com</email></address>
    </author>
    <date month="April" day="1" year="1998"/>
  </front>
  <seriesInfo name="RFC" value="2324"/>
</reference>

<reference anchor="RFC2616">
  <front>
    <title>Hypertext Transfer Protocol -- HTTP/1.1</title>
    <author initials="R." surname="Fielding" fullname="R. Fielding">
      <organization>University of California, Irvine</organization>
      <address><email>fielding@ics.uci.edu</email></address>
    </author>
    <author initials="J." surname="Gettys" fullname="J. Gettys">
      <organization>W3C</organization>
      <address><email>jg@w3.org</email></address>
    </author>
    <author initials="J." surname="Mogul" fullname="J. Mogul">
      <organization>Compaq Computer Corporation</organization>
      <address><email>mogul@wrl.dec.com</email></address>
    </author>
    <author initials="H." surname="Frystyk" fullname="H. Frystyk">
      <organization>MIT Laboratory for Computer Science</organization>
      <address><email>frystyk@w3.org</email></address>
    </author>
    <author initials="L." surname="Masinter" fullname="L. Masinter">
      <organization>Xerox Corporation</organization>
      <address><email>masinter@parc.xerox.com</email></address>
    </author>
    <author initials="P." surname="Leach" fullname="P. Leach">
      <organization>Microsoft Corporation</organization>
      <address><email>paulle@microsoft.com</email></address>
    </author>
    <author initials="T." surname="Berners-Lee" fullname="T. Berners-Lee">
      <organization>W3C</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <date month="June" year="1999"/>
  </front>
  <seriesInfo name="RFC" value="2616"/>
</reference>

<reference anchor="RFC2821">
  <front>
    <title>Simple Mail Transfer Protocol</title>
    <author initials="J." surname="Klensin" fullname="J. Klensin">
      <organization>AT&amp;T Laboratories</organization>
      <address><email>klensin@research.att.com</email></address>
    </author>
    <date year="2001" month="April"/>
  </front>
  <seriesInfo name="RFC" value="2821"/>
</reference>

<reference anchor="RFC2822">
  <front>
    <title>Internet Message Format</title>
    <author initials="P." surname="Resnick" fullname="P. Resnick">
      <organization>QUALCOMM Incorporated</organization>
    </author>
    <date year="2001" month="April"/>
  </front> 
  <seriesInfo name="RFC" value="2822"/>
</reference>

<reference anchor='RFC3977'>
  <front>
    <title>Network News Transfer Protocol (NNTP)</title>
    <author initials='C.' surname='Feather' fullname='C. Feather'>
      <organization>THUS plc</organization>
      <address><email>clive@demon.net</email></address>
    </author>
    <date year='2006' month='October' />
  </front>
  <seriesInfo name="RFC" value="3977"/>
</reference>

<reference anchor="Spe" target="http://sunsite.unc.edu/mdma-release/http-prob.html">
  <front>
  <title>Analysis of HTTP Performance Problems</title>
  <author initials="S." surname="Spero" fullname="Simon E. Spero">
    <organization/>
  </author>
  <date/>
  </front>
</reference>

<reference anchor="Tou1998" target="http://www.isi.edu/touch/pubs/http-perf96/">
  <front>
  <title>Analysis of HTTP Performance</title>
  <author initials="J." surname="Touch" fullname="Joe Touch">
    <organization>USC/Information Sciences Institute</organization>
    <address><email>touch@isi.edu</email></address>
  </author>
  <author initials="J." surname="Heidemann" fullname="John Heidemann">
    <organization>USC/Information Sciences Institute</organization>
    <address><email>johnh@isi.edu</email></address>
  </author>
  <author initials="K." surname="Obraczka" fullname="Katia Obraczka">
    <organization>USC/Information Sciences Institute</organization>
    <address><email>katia@isi.edu</email></address>
  </author>
  <date year="1998" month="Aug"/>
  </front>
  <seriesInfo name="ISI Research Report" value="ISI/RR-98-463"/>
  <annotation>(original report dated Aug. 1996)</annotation>
</reference>

<reference anchor="WAIS">
  <front>
    <title>WAIS Interface Protocol Prototype Functional Specification (v1.5)</title>
    <author initials="F." surname="Davis" fullname="F. Davis">
      <organization>Thinking Machines Corporation</organization>
    </author>
    <author initials="B." surname="Kahle" fullname="B. Kahle">
      <organization>Thinking Machines Corporation</organization>
    </author>
    <author initials="H." surname="Morris" fullname="H. Morris">
      <organization>Thinking Machines Corporation</organization>
    </author>
    <author initials="J." surname="Salem" fullname="J. Salem">
      <organization>Thinking Machines Corporation</organization>
    </author>
    <author initials="T." surname="Shen" fullname="T. Shen">
      <organization>Thinking Machines Corporation</organization>
    </author>
    <author initials="R." surname="Wang" fullname="R. Wang">
      <organization>Thinking Machines Corporation</organization>
    </author>
    <author initials="J." surname="Sui" fullname="J. Sui">
      <organization>Thinking Machines Corporation</organization>
    </author>
    <author initials="M." surname="Grinbaum" fullname="M. Grinbaum">
      <organization>Thinking Machines Corporation</organization>
    </author>
    <date month="April" year="1990"/>
  </front>
  <seriesInfo name="Thinking Machines Corporation" value=""/>
</reference>

</references>


<section title="Internet Media Types" anchor="internet.media.type.http">
<t>
   In addition to defining the HTTP/1.1 protocol, this document serves
   as the specification for the Internet media type "message/http" and
   "application/http". The following is to be registered with IANA <xref target="RFC4288"/>.
</t>
<section title="Internet Media Type message/http" anchor="internet.media.type.message.http">
<iref item="Media Type" subitem="message/http" primary="true"/>
<iref item="message/http Media Type" primary="true"/>
<t>
   The message/http type can be used to enclose a single HTTP request or
   response message, provided that it obeys the MIME restrictions for all
   "message" types regarding line length and encodings.
</t>
<t>
  <list style="hanging" x:indent="12em">
    <t hangText="Type name:">
      message
    </t>
    <t hangText="Subtype name:">
      http
    </t>
    <t hangText="Required parameters:">
      none
    </t>
    <t hangText="Optional parameters:">
      version, msgtype
      <list style="hanging">
        <t hangText="version:">
          The HTTP-Version number of the enclosed message
          (e.g., "1.1"). If not present, the version can be
          determined from the first line of the body.
        </t>
        <t hangText="msgtype:">
          The message type -- "request" or "response". If not
          present, the type can be determined from the first
          line of the body.
        </t>
      </list>
    </t>
    <t hangText="Encoding considerations:">
      only "7bit", "8bit", or "binary" are permitted
    </t>
    <t hangText="Security considerations:">
      none
    </t>
    <t hangText="Interoperability considerations:">
      none
    </t>
    <t hangText="Published specification:">
      This specification (see <xref target="internet.media.type.message.http"/>).
    </t>
    <t hangText="Applications that use this media type:">
    </t>
    <t hangText="Additional information:">
      <list style="hanging">
        <t hangText="Magic number(s):">none</t>
        <t hangText="File extension(s):">none</t>
        <t hangText="Macintosh file type code(s):">none</t>
      </list>
    </t>
    <t hangText="Person and email address to contact for further information:">
      See Authors Section.
    </t>
		<t hangText="Intended usage:">
		  COMMON
    </t>
		<t hangText="Restrictions on usage:">
		  none
    </t>
    <t hangText="Author/Change controller:">
      IESG
    </t>
  </list>
</t>
</section>
<section title="Internet Media Type application/http" anchor="internet.media.type.application.http">
<iref item="Media Type" subitem="application/http" primary="true"/>
<iref item="application/http Media Type" primary="true"/>
<t>
   The application/http type can be used to enclose a pipeline of one or more
   HTTP request or response messages (not intermixed).
</t>
<t>
  <list style="hanging" x:indent="12em">
    <t hangText="Type name:">
      application
    </t>
    <t hangText="Subtype name:">
      http
    </t>
    <t hangText="Required parameters:">
      none
    </t>
    <t hangText="Optional parameters:">
      version, msgtype
      <list style="hanging">
        <t hangText="version:">
          The HTTP-Version number of the enclosed messages
          (e.g., "1.1"). If not present, the version can be
          determined from the first line of the body.
        </t>
        <t hangText="msgtype:">
          The message type -- "request" or "response". If not
          present, the type can be determined from the first
          line of the body.
        </t>
      </list>
    </t>
    <t hangText="Encoding considerations:">
      HTTP messages enclosed by this type
      are in "binary" format; use of an appropriate
      Content-Transfer-Encoding is required when
      transmitted via E-mail.
    </t>
    <t hangText="Security considerations:">
      none
    </t>
    <t hangText="Interoperability considerations:">
      none
    </t>
    <t hangText="Published specification:">
      This specification (see <xref target="internet.media.type.application.http"/>).
    </t>
    <t hangText="Applications that use this media type:">
    </t>
    <t hangText="Additional information:">
      <list style="hanging">
        <t hangText="Magic number(s):">none</t>
        <t hangText="File extension(s):">none</t>
        <t hangText="Macintosh file type code(s):">none</t>
      </list>
    </t>
    <t hangText="Person and email address to contact for further information:">
      See Authors Section.
    </t>
		<t hangText="Intended usage:">
		  COMMON
    </t>
		<t hangText="Restrictions on usage:">
		  none
    </t>
    <t hangText="Author/Change controller:">
      IESG
    </t>
  </list>
</t>
</section>
</section>

<section title="Tolerant Applications" anchor="tolerant.applications">
<t>
   Although this document specifies the requirements for the generation
   of HTTP/1.1 messages, not all applications will be correct in their
   implementation. We therefore recommend that operational applications
   be tolerant of deviations whenever those deviations can be
   interpreted unambiguously.
</t>
<t>
   Clients &SHOULD; be tolerant in parsing the Status-Line and servers
   tolerant when parsing the Request-Line. In particular, they &SHOULD;
   accept any amount of SP or HT characters between fields, even though
   only a single SP is required.
</t>
<t>
   The line terminator for message-header fields is the sequence CRLF.
   However, we recommend that applications, when parsing such headers,
   recognize a single LF as a line terminator and ignore the leading CR.
</t>
<t>
   The character set of an entity-body &SHOULD; be labeled as the lowest
   common denominator of the character codes used within that body, with
   the exception that not labeling the entity is preferred over labeling
   the entity with the labels US-ASCII or ISO-8859-1. See &payload;.
</t>
<t>
   Additional rules for requirements on parsing and encoding of dates
   and other potential problems with date encodings include:
</t>
<t>
  <list style="symbols">
     <t>HTTP/1.1 clients and caches &SHOULD; assume that an RFC-850 date
        which appears to be more than 50 years in the future is in fact
        in the past (this helps solve the "year 2000" problem).</t>

     <t>An HTTP/1.1 implementation &MAY; internally represent a parsed
        Expires date as earlier than the proper value, but &MUST-NOT;
        internally represent a parsed Expires date as later than the
        proper value.</t>

     <t>All expiration-related calculations &MUST; be done in GMT. The
        local time zone &MUST-NOT; influence the calculation or comparison
        of an age or expiration time.</t>

     <t>If an HTTP header incorrectly carries a date value with a time
        zone other than GMT, it &MUST; be converted into GMT using the
        most conservative possible conversion.</t>
  </list>
</t>
</section>

<section title="Conversion of Date Formats" anchor="conversion.of.date.formats">
<t>
   HTTP/1.1 uses a restricted set of date formats (<xref target="full.date"/>) to
   simplify the process of date comparison. Proxies and gateways from
   other protocols &SHOULD; ensure that any Date header field present in a
   message conforms to one of the HTTP/1.1 formats and rewrite the date
   if necessary.
</t>
</section>

<section title="Compatibility with Previous Versions" anchor="compatibility">
<t>
   It is beyond the scope of a protocol specification to mandate
   compliance with previous versions. HTTP/1.1 was deliberately
   designed, however, to make supporting previous versions easy. It is
   worth noting that, at the time of composing this specification
   (1996), we would expect commercial HTTP/1.1 servers to:
  <list style="symbols">
     <t>recognize the format of the Request-Line for HTTP/0.9, 1.0, and
        1.1 requests;</t>

     <t>understand any valid request in the format of HTTP/0.9, 1.0, or
        1.1;</t>

     <t>respond appropriately with a message in the same major version
        used by the client.</t>
  </list>
</t>
<t>
   And we would expect HTTP/1.1 clients to:
  <list style="symbols">
     <t>recognize the format of the Status-Line for HTTP/1.0 and 1.1
        responses;</t>

     <t>understand any valid response in the format of HTTP/0.9, 1.0, or
        1.1.</t>
  </list>
</t>
<t>
   For most implementations of HTTP/1.0, each connection is established
   by the client prior to the request and closed by the server after
   sending the response. Some implementations implement the Keep-Alive
   version of persistent connections described in <xref x:sec="19.7.1" x:fmt="of" target="RFC2068"/>.
</t>

<section title="Changes from HTTP/1.0" anchor="changes.from.1.0">
<t>
   This section summarizes major differences between versions HTTP/1.0
   and HTTP/1.1.
</t>

<section title="Changes to Simplify Multi-homed Web Servers and Conserve IP Addresses" anchor="changes.to.simplify.multi-homed.web.servers.and.conserve.ip.addresses">
<t>
   The requirements that clients and servers support the Host request-header,
   report an error if the Host request-header (<xref target="header.host"/>) is
   missing from an HTTP/1.1 request, and accept absolute URIs (<xref target="request-uri"/>)
   are among the most important changes defined by this
   specification.
</t>
<t>
   Older HTTP/1.0 clients assumed a one-to-one relationship of IP
   addresses and servers; there was no other established mechanism for
   distinguishing the intended server of a request than the IP address
   to which that request was directed. The changes outlined above will
   allow the Internet, once older HTTP clients are no longer common, to
   support multiple Web sites from a single IP address, greatly
   simplifying large operational Web servers, where allocation of many
   IP addresses to a single host has created serious problems. The
   Internet will also be able to recover the IP addresses that have been
   allocated for the sole purpose of allowing special-purpose domain
   names to be used in root-level HTTP URLs. Given the rate of growth of
   the Web, and the number of servers already deployed, it is extremely
   important that all implementations of HTTP (including updates to
   existing HTTP/1.0 applications) correctly implement these
   requirements:
  <list style="symbols">
     <t>Both clients and servers &MUST; support the Host request-header.</t>

     <t>A client that sends an HTTP/1.1 request &MUST; send a Host header.</t>

     <t>Servers &MUST; report a 400 (Bad Request) error if an HTTP/1.1
        request does not include a Host request-header.</t>

     <t>Servers &MUST; accept absolute URIs.</t>
  </list>
</t>
</section>
</section>

<section title="Compatibility with HTTP/1.0 Persistent Connections" anchor="compatibility.with.http.1.0.persistent.connections">
<t>
   Some clients and servers might wish to be compatible with some
   previous implementations of persistent connections in HTTP/1.0
   clients and servers. Persistent connections in HTTP/1.0 are
   explicitly negotiated as they are not the default behavior. HTTP/1.0
   experimental implementations of persistent connections are faulty,
   and the new facilities in HTTP/1.1 are designed to rectify these
   problems. The problem was that some existing 1.0 clients may be
   sending Keep-Alive to a proxy server that doesn't understand
   Connection, which would then erroneously forward it to the next
   inbound server, which would establish the Keep-Alive connection and
   result in a hung HTTP/1.0 proxy waiting for the close on the
   response. The result is that HTTP/1.0 clients must be prevented from
   using Keep-Alive when talking to proxies.
</t>
<t>
   However, talking to proxies is the most important use of persistent
   connections, so that prohibition is clearly unacceptable. Therefore,
   we need some other mechanism for indicating a persistent connection
   is desired, which is safe to use even when talking to an old proxy
   that ignores Connection. Persistent connections are the default for
   HTTP/1.1 messages; we introduce a new keyword (Connection: close) for
   declaring non-persistence. See <xref target="header.connection"/>.
</t>
<t>
   The original HTTP/1.0 form of persistent connections (the Connection:
   Keep-Alive and Keep-Alive header) is documented in <xref target="RFC2068"/>.
</t>
</section>

<section title="Changes from RFC 2068" anchor="changes.from.rfc.2068">
<t>
   This specification has been carefully audited to correct and
   disambiguate key word usage; RFC 2068 had many problems in respect to
   the conventions laid out in <xref target="RFC2119"/>.
</t>
<t>
   Transfer-coding and message lengths all interact in ways that
   required fixing exactly when chunked encoding is used (to allow for
   transfer encoding that may not be self delimiting); it was important
   to straighten out exactly how message lengths are computed. (Sections
   <xref target="transfer.codings" format="counter"/>, <xref target="message.length" format="counter"/>,
   <xref target="header.content-length" format="counter"/>,
   see also <xref target="Part3"/>, <xref target="Part5"/> and <xref target="Part6"/>)
</t>
<t>
   The use and interpretation of HTTP version numbers has been clarified
   by <xref target="RFC2145"/>. Require proxies to upgrade requests to highest protocol
   version they support to deal with problems discovered in HTTP/1.0
   implementations (<xref target="http.version"/>)
</t>
<t>
   Transfer-coding had significant problems, particularly with
   interactions with chunked encoding. The solution is that transfer-codings
   become as full fledged as content-codings. This involves
   adding an IANA registry for transfer-codings (separate from content
   codings), a new header field (TE) and enabling trailer headers in the
   future. Transfer encoding is a major performance benefit, so it was
   worth fixing <xref target="Nie1997"/>. TE also solves another, obscure, downward
   interoperability problem that could have occurred due to interactions
   between authentication trailers, chunked encoding and HTTP/1.0
   clients.(Section <xref target="transfer.codings" format="counter"/>, <xref target="chunked.transfer.encoding" format="counter"/>,
   and <xref target="header.te" format="counter"/>)
</t>
</section>

<section title="Changes from RFC 2616" anchor="changes.from.rfc.2616">
<t>
  Clarify that HTTP-Version is case sensitive.
  (<xref target="http.version"/>)
</t>
<t>
  Remove reference to non-existant identity transfer-coding value tokens.
  (Sections <xref format="counter" target="transfer.codings"/> and
  <xref format="counter" target="message.length"/>)
</t>
<t>
  Clarification that the chunk length does not include
  the count of the octets in the chunk header and trailer.
  (<xref target="chunked.transfer.encoding"/>)
</t>
<t>
  Fix BNF to add query, as the abs_path production in
  <xref x:sec="3" x:fmt="of" target="RFC2396"/> doesn't define it.
  (<xref target="request-uri"/>)
</t>
<t>
  Clarify exactly when close connection options must be sent.
  (<xref target="header.connection"/>)
</t>
</section>
</section>

<section title="Change Log (to be removed by RFC Editor before publication)">

<section title="Since RFC2616">
<t>
  Extracted relevant partitions from <xref target="RFC2616"/>.
</t>
</section>

<section title="Since draft-ietf-httpbis-p1-messaging-00">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://www3.tools.ietf.org/wg/httpbis/trac/ticket/1"/>:
      "HTTP Version should be case sensitive"
      (<eref target="http://purl.org/NET/http-errata#verscase"/>)
    </t>
    <t>
      <eref target="http://www3.tools.ietf.org/wg/httpbis/trac/ticket/2"/>:
      "'unsafe' characters"
      (<eref target="http://purl.org/NET/http-errata#unsafe-uri"/>)
    </t>
    <t>
      <eref target="http://www3.tools.ietf.org/wg/httpbis/trac/ticket/3"/>:
      "Chunk Size Definition"
      (<eref target="http://purl.org/NET/http-errata#chunk-size"/>)
    </t>
    <t>
      <eref target="http://www3.tools.ietf.org/wg/httpbis/trac/ticket/4"/>:
      "Message Length"
      (<eref target="http://purl.org/NET/http-errata#msg-len-chars"/>)
    </t>
    <t>
      <eref target="http://www3.tools.ietf.org/wg/httpbis/trac/ticket/8"/>:
      "Media Type Registrations"
      (<eref target="http://purl.org/NET/http-errata#media-reg"/>)
    </t>
    <t>
      <eref target="http://www3.tools.ietf.org/wg/httpbis/trac/ticket/11"/>:
      "URI includes query"
      (<eref target="http://purl.org/NET/http-errata#uriquery"/>)
    </t>
    <t>
      <eref target="http://www3.tools.ietf.org/wg/httpbis/trac/ticket/15"/>:
      "No close on 1xx responses"
      (<eref target="http://purl.org/NET/http-errata#noclose1xx"/>)
    </t>
    <t>
      <eref target="http://www3.tools.ietf.org/wg/httpbis/trac/ticket/16"/>:
      "Remove 'identity' token references"
      (<eref target="http://purl.org/NET/http-errata#identity"/>)
    </t>
    <t>
      <eref target="http://www3.tools.ietf.org/wg/httpbis/trac/ticket/26"/>:
      "Import query BNF"
    </t>
    <t>
      <eref target="http://www3.tools.ietf.org/wg/httpbis/trac/ticket/31"/>:
      "qdtext BNF"
    </t>
    <t>
      <eref target="http://www3.tools.ietf.org/wg/httpbis/trac/ticket/35"/>:
      "Normative and Informative references"
    </t>
    <t>
      <eref target="http://www3.tools.ietf.org/wg/httpbis/trac/ticket/42"/>:
      "RFC2606 Compliance"
    </t>
    <t>
      <eref target="http://www3.tools.ietf.org/wg/httpbis/trac/ticket/45"/>:
      "RFC977 reference"
    </t>
    <t>
      <eref target="http://www3.tools.ietf.org/wg/httpbis/trac/ticket/46"/>:
      "RFC1700 references"
    </t>
    <t>
      <eref target="http://www3.tools.ietf.org/wg/httpbis/trac/ticket/47"/>:
      "inconsistency in date format explanation"
    </t>
    <t>
      <eref target="http://www3.tools.ietf.org/wg/httpbis/trac/ticket/48"/>:
      "Date reference typo"
    </t>
    <t>
      <eref target="http://www3.tools.ietf.org/wg/httpbis/trac/ticket/65"/>:
      "Informative references"
    </t>
    <t>
      <eref target="http://www3.tools.ietf.org/wg/httpbis/trac/ticket/66"/>:
      "ISO-8859-1 Reference"
    </t>
    <t>
      <eref target="http://www3.tools.ietf.org/wg/httpbis/trac/ticket/86"/>:
      "Normative up-to-date references"
    </t>
  </list>
</t>
<t>
  Other changes:
  <list style="symbols"> 
    <t>
      Update media type registrations to use RFC4288 template.
    </t>
  </list>
</t>
</section>

</section>

</back>
</rfc>
