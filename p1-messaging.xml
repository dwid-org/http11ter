<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type='text/xsl' href='../myxml2rfc.xslt'?>
<!DOCTYPE rfc [
  <!ENTITY MAY "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>MAY</bcp14>">
  <!ENTITY MUST "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>MUST</bcp14>">
  <!ENTITY MUST-NOT "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>MUST NOT</bcp14>">
  <!ENTITY OPTIONAL "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>OPTIONAL</bcp14>">
  <!ENTITY RECOMMENDED "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>RECOMMENDED</bcp14>">
  <!ENTITY REQUIRED "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>REQUIRED</bcp14>">
  <!ENTITY SHALL "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>SHALL</bcp14>">
  <!ENTITY SHALL-NOT "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>SHALL NOT</bcp14>">
  <!ENTITY SHOULD "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>SHOULD</bcp14>">
  <!ENTITY SHOULD-NOT "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>SHOULD NOT</bcp14>">
  <!ENTITY ID-VERSION "latest">
  <!ENTITY ID-MONTH "February">
  <!ENTITY ID-YEAR "2010">
  <!ENTITY caching-overview       "<xref target='Part6' x:rel='#caching.overview' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY payload                "<xref target='Part3' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY media-types            "<xref target='Part3' x:rel='#media.types' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY content-codings        "<xref target='Part3' x:rel='#content.codings' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY CONNECT                "<xref target='Part2' x:rel='#CONNECT' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY content.negotiation    "<xref target='Part3' x:rel='#content.negotiation' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY diff2045entity         "<xref target='Part3' x:rel='#differences.between.http.entities.and.rfc.2045.entities' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY entity                 "<xref target='Part3' x:rel='#entity' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY entity-body            "<xref target='Part3' x:rel='#entity.body' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY entity-header-fields   "<xref target='Part3' x:rel='#entity.header.fields' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-cache-control   "<xref target='Part6' x:rel='#header.cache-control' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-expect          "<xref target='Part2' x:rel='#header.expect' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-pragma          "<xref target='Part6' x:rel='#header.pragma' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY header-warning         "<xref target='Part6' x:rel='#header.warning' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY idempotent-methods     "<xref target='Part2' x:rel='#idempotent.methods' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY request-header-fields  "<xref target='Part2' x:rel='#request.header.fields' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY response-header-fields "<xref target='Part2' x:rel='#response.header.fields' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY status-codes           "<xref target='Part2' x:rel='#status.codes' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY status-100             "<xref target='Part2' x:rel='#status.100' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY status-1xx             "<xref target='Part2' x:rel='#status.1xx' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
  <!ENTITY status-414             "<xref target='Part2' x:rel='#status.414' xmlns:x='http://purl.org/net/xml2rfc/ext'/>">
]>
<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no" ?>
<?rfc linkmailto="no" ?>
<?rfc editing="no" ?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc-ext allow-markup-in-artwork="yes" ?>
<?rfc-ext include-references-in-index="yes" ?>
<rfc obsoletes="2616" updates="2817" category="std" x:maturity-level="draft"
     ipr="pre5378Trust200902" docName="draft-ietf-httpbis-p1-messaging-&ID-VERSION;"
     xmlns:x='http://purl.org/net/xml2rfc/ext'>
<front>

  <title abbrev="HTTP/1.1, Part 1">HTTP/1.1, part 1: URIs, Connections, and Message Parsing</title>

  <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
    <organization abbrev="Day Software">Day Software</organization>
    <address>
      <postal>
        <street>23 Corporate Plaza DR, Suite 280</street>
        <city>Newport Beach</city>
        <region>CA</region>
        <code>92660</code>
        <country>USA</country>
      </postal>
      <phone>+1-949-706-5300</phone>
      <facsimile>+1-949-706-5305</facsimile>
      <email>fielding@gbiv.com</email>
      <uri>http://roy.gbiv.com/</uri>
    </address>
  </author>

  <author initials="J." surname="Gettys" fullname="Jim Gettys">
    <organization>One Laptop per Child</organization>
    <address>
      <postal>
        <street>21 Oak Knoll Road</street>
        <city>Carlisle</city>
        <region>MA</region>
        <code>01741</code>
        <country>USA</country>
      </postal>
      <email>jg@laptop.org</email>
      <uri>http://www.laptop.org/</uri>
    </address>
  </author>
  
  <author initials="J." surname="Mogul" fullname="Jeffrey C. Mogul">
    <organization abbrev="HP">Hewlett-Packard Company</organization>
    <address>
      <postal>
        <street>HP Labs, Large Scale Systems Group</street>
        <street>1501 Page Mill Road, MS 1177</street>
        <city>Palo Alto</city>
        <region>CA</region>
        <code>94304</code>
        <country>USA</country>
      </postal>
      <email>JeffMogul@acm.org</email>
    </address>
  </author>

  <author initials="H." surname="Frystyk" fullname="Henrik Frystyk Nielsen">
    <organization abbrev="Microsoft">Microsoft Corporation</organization>
    <address>
      <postal>
        <street>1 Microsoft Way</street>
        <city>Redmond</city>
        <region>WA</region>
        <code>98052</code>
        <country>USA</country>
      </postal>
      <email>henrikn@microsoft.com</email>
    </address>
  </author>

  <author initials="L." surname="Masinter" fullname="Larry Masinter">
    <organization abbrev="Adobe Systems">Adobe Systems, Incorporated</organization>
    <address>
      <postal>
        <street>345 Park Ave</street>
        <city>San Jose</city>
        <region>CA</region>
        <code>95110</code>
        <country>USA</country>
      </postal>
      <email>LMM@acm.org</email>
      <uri>http://larry.masinter.net/</uri>
    </address>
  </author>
  
  <author initials="P." surname="Leach" fullname="Paul J. Leach">
    <organization abbrev="Microsoft">Microsoft Corporation</organization>
    <address>
      <postal>
        <street>1 Microsoft Way</street>
        <city>Redmond</city>
        <region>WA</region>
        <code>98052</code>
      </postal>
      <email>paulle@microsoft.com</email>
    </address>
  </author>
   
  <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
    <organization abbrev="W3C/MIT">World Wide Web Consortium</organization>
    <address>
      <postal>
        <street>MIT Computer Science and Artificial Intelligence Laboratory</street>
        <street>The Stata Center, Building 32</street>
        <street>32 Vassar Street</street>
        <city>Cambridge</city>
        <region>MA</region>
        <code>02139</code>
        <country>USA</country>
      </postal>
      <email>timbl@w3.org</email>
      <uri>http://www.w3.org/People/Berners-Lee/</uri>
    </address>
  </author>

  <author initials="Y." surname="Lafon" fullname="Yves Lafon" role="editor">
    <organization abbrev="W3C">World Wide Web Consortium</organization>
    <address>
      <postal>
        <street>W3C / ERCIM</street>
        <street>2004, rte des Lucioles</street>
        <city>Sophia-Antipolis</city>
        <region>AM</region>
        <code>06902</code>
        <country>France</country>
      </postal>
      <email>ylafon@w3.org</email>
      <uri>http://www.raubacapeu.net/people/yves/</uri>
    </address>
  </author>

  <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
    <organization abbrev="greenbytes">greenbytes GmbH</organization>
    <address>
      <postal>
        <street>Hafenweg 16</street>
        <city>Muenster</city><region>NW</region><code>48155</code>
        <country>Germany</country>
      </postal>
      <phone>+49 251 2807760</phone>
      <facsimile>+49 251 2807761</facsimile>
      <email>julian.reschke@greenbytes.de</email>
      <uri>http://greenbytes.de/tech/webdav/</uri>
    </address>
  </author>

  <date month="&ID-MONTH;" year="&ID-YEAR;"/>
  <workgroup>HTTPbis Working Group</workgroup>

<abstract>
<t>
   The Hypertext Transfer Protocol (HTTP) is an application-level
   protocol for distributed, collaborative, hypertext information
   systems. HTTP has been in use by the World Wide Web global information
   initiative since 1990. This document is Part 1 of the seven-part specification
   that defines the protocol referred to as "HTTP/1.1" and, taken together,
   obsoletes RFC 2616.  Part 1 provides an overview of HTTP and
   its associated terminology, defines the "http" and "https" Uniform
   Resource Identifier (URI) schemes, defines the generic message syntax
   and parsing requirements for HTTP message frames, and describes
   general security concerns for implementations.
</t>
</abstract>

<note title="Editorial Note (To be removed by RFC Editor)">
  <t>
    Discussion of this draft should take place on the HTTPBIS working group
    mailing list (ietf-http-wg@w3.org). The current issues list is
    at <eref target="http://tools.ietf.org/wg/httpbis/trac/report/11"/>
    and related documents (including fancy diffs) can be found at
    <eref target="http://tools.ietf.org/wg/httpbis/"/>.
  </t>
  <t>
    The changes in this draft are summarized in <xref target="changes.since.08"/>.
  </t>
</note>
</front>
<middle>
<section title="Introduction" anchor="introduction">
<t>
   The Hypertext Transfer Protocol (HTTP) is an application-level
   request/response protocol that uses extensible semantics and MIME-like
   message payloads for flexible interaction with network-based hypertext
   information systems. HTTP relies upon the Uniform Resource Identifier (URI)
   standard <xref target="RFC3986"/> to indicate request targets and
   relationships between resources.
   Messages are passed in a format similar to that used by Internet mail
   <xref target="RFC5322"/> and the Multipurpose Internet Mail Extensions
   (MIME) <xref target="RFC2045"/> (see &diff2045entity; for the differences
   between HTTP and MIME messages).
</t>
<t>
   HTTP is a generic interface protocol for information systems. It is
   designed to hide the details of how a service is implemented by presenting
   a uniform interface to clients that is independent of the types of
   resources provided. Likewise, servers do not need to be aware of each
   client's purpose: an HTTP request can be considered in isolation rather
   than being associated with a specific type of client or a predetermined
   sequence of application steps. The result is a protocol that can be used
   effectively in many different contexts and for which implementations can
   evolve independently over time.
</t>
<t>
   HTTP is also designed for use as a generic protocol for translating
   communication to and from other Internet information systems.
   HTTP proxies and gateways provide access to alternative information
   services by translating their diverse protocols into a hypertext
   format that can be viewed and manipulated by clients in the same way
   as HTTP services.
</t>
<t>
   One consequence of HTTP flexibility is that the protocol cannot be
   defined in terms of what occurs behind the interface. Instead, we
   are limited to defining the syntax of communication, the intent
   of received communication, and the expected behavior of recipients.
   If the communication is considered in isolation, then successful
   actions should be reflected in corresponding changes to the
   observable interface provided by servers. However, since multiple
   clients may act in parallel and perhaps at cross-purposes, we
   cannot require that such changes be observable beyond the scope
   of a single response.
</t>
<t>
   This document is Part 1 of the seven-part specification of HTTP,
   defining the protocol referred to as "HTTP/1.1" and obsoleting
   <xref target="RFC2616"/>.
   Part 1 describes the architectural elements that are used or
   referred to in HTTP, defines the "http" and "https" URI schemes,
   describes overall network operation and connection management,
   and defines HTTP message framing and forwarding requirements.
   Our goal is to define all of the mechanisms necessary for HTTP message
   handling that are independent of message semantics, thereby defining the
   complete set of requirements for message parsers and
   message-forwarding intermediaries.
</t>

<section title="Requirements" anchor="intro.requirements">
<t>
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in <xref target="RFC2119"/>.
</t>
<t>
   An implementation is not compliant if it fails to satisfy one or more
   of the &MUST; or &REQUIRED; level requirements for the protocols it
   implements. An implementation that satisfies all the &MUST; or &REQUIRED;
   level and all the &SHOULD; level requirements for its protocols is said
   to be "unconditionally compliant"; one that satisfies all the &MUST;
   level requirements but not all the &SHOULD; level requirements for its
   protocols is said to be "conditionally compliant."
</t>
</section>

<section title="Syntax Notation" anchor="notation">
<iref primary="true" item="Grammar" subitem="ALPHA"/>
<iref primary="true" item="Grammar" subitem="CR"/>
<iref primary="true" item="Grammar" subitem="CRLF"/>
<iref primary="true" item="Grammar" subitem="CTL"/>
<iref primary="true" item="Grammar" subitem="DIGIT"/>
<iref primary="true" item="Grammar" subitem="DQUOTE"/>
<iref primary="true" item="Grammar" subitem="HEXDIG"/>
<iref primary="true" item="Grammar" subitem="LF"/>
<iref primary="true" item="Grammar" subitem="OCTET"/>
<iref primary="true" item="Grammar" subitem="SP"/>
<iref primary="true" item="Grammar" subitem="VCHAR"/>
<iref primary="true" item="Grammar" subitem="WSP"/>
<t>
   This specification uses the Augmented Backus-Naur Form (ABNF) notation
   of <xref target="RFC5234"/>.
</t>
<t anchor="core.rules">
  <x:anchor-alias value="ALPHA"/>
  <x:anchor-alias value="CTL"/>
  <x:anchor-alias value="CR"/>
  <x:anchor-alias value="CRLF"/>
  <x:anchor-alias value="DIGIT"/>
  <x:anchor-alias value="DQUOTE"/>
  <x:anchor-alias value="HEXDIG"/>
  <x:anchor-alias value="LF"/>
  <x:anchor-alias value="OCTET"/>
  <x:anchor-alias value="SP"/>
  <x:anchor-alias value="VCHAR"/>
  <x:anchor-alias value="WSP"/>
   The following core rules are included by
   reference, as defined in <xref target="RFC5234" x:fmt="," x:sec="B.1"/>:
   ALPHA (letters), CR (carriage return), CRLF (CR LF), CTL (controls),
   DIGIT (decimal 0-9), DQUOTE (double quote),
   HEXDIG (hexadecimal 0-9/A-F/a-f), LF (line feed),
   OCTET (any 8-bit sequence of data), SP (space),
   VCHAR (any visible <xref target="USASCII"/> character),
   and WSP (whitespace).
</t>
<t>
   As a syntactical convention, ABNF rule names prefixed with "obs-" denote
   "obsolete" grammar rules that appear for historical reasons.
</t>

<section title="ABNF Extension: #rule" anchor="notation.abnf">
<t>
  The #rule extension to the ABNF rules of <xref target="RFC5234"/> is used to
  improve readability. 
</t>
<t>
  A construct "#" is defined, similar to "*", for defining comma-delimited
  lists of elements. The full form is "&lt;n&gt;#&lt;m&gt;element" indicating
  at least &lt;n&gt; and at most &lt;m&gt; elements, each separated by a single
  comma (",") and optional whitespace (OWS,
  <xref target="basic.rules"/>).   
</t>
<figure><preamble>
  Thus,
</preamble><artwork type="example">
  1#element =&gt; element *( OWS "," OWS element )
</artwork></figure>
<figure><preamble>
  and:
</preamble><artwork type="example">
  #element =&gt; [ 1#element ]
</artwork></figure>
<figure><preamble>
  and for n &gt;= 1 and m &gt; 1:
</preamble><artwork type="example">
  &lt;n&gt;#&lt;m&gt;element =&gt; element &lt;n-1&gt;*&lt;m-1&gt;( OWS "," OWS element )
</artwork></figure>
<t>
  For compatibility with legacy list rules, recipients &SHOULD; accept empty
  list elements. In other words, consumers would follow the list productions:
</t>
<figure><artwork type="example">
  #element =&gt; [ ( "," / element ) *( OWS "," [ OWS element ] ) ]
  
  1#element =&gt; *( "," OWS ) element *( OWS "," [ OWS element ] )
</artwork></figure>
<t>
  Note that empty elements do not contribute to the count of elements present,
  though.
</t>
<t>
  For example, given these ABNF productions: 
</t>
<figure><artwork type="example">
  example-list      = 1#example-list-elmt
  example-list-elmt = token ; see <xref target="basic.rules"/> 
</artwork></figure>
<t>
  Then these are valid values for example-list (not including the double
  quotes, which are present for delimitation only):
</t>
<figure><artwork type="example">
  "foo,bar"
  " foo ,bar,"
  "  foo , ,bar,charlie   "
  "foo ,bar,   charlie "
</artwork></figure>
<t>
  But these values would be invalid, as at least one non-empty element is
  required:
</t>
<figure><artwork type="example">
  ""
  ","
  ",   ,"
</artwork></figure>
<t>
  <xref target="collected.abnf"/> shows the collected ABNF, with the list rules
  expanded as explained above.
</t>
</section>

<section title="Basic Rules" anchor="basic.rules">
<t anchor="rule.CRLF">
  <x:anchor-alias value="CRLF"/>
   HTTP/1.1 defines the sequence CR LF as the end-of-line marker for all
   protocol elements except the entity-body (see <xref target="tolerant.applications"/> for
   tolerant applications). The end-of-line marker within an entity-body
   is defined by its associated media type, as described in &media-types;.
</t>
<t anchor="rule.LWS">
   This specification uses three rules to denote the use of linear
   whitespace: OWS (optional whitespace), RWS (required whitespace), and
   BWS ("bad" whitespace). 
</t>
<t>
   The OWS rule is used where zero or more linear whitespace characters may
   appear. OWS &SHOULD; either not be produced or be produced as a single SP
   character. Multiple OWS characters that occur within field-content &SHOULD;
   be replaced with a single SP before interpreting the field value or
   forwarding the message downstream.
</t>
<t>
   RWS is used when at least one linear whitespace character is required to
   separate field tokens. RWS &SHOULD; be produced as a single SP character.
   Multiple RWS characters that occur within field-content &SHOULD; be
   replaced with a single SP before interpreting the field value or
   forwarding the message downstream.
</t>
<t>
   BWS is used where the grammar allows optional whitespace for historical
   reasons but senders &SHOULD-NOT; produce it in messages. HTTP/1.1
   recipients &MUST; accept such bad optional whitespace and remove it before
   interpreting the field value or forwarding the message downstream.
</t>
<t anchor="rule.whitespace">
  <x:anchor-alias value="BWS"/>
  <x:anchor-alias value="OWS"/>
  <x:anchor-alias value="RWS"/>
  <x:anchor-alias value="obs-fold"/>
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="OWS"/><iref primary="true" item="Grammar" subitem="RWS"/><iref primary="true" item="Grammar" subitem="BWS"/>
  <x:ref>OWS</x:ref>            = *( [ obs-fold ] <x:ref>WSP</x:ref> )
                 ; "optional" whitespace
  <x:ref>RWS</x:ref>            = 1*( [ obs-fold ] <x:ref>WSP</x:ref> )
                 ; "required" whitespace
  <x:ref>BWS</x:ref>            = <x:ref>OWS</x:ref>
                 ; "bad" whitespace
  <x:ref>obs-fold</x:ref>       = <x:ref>CRLF</x:ref>
                 ; see <xref target="header.fields"/>
</artwork></figure>
<t anchor="rule.token.separators">
  <x:anchor-alias value="tchar"/>
  <x:anchor-alias value="token"/>
  <x:anchor-alias value="special"/>
   Many HTTP/1.1 header field values consist of words (token or quoted-string)
   separated by whitespace or special characters. These special characters
   &MUST; be in a quoted string to be used within a parameter value (as defined
   in <xref target="transfer.codings"/>).
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="token"/><iref primary="true" item="Grammar" subitem="tchar"/><iref primary="true" item="Grammar" subitem="special"/>
  <x:ref>token</x:ref>          = 1*<x:ref>tchar</x:ref>
<!--
  IMPORTANT: when editing "tchar" make sure that "special" is updated accordingly!!!
 -->
  <x:ref>tchar</x:ref>          = "!" / "#" / "$" / "%" / "&amp;" / "'" / "*"
                 / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~" 
                 / <x:ref>DIGIT</x:ref> / <x:ref>ALPHA</x:ref>
                 ; any <x:ref>VCHAR</x:ref>, except <x:ref>special</x:ref>

  <x:ref>special</x:ref>        = "(" / ")" / "&lt;" / ">" / "@" / ","
                 / ";" / ":" / "\" / DQUOTE / "/" / "[" 
                 / "]" / "?" / "=" / "{" / "}"
</artwork></figure>
<t anchor="rule.quoted-string">
  <x:anchor-alias value="quoted-string"/>
  <x:anchor-alias value="qdtext"/>
  <x:anchor-alias value="obs-text"/>
   A string of text is parsed as a single word if it is quoted using
   double-quote marks.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="quoted-string"/><iref primary="true" item="Grammar" subitem="qdtext"/><iref primary="true" item="Grammar" subitem="obs-text"/>
  <x:ref>quoted-string</x:ref>  = <x:ref>DQUOTE</x:ref> *( <x:ref>qdtext</x:ref> / <x:ref>quoted-pair</x:ref> ) <x:ref>DQUOTE</x:ref>
  <x:ref>qdtext</x:ref>         = <x:ref>OWS</x:ref> / %x21 / %x23-5B / %x5D-7E / <x:ref>obs-text</x:ref>
                 ; <x:ref>OWS</x:ref> / &lt;<x:ref>VCHAR</x:ref> except <x:ref>DQUOTE</x:ref> and "\"&gt; / <x:ref>obs-text</x:ref> 
  <x:ref>obs-text</x:ref>       = %x80-FF
</artwork></figure>
<t anchor="rule.quoted-pair">
  <x:anchor-alias value="quoted-pair"/>
   The backslash character ("\") can be used as a single-character
   quoting mechanism within quoted-string constructs:
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="quoted-pair"/>
  <x:ref>quoted-pair</x:ref>    = "\" ( <x:ref>WSP</x:ref> / <x:ref>VCHAR</x:ref> / <x:ref>obs-text</x:ref> ) 
</artwork></figure>
<t>
   Producers &SHOULD-NOT; escape characters that do not require escaping
   (i.e., other than DQUOTE and the backslash character).
</t>
</section>

<section title="ABNF Rules defined in other Parts of the Specification" anchor="abnf.dependencies">
  <x:anchor-alias value="request-header"/>
  <x:anchor-alias value="response-header"/>
  <x:anchor-alias value="entity-body"/>
  <x:anchor-alias value="entity-header"/>
  <x:anchor-alias value="Cache-Control"/>
  <x:anchor-alias value="Pragma"/>
  <x:anchor-alias value="Warning"/>
<t>
  The ABNF rules below are defined in other parts: 
</t>
<figure><!-- Part2--><artwork type="abnf2616">
  <x:ref>request-header</x:ref>  = &lt;request-header, defined in &request-header-fields;&gt;
  <x:ref>response-header</x:ref> = &lt;response-header, defined in &response-header-fields;&gt;
</artwork></figure>
<figure><!-- Part3--><artwork type="abnf2616">
  <x:ref>entity-body</x:ref>     = &lt;entity-body, defined in &entity-body;&gt;
  <x:ref>entity-header</x:ref>   = &lt;entity-header, defined in &entity-header-fields;&gt;
</artwork></figure>
<figure><!-- Part6--><artwork type="abnf2616">
  <x:ref>Cache-Control</x:ref>   = &lt;Cache-Control, defined in &header-pragma;&gt;
  <x:ref>Pragma</x:ref>          = &lt;Pragma, defined in &header-pragma;&gt;
  <x:ref>Warning</x:ref>         = &lt;Warning, defined in &header-warning;&gt;
</artwork></figure>
</section>

</section>
</section>

<section title="HTTP architecture" anchor="architecture">
<t>
   HTTP was created for the World Wide Web architecture
   and has evolved over time to support the scalability needs of a worldwide
   hypertext system. Much of that architecture is reflected in the terminology
   and syntax productions used to define HTTP.
</t>

<section title="Client/Server Operation" anchor="operation">
<iref item="client"/>
<iref item="server"/>
<iref item="connection"/>
<t>
   HTTP is a request/response protocol that operates by exchanging messages
   across a reliable transport or session-layer connection. An HTTP client
   is a program that establishes a connection to a server for the purpose
   of sending one or more HTTP requests.  An HTTP server is a program that
   accepts connections in order to service HTTP requests by sending HTTP
   responses.
</t>
<iref item="user agent"/>
<iref item="origin server"/>
<t>
   Note that the terms "client" and "server" refer only to the roles that
   these programs perform for a particular connection.  The same program
   may act as a client on some connections and a server on others.  We use
   the term "user agent" to refer to the program that initiates a request,
   such as a WWW browser, editor, or spider (web-traversing robot), and
   the term "origin server" to refer to the program that can originate
   authoritative responses to a request.
</t>
<t>
   Most HTTP communication consists of a retrieval request (GET) for
   a representation of some resource identified by a URI.  In the
   simplest case, this may be accomplished via a single connection (v)
   between the user agent (UA) and the origin server (O).
</t>
<figure><artwork type="drawing">
       request chain ------------------------&gt;
    UA -------------------v------------------- O
       &lt;----------------------- response chain
</artwork></figure>
<iref item="message"/>
<iref item="request"/>
<iref item="response"/>
<t>
   A client sends an HTTP request to the server in the form of a request
   message (<xref target="request"/>), beginning with a method, URI, and
   protocol version, followed by MIME-like header fields containing
   request modifiers, client information, and payload metadata, an empty
   line to indicate the end of the header section, and finally the payload
   body (if any).
</t>
<t>
   A server responds to the client's request by sending an HTTP response
   message (<xref target="response"/>), beginning with a status line that
   includes the protocol version, a success or error code, and textual
   reason phrase, followed by MIME-like header fields containing server
   information, resource metadata, and payload metadata, an empty line to
   indicate the end of the header section, and finally the payload body (if any).
</t>
<t>
   The following example illustrates a typical message exchange for a
   GET request on the URI "http://www.example.com/hello.txt":
</t>
<figure><preamble>
client request:
</preamble><artwork  type="message/http; msgtype=&#34;request&#34;" x:indent-with="  ">
GET /hello.txt HTTP/1.1
User-Agent: curl/7.16.3 libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3
Host: www.example.com
Accept: */*

</artwork></figure>
<figure><preamble>
server response:
</preamble><artwork type="message/http; msgtype=&#34;response&#34;" x:indent-with="  ">
HTTP/1.1 200 OK
Date: Mon, 27 Jul 2009 12:28:53 GMT
Server: Apache
Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT
ETag: "34aa387-d-1568eb00"
Accept-Ranges: bytes
Content-Length: <x:length-of target="exbody"/>
Vary: Accept-Encoding
Content-Type: text/plain

<x:span anchor="exbody">Hello World!
</x:span></artwork></figure>
</section>

<section title="Intermediaries" anchor="intermediaries">
<t>
   A more complicated situation occurs when one or more intermediaries
   are present in the request/response chain. There are three common
   forms of intermediary: proxy, gateway, and tunnel.  In some cases,
   a single intermediary may act as an origin server, proxy, gateway,
   or tunnel, switching behavior based on the nature of each request.
</t>
<figure><artwork type="drawing">
       request chain --------------------------------------&gt;
    UA -----v----- A -----v----- B -----v----- C -----v----- O
       &lt;------------------------------------- response chain
</artwork></figure>
<t>
   The figure above shows three intermediaries (A, B, and C) between the
   user agent and origin server. A request or response message that
   travels the whole chain will pass through four separate connections.
   Some HTTP communication options
   may apply only to the connection with the nearest, non-tunnel
   neighbor, only to the end-points of the chain, or to all connections
   along the chain. Although the diagram is linear, each participant may
   be engaged in multiple, simultaneous communications. For example, B
   may be receiving requests from many clients other than A, and/or
   forwarding requests to servers other than C, at the same time that it
   is handling A's request.
</t>
<t>
<iref item="upstream"/><iref item="downstream"/>
<iref item="inbound"/><iref item="outbound"/>
   We use the terms "upstream" and "downstream" to describe various
   requirements in relation to the directional flow of a message:
   all messages flow from upstream to downstream.
   Likewise, we use the terms "inbound" and "outbound" to refer to
   directions in relation to the request path: "inbound" means toward
   the origin server and "outbound" means toward the user agent.
</t>
<t><iref item="proxy"/>
   A proxy is a message forwarding agent that is selected by the
   client, usually via local configuration rules, to receive requests
   for some type(s) of absolute URI and attempt to satisfy those
   requests via translation through the HTTP interface.  Some translations
   are minimal, such as for proxy requests for "http" URIs, whereas
   other requests may require translation to and from entirely different
   application-layer protocols. Proxies are often used to group an
   organization's HTTP requests through a common intermediary for the
   sake of security, annotation services, or shared caching.
</t>
<t><iref item="gateway"/><iref item="reverse proxy"/>
   A gateway (a.k.a., reverse proxy) is a receiving agent that acts
   as a layer above some other server(s) and translates the received
   requests to the underlying server's protocol.  Gateways are often
   used for load balancing or partitioning HTTP services across
   multiple machines.
   Unlike a proxy, a gateway receives requests as if it were the
   origin server for the requested resource; the requesting client
   will not be aware that it is communicating with a gateway.
   A gateway communicates with the client as if the gateway is the
   origin server and thus is subject to all of the requirements on
   origin servers for that connection.  A gateway communicates
   with inbound servers using any protocol it desires, including
   private extensions to HTTP that are outside the scope of this
   specification.
</t>
<t><iref item="tunnel"/>
   A tunnel acts as a blind relay between two connections
   without changing the messages. Once active, a tunnel is not
   considered a party to the HTTP communication, though the tunnel may
   have been initiated by an HTTP request. A tunnel ceases to exist when
   both ends of the relayed connection are closed. Tunnels are used to
   extend a virtual connection through an intermediary, such as when
   transport-layer security is used to establish private communication
   through a shared firewall proxy.
</t>
</section>

<section title="Caches" anchor="caches">
<iref item="cache"/>
<t>
   Any party to HTTP communication that is not acting as a tunnel may
   employ an internal cache for handling requests.
   A cache is a local store of previous response messages and the
   subsystem that controls its message storage, retrieval, and deletion.
   A cache stores cacheable responses in order to reduce the response
   time and network bandwidth consumption on future, equivalent
   requests. Any client or server may include a cache, though a cache
   cannot be used by a server while it is acting as a tunnel.
</t>
<t>
   The effect of a cache is that the request/response chain is shortened
   if one of the participants along the chain has a cached response
   applicable to that request. The following illustrates the resulting
   chain if B has a cached copy of an earlier response from O (via C)
   for a request which has not been cached by UA or A.
</t>
<figure><artwork type="drawing">
          request chain ----------&gt;
       UA -----v----- A -----v----- B - - - - - - C - - - - - - O
          &lt;--------- response chain
</artwork></figure>
<t><iref item="cacheable"/>
   A response is cacheable if a cache is allowed to store a copy of
   the response message for use in answering subsequent requests.
   Even when a response is cacheable, there may be additional
   constraints placed by the client or by the origin server on when
   that cached response can be used for a particular request. HTTP
   requirements for cache behavior and cacheable responses are
   defined in &caching-overview;.  
</t>
<t>
   There are a wide variety of architectures and configurations
   of caches and proxies deployed across the World Wide Web and
   inside large organizations. These systems include national hierarchies
   of proxy caches to save transoceanic bandwidth, systems that
   broadcast or multicast cache entries, organizations that distribute
   subsets of cached data via optical media, and so on.
</t>
</section>

<section title="Transport Independence" anchor="transport-independence">
<t>
  HTTP systems are used in a wide variety of environments, from
  corporate intranets with high-bandwidth links to long-distance
  communication over low-power radio links and intermittent connectivity.
</t>
<t>
   HTTP communication usually takes place over TCP/IP connections. The
   default port is TCP 80 (<eref target="http://www.iana.org/assignments/port-numbers"/>), but other ports can be used. This does
   not preclude HTTP from being implemented on top of any other protocol
   on the Internet, or on other networks. HTTP only presumes a reliable
   transport; any protocol that provides such guarantees can be used;
   the mapping of the HTTP/1.1 request and response structures onto the
   transport data units of the protocol in question is outside the scope
   of this specification.
</t>
<t>
   In HTTP/1.0, most implementations used a new connection for each
   request/response exchange. In HTTP/1.1, a connection may be used for
   one or more request/response exchanges, although connections may be
   closed for a variety of reasons (see <xref target="persistent.connections"/>).
</t>
</section>

<section title="HTTP Version" anchor="http.version">
  <x:anchor-alias value="HTTP-Version"/>
  <x:anchor-alias value="HTTP-Prot-Name"/>
<t>
   HTTP uses a "&lt;major&gt;.&lt;minor&gt;" numbering scheme to indicate versions
   of the protocol. The protocol versioning policy is intended to allow
   the sender to indicate the format of a message and its capacity for
   understanding further HTTP communication, rather than the features
   obtained via that communication. No change is made to the version
   number for the addition of message components which do not affect
   communication behavior or which only add to extensible field values.
   The &lt;minor&gt; number is incremented when the changes made to the
   protocol add features which do not change the general message parsing
   algorithm, but which may add to the message semantics and imply
   additional capabilities of the sender. The &lt;major&gt; number is
   incremented when the format of a message within the protocol is
   changed. See <xref target="RFC2145"/> for a fuller explanation.
</t>
<t>
   The version of an HTTP message is indicated by an HTTP-Version field
   in the first line of the message. HTTP-Version is case-sensitive.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="HTTP-Version"/><iref primary="true" item="Grammar" subitem="HTTP-Prot-Name"/>
  <x:ref>HTTP-Version</x:ref>   = <x:ref>HTTP-Prot-Name</x:ref> "/" 1*<x:ref>DIGIT</x:ref> "." 1*<x:ref>DIGIT</x:ref>
  <x:ref>HTTP-Prot-Name</x:ref> = <x:abnf-char-sequence>"HTTP"</x:abnf-char-sequence> ; "HTTP", case-sensitive 
</artwork></figure>
<t>
   Note that the major and minor numbers &MUST; be treated as separate
   integers and that each &MAY; be incremented higher than a single digit.
   Thus, HTTP/2.4 is a lower version than HTTP/2.13, which in turn is
   lower than HTTP/12.3. Leading zeros &MUST; be ignored by recipients and
   &MUST-NOT; be sent.
</t>
<t>
   An application that sends a request or response message that includes
   HTTP-Version of "HTTP/1.1" &MUST; be at least conditionally compliant
   with this specification. Applications that are at least conditionally
   compliant with this specification &SHOULD; use an HTTP-Version of
   "HTTP/1.1" in their messages, and &MUST; do so for any message that is
   not compatible with HTTP/1.0. For more details on when to send
   specific HTTP-Version values, see <xref target="RFC2145"/>.
</t>
<t>
   The HTTP version of an application is the highest HTTP version for
   which the application is at least conditionally compliant.
</t>
<t>
   Proxy and gateway applications need to be careful when forwarding
   messages in protocol versions different from that of the application.
   Since the protocol version indicates the protocol capability of the
   sender, a proxy/gateway &MUST-NOT; send a message with a version
   indicator which is greater than its actual version. If a higher
   version request is received, the proxy/gateway &MUST; either downgrade
   the request version, or respond with an error, or switch to tunnel
   behavior.
</t>
<t>
   Due to interoperability problems with HTTP/1.0 proxies discovered
   since the publication of <xref target="RFC2068"/>, caching proxies &MUST;, gateways
   &MAY;, and tunnels &MUST-NOT; upgrade the request to the highest version
   they support. The proxy/gateway's response to that request &MUST; be in
   the same major version as the request.
</t>
<x:note>
  <t>
    <x:h>Note:</x:h> Converting between versions of HTTP may involve modification
    of header fields required or forbidden by the versions involved.
  </t>
</x:note>
</section>

<section title="Uniform Resource Identifiers" anchor="uri">
<iref primary="true" item="resource"/>
<t>
   Uniform Resource Identifiers (URIs) <xref target="RFC3986"/> are used
   throughout HTTP as the means for identifying resources. URI references
   are used to target requests, indicate redirects, and define relationships.
   HTTP does not limit what a resource may be; it merely defines an interface
   that can be used to interact with a resource via HTTP. More information on
   the scope of URIs and resources can be found in <xref target="RFC3986"/>.
</t>
  <x:anchor-alias value="URI"/>
  <x:anchor-alias value="URI-reference"/>
  <x:anchor-alias value="absolute-URI"/>
  <x:anchor-alias value="relative-part"/>
  <x:anchor-alias value="authority"/>
  <x:anchor-alias value="path-abempty"/>
  <x:anchor-alias value="path-absolute"/>
  <x:anchor-alias value="port"/>
  <x:anchor-alias value="query"/>
  <x:anchor-alias value="uri-host"/>
  <x:anchor-alias value="partial-URI"/>
<t>
   This specification adopts the definitions of "URI-reference",
   "absolute-URI", "relative-part", "port", "host",
   "path-abempty", "path-absolute", "query", and "authority" from
   <xref target="RFC3986"/>. In addition, we define a partial-URI rule for
   protocol elements that allow a relative URI without a fragment.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="URI-reference"/><iref primary="true" item="Grammar" subitem="absolute-URI"/><iref primary="true" item="Grammar" subitem="authority"/><iref primary="true" item="Grammar" subitem="path-absolute"/><iref primary="true" item="Grammar" subitem="port"/><iref primary="true" item="Grammar" subitem="query"/><iref primary="true" item="Grammar" subitem="uri-host"/>
  <x:ref>URI</x:ref>           = &lt;URI, defined in <xref target="RFC3986" x:fmt="," x:sec="3"/>&gt;
  <x:ref>URI-reference</x:ref> = &lt;URI-reference, defined in <xref target="RFC3986" x:fmt="," x:sec="4.1"/>&gt;
  <x:ref>absolute-URI</x:ref>  = &lt;absolute-URI, defined in <xref target="RFC3986" x:fmt="," x:sec="4.3"/>&gt;
  <x:ref>relative-part</x:ref> = &lt;relative-part, defined in <xref target="RFC3986" x:fmt="," x:sec="4.2"/>&gt;
  <x:ref>authority</x:ref>     = &lt;authority, defined in <xref target="RFC3986" x:fmt="," x:sec="3.2"/>&gt;
  <x:ref>path-abempty</x:ref>  = &lt;path-abempty, defined in <xref target="RFC3986" x:fmt="," x:sec="3.3"/>&gt;
  <x:ref>path-absolute</x:ref> = &lt;path-absolute, defined in <xref target="RFC3986" x:fmt="," x:sec="3.3"/>&gt;
  <x:ref>port</x:ref>          = &lt;port, defined in <xref target="RFC3986" x:fmt="," x:sec="3.2.3"/>&gt;
  <x:ref>query</x:ref>         = &lt;query, defined in <xref target="RFC3986" x:fmt="," x:sec="3.4"/>&gt;
  <x:ref>uri-host</x:ref>      = &lt;host, defined in <xref target="RFC3986" x:fmt="," x:sec="3.2.2"/>&gt;
  
  <x:ref>partial-URI</x:ref>   = relative-part [ "?" query ]
</artwork></figure>
<t>
   Each protocol element in HTTP that allows a URI reference will indicate in
   its ABNF production whether the element allows only a URI in absolute form
   (absolute-URI), any relative reference (relative-ref), or some other subset
   of the URI-reference grammar. Unless otherwise indicated, URI references
   are parsed relative to the request target (the default base URI for both
   the request and its corresponding response).
</t>

<section title="http URI scheme" anchor="http.uri">
  <x:anchor-alias value="http-URI"/>
  <iref item="http URI scheme" primary="true"/>
  <iref item="URI scheme" subitem="http" primary="true"/>
<t>
   The "http" URI scheme is hereby defined for the purpose of minting
   identifiers according to their association with the hierarchical
   namespace governed by a potential HTTP origin server listening for
   TCP connections on a given port.
   The HTTP server is identified via the generic syntax's 
   <x:ref>authority</x:ref> component, which includes a host
   identifier and optional TCP port, and the remainder of the URI is
   considered to be identifying data corresponding to a resource for
   which that server might provide an HTTP interface.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="http-URI"/>
  <x:ref>http-URI</x:ref> = "http:" "//" <x:ref>authority</x:ref> <x:ref>path-abempty</x:ref> [ "?" <x:ref>query</x:ref> ]
</artwork></figure>
<t>
   The host identifier within an <x:ref>authority</x:ref> component is
   defined in <xref target="RFC3986" x:fmt="," x:sec="3.2.2"/>.  If host is
   provided as an IP literal or IPv4 address, then the HTTP server is any
   listener on the indicated TCP port at that IP address. If host is a
   registered name, then that name is considered an indirect identifier
   and the recipient might use a name resolution service, such as DNS,
   to find the address of a listener for that host.
   The host &MUST-NOT; be empty; if an "http" URI is received with an
   empty host, then it &MUST; be rejected as invalid. 
   If the port subcomponent is empty or not given, then TCP port 80 is
   assumed (the default reserved port for WWW services).
</t>
<t>
   Regardless of the form of host identifier, access to that host is not
   implied by the mere presence of its name or address. The host may or may
   not exist and, even when it does exist, may or may not be running an
   HTTP server or listening to the indicated port. The "http" URI scheme
   makes use of the delegated nature of Internet names and addresses to
   establish a naming authority (whatever entity has the ability to place
   an HTTP server at that Internet name or address) and allows that
   authority to determine which names are valid and how they might be used.
</t>
<t>
   When an "http" URI is used within a context that calls for access to the
   indicated resource, a client &MAY; attempt access by resolving
   the host to an IP address, establishing a TCP connection to that address
   on the indicated port, and sending an HTTP request message to the server
   containing the URI's identifying data as described in <xref target="request"/>.
   If the server responds to that request with a non-interim HTTP response
   message, as described in <xref target="response"/>, then that response
   is considered an authoritative answer to the client's request.
</t>
<t>
   Although HTTP is independent of the transport protocol, the "http"
   scheme is specific to TCP-based services because the name delegation
   process depends on TCP for establishing authority.
   An HTTP service based on some other underlying connection protocol
   would presumably be identified using a different URI scheme, just as
   the "https" scheme (below) is used for servers that require an SSL/TLS
   transport layer on a connection. Other protocols may also be used to
   provide access to "http" identified resources --- it is only the
   authoritative interface used for mapping the namespace that is
   specific to TCP.
</t>
</section>

<section title="https URI scheme" anchor="https.uri">
   <x:anchor-alias value="https-URI"/>
   <iref item="https URI scheme"/>
   <iref item="URI scheme" subitem="https"/>
<t>
   The "https" URI scheme is hereby defined for the purpose of minting
   identifiers according to their association with the hierarchical
   namespace governed by a potential HTTP origin server listening for
   SSL/TLS-secured connections on a given TCP port.
   The host and port are determined in the same way
   as for the "http" scheme, except that a default TCP port of 443
   is assumed if the port subcomponent is empty or not given.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="https-URI"/>
  <x:ref>https-URI</x:ref> = "https:" "//" <x:ref>authority</x:ref> <x:ref>path-abempty</x:ref> [ "?" <x:ref>query</x:ref> ]
</artwork></figure>
<t>
   The primary difference between the "http" and "https" schemes is
   that interaction with the latter is required to be secured for
   privacy through the use of strong encryption. The URI cannot be
   sent in a request until the connection is secure. Likewise, the
   default for caching is that each response that would be considered
   "public" under the "http" scheme is instead treated as "private"
   and thus not eligible for shared caching.
</t>
<t>
   The process for authoritative access to an "https" identified
   resource is defined in <xref target="RFC2818"/>.
</t>
</section>

<section title="http and https URI Normalization and Comparison" anchor="uri.comparison">
<t>
   Since the "http" and "https" schemes conform to the URI generic syntax,
   such URIs are normalized and compared according to the algorithm defined
   in <xref target="RFC3986" x:fmt="," x:sec="6"/>, using the defaults
   described above for each scheme.
</t>
<t>
   If the port is equal to the default port for a scheme, the normal
   form is to elide the port subcomponent. Likewise, an empty path
   component is equivalent to an absolute path of "/", so the normal
   form is to provide a path of "/" instead. The scheme and host
   are case-insensitive and normally provided in lowercase; all
   other components are compared in a case-sensitive manner.
   Characters other than those in the "reserved" set are equivalent
   to their percent-encoded octets (see <xref target="RFC3986"
   x:fmt="," x:sec="2.1"/>): the normal form is to not encode them.
</t>
<t>
   For example, the following three URIs are equivalent:
</t>
<figure><artwork type="example">
   http://example.com:80/~smith/home.html
   http://EXAMPLE.com/%7Esmith/home.html
   http://EXAMPLE.com:/%7esmith/home.html
</artwork></figure>
<t>
   <cref>[[This paragraph does not belong here. --Roy]]</cref>
   If path-abempty is the empty string (i.e., there is no slash "/"
   path separator following the authority), then the "http" URI
   &MUST; be given as "/" when
   used as a request-target (<xref target="request-target"/>). If a proxy
   receives a host name which is not a fully qualified domain name, it
   &MAY; add its domain to the host name it received. If a proxy receives
   a fully qualified domain name, the proxy &MUST-NOT; change the host
   name.
</t>
</section>
</section>
</section>

<section title="HTTP Message" anchor="http.message">
<x:anchor-alias value="generic-message"/>
<x:anchor-alias value="message.types"/>
<x:anchor-alias value="HTTP-message"/>
<x:anchor-alias value="start-line"/>
<iref item="header section"/>
<iref item="headers"/>
<iref item="header field"/>
<t>
   All HTTP/1.1 messages consist of a start-line followed by a sequence of
   characters in a format similar to the Internet Message Format
   <xref target="RFC5322"/>: zero or more header fields (collectively
   referred to as the "headers" or the "header section"), an empty line
   indicating the end of the header section, and an optional message-body.
</t>
<t>
   An HTTP message can either be a request from client to server or a
   response from server to client.  Syntactically, the two types of message
   differ only in the start-line, which is either a Request-Line (for requests)
   or a Status-Line (for responses), and in the algorithm for determining
   the length of the message-body (<xref target="message.length"/>).
   In theory, a client could receive requests and a server could receive
   responses, distinguishing them by their different start-line formats,
   but in practice servers are implemented to only expect a request
   (a response is interpreted as an unknown or invalid request method)
   and clients are implemented to only expect a response.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="HTTP-message"/>
  <x:ref>HTTP-message</x:ref>    = <x:ref>start-line</x:ref>
                    *( <x:ref>header-field</x:ref> <x:ref>CRLF</x:ref> )
                    <x:ref>CRLF</x:ref>
                    [ <x:ref>message-body</x:ref> ]
  <x:ref>start-line</x:ref>      = <x:ref>Request-Line</x:ref> / <x:ref>Status-Line</x:ref>
</artwork></figure>
<t>
   Whitespace (WSP) &MUST-NOT; be sent between the start-line and the first
   header field. The presence of whitespace might be an attempt to trick a
   noncompliant implementation of HTTP into ignoring that field or processing
   the next line as a new request, either of which may result in security
   issues when implementations within the request chain interpret the
   same message differently. HTTP/1.1 servers &MUST; reject such a message
   with a 400 (Bad Request) response.
</t>

<section title="Message Parsing Robustness" anchor="message.robustness">
<t>
   In the interest of robustness, servers &SHOULD; ignore at least one
   empty line received where a Request-Line is expected. In other words, if
   the server is reading the protocol stream at the beginning of a
   message and receives a CRLF first, it should ignore the CRLF.
</t>
<t>
   Some old HTTP/1.0 client implementations generate an extra CRLF
   after a POST request as a lame workaround for some early server
   applications that failed to read message-body content that was
   not terminated by a line-ending. An HTTP/1.1 client &MUST-NOT;
   preface or follow a request with an extra CRLF.  If terminating
   the request message-body with a line-ending is desired, then the
   client &MUST; include the terminating CRLF octets as part of the
   message-body length. 
</t>
<t>
   The normal procedure for parsing an HTTP message is to read the
   start-line into a structure, read each header field into a hash
   table by field name until the empty line, and then use the parsed
   data to determine if a message-body is expected.  If a message-body
   has been indicated, then it is read as a stream until an amount
   of OCTETs equal to the message-length is read or the connection
   is closed.  Care must be taken to parse an HTTP message as a sequence
   of OCTETs in an encoding that is a superset of US-ASCII.  Attempting
   to parse HTTP as a stream of Unicode characters in a character encoding
   like UTF-16 may introduce security flaws due to the differing ways
   that such parsers interpret invalid characters.
</t>
</section>

<section title="Header Fields" anchor="header.fields">
  <x:anchor-alias value="header-field"/>
  <x:anchor-alias value="field-content"/>
  <x:anchor-alias value="field-name"/>
  <x:anchor-alias value="field-value"/>
  <x:anchor-alias value="OWS"/>
<t>
   Each HTTP header field consists of a case-insensitive field name
   followed by a colon (":"), optional whitespace, and the field value.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="header-field"/><iref primary="true" item="Grammar" subitem="field-name"/><iref primary="true" item="Grammar" subitem="field-value"/><iref primary="true" item="Grammar" subitem="field-content"/>
  <x:ref>header-field</x:ref>   = <x:ref>field-name</x:ref> ":" <x:ref>OWS</x:ref> [ <x:ref>field-value</x:ref> ] <x:ref>OWS</x:ref>
  <x:ref>field-name</x:ref>     = <x:ref>token</x:ref>
  <x:ref>field-value</x:ref>    = *( <x:ref>field-content</x:ref> / <x:ref>OWS</x:ref> )
  <x:ref>field-content</x:ref>  = *( <x:ref>WSP</x:ref> / <x:ref>VCHAR</x:ref> / <x:ref>obs-text</x:ref> )
</artwork></figure>
<t>
   No whitespace is allowed between the header field name and colon. For
   security reasons, any request message received containing such whitespace
   &MUST; be rejected with a response code of 400 (Bad Request). A proxy
   &MUST; remove any such whitespace from a response message before
   forwarding the message downstream.
</t>
<t>
   A field value &MAY; be preceded by optional whitespace (OWS); a single SP is
   preferred. The field value does not include any leading or trailing white
   space: OWS occurring before the first non-whitespace character of the
   field value or after the last non-whitespace character of the field value
   is ignored and &SHOULD; be removed before further processing (as this does
   not change the meaning of the header field). 
</t>
<t>
   The order in which header fields with differing field names are
   received is not significant. However, it is "good practice" to send
   header fields that contain control data first, such as Host on
   requests and Date on responses, so that implementations can decide
   when not to handle a message as early as possible.  A server &MUST;
   wait until the entire header section is received before interpreting
   a request message, since later header fields might include conditionals,
   authentication credentials, or deliberately misleading duplicate
   header fields that would impact request processing.
</t>
<t>
   Multiple header fields with the same field name &MUST-NOT; be
   sent in a message unless the entire field value for that
   header field is defined as a comma-separated list [i.e., #(values)].
   Multiple header fields with the same field name can be combined into
   one "field-name: field-value" pair, without changing the semantics of the
   message, by appending each subsequent field value to the combined
   field value in order, separated by a comma. The order in which
   header fields with the same field name are received is therefore
   significant to the interpretation of the combined field value;
   a proxy &MUST-NOT; change the order of these field values when
   forwarding a message.
</t>
<x:note>
  <t>
   <x:h>Note:</x:h> The "Set-Cookie" header as implemented in
   practice (as opposed to how it is specified in <xref target="RFC2109"/>)
   can occur multiple times, but does not use the list syntax, and thus cannot
   be combined into a single line. (See Appendix A.2.3 of <xref target="Kri2001"/>
   for details.) Also note that the Set-Cookie2 header specified in
   <xref target="RFC2965"/> does not share this problem. 
  </t>
</x:note>
<t>
   Historically, HTTP header field values could be extended over multiple
   lines by preceding each extra line with at least one space or horizontal
   tab character (line folding). This specification deprecates such line
   folding except within the message/http media type
   (<xref target="internet.media.type.message.http"/>).
   HTTP/1.1 senders &MUST-NOT; produce messages that include line folding
   (i.e., that contain any field-content that matches the obs-fold rule) unless
   the message is intended for packaging within the message/http media type.
   HTTP/1.1 recipients &SHOULD; accept line folding and replace any embedded
   obs-fold whitespace with a single SP prior to interpreting the field value
   or forwarding the message downstream.
</t>
<t>
   Historically, HTTP has allowed field content with text in the ISO-8859-1
   <xref target="ISO-8859-1"/> character encoding and supported other
   character sets only through use of <xref target="RFC2047"/> encoding.
   In practice, most HTTP header field values use only a subset of the
   US-ASCII character encoding <xref target="USASCII"/>. Newly defined
   header fields &SHOULD; limit their field values to US-ASCII characters.
   Recipients &SHOULD; treat other (obs-text) octets in field content as
   opaque data.
</t>
<t anchor="rule.comment">
  <x:anchor-alias value="comment"/>
  <x:anchor-alias value="ctext"/>
   Comments can be included in some HTTP header fields by surrounding
   the comment text with parentheses. Comments are only allowed in
   fields containing "comment" as part of their field value definition.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="comment"/><iref primary="true" item="Grammar" subitem="ctext"/>
  <x:ref>comment</x:ref>        = "(" *( <x:ref>ctext</x:ref> / <x:ref>quoted-cpair</x:ref> / <x:ref>comment</x:ref> ) ")"
  <x:ref>ctext</x:ref>          = <x:ref>OWS</x:ref> / %x21-27 / %x2A-5B / %x5D-7E / <x:ref>obs-text</x:ref>
                 ; <x:ref>OWS</x:ref> / &lt;<x:ref>VCHAR</x:ref> except "(", ")", and "\"&gt; / <x:ref>obs-text</x:ref>
</artwork></figure>
<t anchor="rule.quoted-cpair">
  <x:anchor-alias value="quoted-cpair"/>
   The backslash character ("\") can be used as a single-character
   quoting mechanism within comment constructs:
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="quoted-cpair"/>
  <x:ref>quoted-cpair</x:ref>    = "\" ( <x:ref>WSP</x:ref> / <x:ref>VCHAR</x:ref> / <x:ref>obs-text</x:ref> ) 
</artwork></figure>
<t>
   Producers &SHOULD-NOT; escape characters that do not require escaping
   (i.e., other than the backslash character "\" and the parentheses "(" and
   ")").
</t>
</section>

<section title="Message Body" anchor="message.body">
  <x:anchor-alias value="message-body"/>
<t>
   The message-body (if any) of an HTTP message is used to carry the
   entity-body associated with the request or response. The message-body
   differs from the entity-body only when a transfer-coding has been
   applied, as indicated by the Transfer-Encoding header field (<xref target="header.transfer-encoding"/>).
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="message-body"/>
  <x:ref>message-body</x:ref> = <x:ref>entity-body</x:ref>
               / &lt;entity-body encoded as per <x:ref>Transfer-Encoding</x:ref>&gt;
</artwork></figure>
<t>
   Transfer-Encoding &MUST; be used to indicate any transfer-codings
   applied by an application to ensure safe and proper transfer of the
   message. Transfer-Encoding is a property of the message, not of the
   entity, and thus &MAY; be added or removed by any application along the
   request/response chain. (However, <xref target="transfer.codings"/> places restrictions on
   when certain transfer-codings may be used.)
</t>
<t>
   The rules for when a message-body is allowed in a message differ for
   requests and responses.
</t>
<t>
   The presence of a message-body in a request is signaled by the
   inclusion of a Content-Length or Transfer-Encoding header field in
   the request's header fields. 
   When a request message contains both a message-body of non-zero
   length and a method that does not define any semantics for that
   request message-body, then an origin server &SHOULD; either ignore
   the message-body or respond with an appropriate error message
   (e.g., 413).  A proxy or gateway, when presented the same request,
   &SHOULD; either forward the request inbound with the message-body or
   ignore the message-body when determining a response.
</t>
<t>
   For response messages, whether or not a message-body is included with
   a message is dependent on both the request method and the response
   status code (<xref target="status.code.and.reason.phrase"/>). All responses to the HEAD request method
   &MUST-NOT; include a message-body, even though the presence of entity-header
   fields might lead one to believe they do. All 1xx
   (Informational), 204 (No Content), and 304 (Not Modified) responses
   &MUST-NOT; include a message-body. All other responses do include a
   message-body, although it &MAY; be of zero length.
</t>
</section>

<section title="Message Length" anchor="message.length">
<t>
   The transfer-length of a message is the length of the message-body as
   it appears in the message; that is, after any transfer-codings have
   been applied. When a message-body is included with a message, the
   transfer-length of that body is determined by one of the following
   (in order of precedence):
</t>
<t>
  <list style="numbers">
    <x:lt><t>
     Any response message which "&MUST-NOT;" include a message-body (such
     as the 1xx, 204, and 304 responses and any response to a HEAD
     request) is always terminated by the first empty line after the
     header fields, regardless of the entity-header fields present in
     the message.
    </t></x:lt>
    <x:lt><t>
     If a Transfer-Encoding header field (<xref target="header.transfer-encoding"/>)
     is present and the "chunked" transfer-coding (<xref target="transfer.codings"/>)
     is used, the transfer-length is defined by the use of this transfer-coding.
     If a Transfer-Encoding header field is present and the "chunked" transfer-coding
     is not present, the transfer-length is defined by the sender closing the connection. 
    </t></x:lt>
    <x:lt><t>
     If a Content-Length header field (<xref target="header.content-length"/>) is present, its
     value in OCTETs represents both the entity-length and the
     transfer-length. The Content-Length header field &MUST-NOT; be sent
     if these two lengths are different (i.e., if a Transfer-Encoding
     header field is present). If a message is received with both a
     Transfer-Encoding header field and a Content-Length header field,
     the latter &MUST; be ignored.
    </t></x:lt>
    <x:lt><t>
     If the message uses the media type "multipart/byteranges", and the
     transfer-length is not otherwise specified, then this self-delimiting
     media type defines the transfer-length. This media type
     &MUST-NOT; be used unless the sender knows that the recipient can parse
     it; the presence in a request of a Range header with multiple byte-range
     specifiers from a 1.1 client implies that the client can parse
     multipart/byteranges responses.
    <list style="empty"><t>
       A range header might be forwarded by a 1.0 proxy that does not
       understand multipart/byteranges; in this case the server &MUST;
       delimit the message using methods defined in items 1, 3 or 5 of
       this section.
    </t></list>
    </t></x:lt>
    <x:lt><t>
     By the server closing the connection. (Closing the connection
     cannot be used to indicate the end of a request body, since that
     would leave no possibility for the server to send back a response.)
    </t></x:lt>
  </list>
</t>
<t>
   For compatibility with HTTP/1.0 applications, HTTP/1.1 requests
   containing a message-body &MUST; include a valid Content-Length header
   field unless the server is known to be HTTP/1.1 compliant. If a
   request contains a message-body and a Content-Length is not given,
   the server &SHOULD; respond with 400 (Bad Request) if it cannot
   determine the length of the message, or with 411 (Length Required) if
   it wishes to insist on receiving a valid Content-Length.
</t>
<t>
   All HTTP/1.1 applications that receive entities &MUST; accept the
   "chunked" transfer-coding (<xref target="transfer.codings"/>), thus allowing this mechanism
   to be used for messages when the message length cannot be determined
   in advance.
</t>
<t>
   Messages &MUST-NOT; include both a Content-Length header field and a
   transfer-coding. If the message does include a
   transfer-coding, the Content-Length &MUST; be ignored.
</t>
<t>
   When a Content-Length is given in a message where a message-body is
   allowed, its field value &MUST; exactly match the number of OCTETs in
   the message-body. HTTP/1.1 user agents &MUST; notify the user when an
   invalid length is received and detected.
</t>
</section>

<section title="General Header Fields" anchor="general.header.fields">
  <x:anchor-alias value="general-header"/>
<t>
   There are a few header fields which have general applicability for
   both request and response messages, but which do not apply to the
   entity being transferred. These header fields apply only to the
   message being transmitted.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="general-header"/>
  <x:ref>general-header</x:ref> = <x:ref>Cache-Control</x:ref>            ; &header-cache-control;
                 / <x:ref>Connection</x:ref>               ; <xref target="header.connection"/>
                 / <x:ref>Date</x:ref>                     ; <xref target="header.date"/>
                 / <x:ref>Pragma</x:ref>                   ; &header-pragma;
                 / <x:ref>Trailer</x:ref>                  ; <xref target="header.trailer"/>
                 / <x:ref>Transfer-Encoding</x:ref>        ; <xref target="header.transfer-encoding"/>
                 / <x:ref>Upgrade</x:ref>                  ; <xref target="header.upgrade"/>
                 / <x:ref>Via</x:ref>                      ; <xref target="header.via"/>
                 / <x:ref>Warning</x:ref>                  ; &header-warning;
</artwork></figure>
<t>
   General-header field names can be extended reliably only in
   combination with a change in the protocol version. However, new or
   experimental header fields may be given the semantics of general
   header fields if all parties in the communication recognize them to
   be general-header fields. Unrecognized header fields are treated as
   entity-header fields.
</t>
</section>
</section>

<section title="Request" anchor="request">
  <x:anchor-alias value="Request"/>
<t>
   A request message from a client to a server includes, within the
   first line of that message, the method to be applied to the resource,
   the identifier of the resource, and the protocol version in use.
</t>
<!--                 Host                      ; should be moved here eventually -->
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Request"/>
  <x:ref>Request</x:ref>       = <x:ref>Request-Line</x:ref>              ; <xref target="request-line"/>
                  *(( <x:ref>general-header</x:ref>        ; <xref target="general.header.fields"/>
                   / <x:ref>request-header</x:ref>         ; &request-header-fields;
                   / <x:ref>entity-header</x:ref> ) <x:ref>CRLF</x:ref> ) ; &entity-header-fields;
                  <x:ref>CRLF</x:ref>
                  [ <x:ref>message-body</x:ref> ]          ; <xref target="message.body"/>
</artwork></figure>

<section title="Request-Line" anchor="request-line">
  <x:anchor-alias value="Request-Line"/>
<t>
   The Request-Line begins with a method token, followed by the
   request-target and the protocol version, and ending with CRLF. The
   elements are separated by SP characters. No CR or LF is allowed
   except in the final CRLF sequence.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Request-Line"/>
  <x:ref>Request-Line</x:ref>   = <x:ref>Method</x:ref> <x:ref>SP</x:ref> <x:ref>request-target</x:ref> <x:ref>SP</x:ref> <x:ref>HTTP-Version</x:ref> <x:ref>CRLF</x:ref>
</artwork></figure>

<section title="Method" anchor="method">
  <x:anchor-alias value="Method"/>
<t>
   The Method  token indicates the method to be performed on the
   resource identified by the request-target. The method is case-sensitive.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Method"/><iref primary="true" item="Grammar" subitem="extension-method"/>
  <x:ref>Method</x:ref>         = <x:ref>token</x:ref>
</artwork></figure>
</section>

<section title="request-target" anchor="request-target">
  <x:anchor-alias value="request-target"/>
<t>
   The request-target
   identifies the resource upon which to apply the request.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="request-target"/>
  <x:ref>request-target</x:ref> = "*"
                 / <x:ref>absolute-URI</x:ref>
                 / ( <x:ref>path-absolute</x:ref> [ "?" <x:ref>query</x:ref> ] )
                 / <x:ref>authority</x:ref>
</artwork></figure>
<t>
   The four options for request-target are dependent on the nature of the
   request. The asterisk "*" means that the request does not apply to a
   particular resource, but to the server itself, and is only allowed
   when the method used does not necessarily apply to a resource. One
   example would be
</t>
<figure><artwork type="example">
  OPTIONS * HTTP/1.1
</artwork></figure>
<t>
   The absolute-URI form is &REQUIRED; when the request is being made to a
   proxy. The proxy is requested to forward the request or service it
   from a valid cache, and return the response. Note that the proxy &MAY;
   forward the request on to another proxy or directly to the server
   specified by the absolute-URI. In order to avoid request loops, a
   proxy &MUST; be able to recognize all of its server names, including
   any aliases, local variations, and the numeric IP address. An example
   Request-Line would be:
</t>
<figure><artwork type="example">
  GET http://www.example.org/pub/WWW/TheProject.html HTTP/1.1
</artwork></figure>
<t>
   To allow for transition to absolute-URIs in all requests in future
   versions of HTTP, all HTTP/1.1 servers &MUST; accept the absolute-URI
   form in requests, even though HTTP/1.1 clients will only generate
   them in requests to proxies.
</t>
<t>
   The authority form is only used by the CONNECT method (&CONNECT;).
</t>
<t>
   The most common form of request-target is that used to identify a
   resource on an origin server or gateway. In this case the absolute
   path of the URI &MUST; be transmitted (see <xref target="http.uri"/>, path-absolute) as
   the request-target, and the network location of the URI (authority) &MUST;
   be transmitted in a Host header field. For example, a client wishing
   to retrieve the resource above directly from the origin server would
   create a TCP connection to port 80 of the host "www.example.org" and send
   the lines:
</t>
<figure><artwork type="example">
  GET /pub/WWW/TheProject.html HTTP/1.1
  Host: www.example.org
</artwork></figure>
<t>
   followed by the remainder of the Request. Note that the absolute path
   cannot be empty; if none is present in the original URI, it &MUST; be
   given as "/" (the server root).
</t>
<t>
   If a proxy receives a request without any path in the request-target and
   the method specified is capable of supporting the asterisk form of
   request-target, then the last proxy on the request chain &MUST; forward the
   request with "*" as the final request-target.
</t>
<figure><preamble>   
   For example, the request
</preamble><artwork type="example">
  OPTIONS http://www.example.org:8001 HTTP/1.1
</artwork></figure>
<figure><preamble>   
  would be forwarded by the proxy as
</preamble><artwork type="example">
  OPTIONS * HTTP/1.1
  Host: www.example.org:8001
</artwork>
<postamble>
   after connecting to port 8001 of host "www.example.org".
</postamble>
</figure>
<t>
   The request-target is transmitted in the format specified in 
   <xref target="http.uri"/>. If the request-target is percent-encoded
   (<xref target="RFC3986" x:fmt="," x:sec="2.1"/>), the origin server
   &MUST; decode the request-target in order to
   properly interpret the request. Servers &SHOULD; respond to invalid
   request-targets with an appropriate status code.
</t>
<t>
   A transparent proxy &MUST-NOT; rewrite the "path-absolute" part of the
   received request-target when forwarding it to the next inbound server,
   except as noted above to replace a null path-absolute with "/".
</t>
<x:note>
  <t>
    <x:h>Note:</x:h> The "no rewrite" rule prevents the proxy from changing the
    meaning of the request when the origin server is improperly using
    a non-reserved URI character for a reserved purpose.  Implementors
    should be aware that some pre-HTTP/1.1 proxies have been known to
    rewrite the request-target.
  </t>
</x:note>
<t>
   HTTP does not place a pre-defined limit on the length of a request-target.
   A server &MUST; be prepared to receive URIs of unbounded length and
   respond with the 414 (URI Too Long) status if the received
   request-target would be longer than the server wishes to handle
   (see &status-414;).
</t>
<t>
   Various ad-hoc limitations on request-target length are found in practice.
   It is &RECOMMENDED; that all HTTP senders and recipients support
   request-target lengths of 8000 or more OCTETs.
</t>
</section>
</section>

<section title="The Resource Identified by a Request" anchor="the.resource.identified.by.a.request">
<t>
   The exact resource identified by an Internet request is determined by
   examining both the request-target and the Host header field.
</t>
<t>
   An origin server that does not allow resources to differ by the
   requested host &MAY; ignore the Host header field value when
   determining the resource identified by an HTTP/1.1 request. (But see
   <xref target="changes.to.simplify.multi-homed.web.servers.and.conserve.ip.addresses"/>
   for other requirements on Host support in HTTP/1.1.)
</t>
<t>
   An origin server that does differentiate resources based on the host
   requested (sometimes referred to as virtual hosts or vanity host
   names) &MUST; use the following rules for determining the requested
   resource on an HTTP/1.1 request:
  <list style="numbers">
    <t>If request-target is an absolute-URI, the host is part of the
     request-target. Any Host header field value in the request &MUST; be
     ignored.</t>
    <t>If the request-target is not an absolute-URI, and the request includes
     a Host header field, the host is determined by the Host header
     field value.</t>
    <t>If the host as determined by rule 1 or 2 is not a valid host on
     the server, the response &MUST; be a 400 (Bad Request) error message.</t>
  </list>
</t>
<t>
   Recipients of an HTTP/1.0 request that lacks a Host header field &MAY;
   attempt to use heuristics (e.g., examination of the URI path for
   something unique to a particular host) in order to determine what
   exact resource is being requested.
</t>
</section>

</section>


<section title="Response" anchor="response">
  <x:anchor-alias value="Response"/>
<t>
   After receiving and interpreting a request message, a server responds
   with an HTTP response message.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Response"/>
  <x:ref>Response</x:ref>      = <x:ref>Status-Line</x:ref>               ; <xref target="status-line"/>
                  *(( <x:ref>general-header</x:ref>        ; <xref target="general.header.fields"/>
                   / <x:ref>response-header</x:ref>        ; &response-header-fields;
                   / <x:ref>entity-header</x:ref> ) <x:ref>CRLF</x:ref> ) ; &entity-header-fields;
                  <x:ref>CRLF</x:ref>
                  [ <x:ref>message-body</x:ref> ]          ; <xref target="message.body"/>
</artwork></figure>

<section title="Status-Line" anchor="status-line">
  <x:anchor-alias value="Status-Line"/>
<t>
   The first line of a Response message is the Status-Line, consisting
   of the protocol version followed by a numeric status code and its
   associated textual phrase, with each element separated by SP
   characters. No CR or LF is allowed except in the final CRLF sequence.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Status-Line"/>
  <x:ref>Status-Line</x:ref> = <x:ref>HTTP-Version</x:ref> <x:ref>SP</x:ref> <x:ref>Status-Code</x:ref> <x:ref>SP</x:ref> <x:ref>Reason-Phrase</x:ref> <x:ref>CRLF</x:ref>
</artwork></figure>

<section title="Status Code and Reason Phrase" anchor="status.code.and.reason.phrase">
  <x:anchor-alias value="Reason-Phrase"/>
  <x:anchor-alias value="Status-Code"/>
<t>
   The Status-Code element is a 3-digit integer result code of the
   attempt to understand and satisfy the request. These codes are fully
   defined in &status-codes;.  The Reason Phrase exists for the sole
   purpose of providing a textual description associated with the numeric
   status code, out of deference to earlier Internet application protocols
   that were more frequently used with interactive text clients.
   A client &SHOULD; ignore the content of the Reason Phrase.
</t>
<t>
   The first digit of the Status-Code defines the class of response. The
   last two digits do not have any categorization role. There are 5
   values for the first digit:
  <list style="symbols">
    <t>
      1xx: Informational - Request received, continuing process
    </t>
    <t>
      2xx: Success - The action was successfully received,
        understood, and accepted
    </t>
    <t>
      3xx: Redirection - Further action must be taken in order to
        complete the request
    </t>
    <t>
      4xx: Client Error - The request contains bad syntax or cannot
        be fulfilled
    </t>
    <t>
      5xx: Server Error - The server failed to fulfill an apparently
        valid request
    </t>
  </list>
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Status-Code"/><iref primary="true" item="Grammar" subitem="extension-code"/><iref primary="true" item="Grammar" subitem="Reason-Phrase"/>
  <x:ref>Status-Code</x:ref>    = 3<x:ref>DIGIT</x:ref>
  <x:ref>Reason-Phrase</x:ref>  = *( <x:ref>WSP</x:ref> / <x:ref>VCHAR</x:ref> / <x:ref>obs-text</x:ref> )
</artwork></figure>
</section>
</section>

</section>


<section title="Protocol Parameters" anchor="protocol.parameters">

<section title="Date/Time Formats: Full Date" anchor="date.time.formats.full.date">
  <x:anchor-alias value="HTTP-date"/>
<t>
   HTTP applications have historically allowed three different formats
   for the representation of date/time stamps:
</t>
<figure><artwork type="example">
  Sun, 06 Nov 1994 08:49:37 GMT  ; RFC 1123
  Sunday, 06-Nov-94 08:49:37 GMT ; obsolete RFC 850 format
  Sun Nov  6 08:49:37 1994       ; ANSI C's asctime() format
</artwork></figure>
<t>
   The first format is preferred as an Internet standard and represents
   a fixed-length subset of that defined by <xref target="RFC1123"/>. The
   other formats are described here only for
   compatibility with obsolete implementations.
   HTTP/1.1 clients and servers that parse the date value &MUST; accept
   all three formats (for compatibility with HTTP/1.0), though they &MUST;
   only generate the RFC 1123 format for representing HTTP-date values
   in header fields. See <xref target="tolerant.applications"/> for further information.
</t>
<t>
   All HTTP date/time stamps &MUST; be represented in Greenwich Mean Time
   (GMT), without exception. For the purposes of HTTP, GMT is exactly
   equal to UTC (Coordinated Universal Time). This is indicated in the
   first two formats by the inclusion of "GMT" as the three-letter
   abbreviation for time zone, and &MUST; be assumed when reading the
   asctime format. HTTP-date is case sensitive and &MUST-NOT; include
   additional whitespace beyond that specifically included as SP in the
   grammar.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="HTTP-date"/>
  <x:ref>HTTP-date</x:ref>    = <x:ref>rfc1123-date</x:ref> / <x:ref>obs-date</x:ref>
</artwork></figure>
<t anchor="preferred.date.format">
  <x:anchor-alias value="rfc1123-date"/>
  <x:anchor-alias value="time-of-day"/>
  <x:anchor-alias value="hour"/>
  <x:anchor-alias value="minute"/>
  <x:anchor-alias value="second"/>
  <x:anchor-alias value="day-name"/>
  <x:anchor-alias value="day"/>
  <x:anchor-alias value="month"/>
  <x:anchor-alias value="year"/>
  <x:anchor-alias value="GMT"/>
  Preferred format:
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="rfc1123-date"/><iref primary="true" item="Grammar" subitem="date1"/><iref primary="true" item="Grammar" subitem="time-of-day"/><iref primary="true" item="Grammar" subitem="hour"/><iref primary="true" item="Grammar" subitem="minute"/><iref primary="true" item="Grammar" subitem="second"/><iref primary="true" item="Grammar" subitem="day-name"/><iref primary="true" item="Grammar" subitem="day-name-l"/><iref primary="true" item="Grammar" subitem="day"/><iref primary="true" item="Grammar" subitem="month"/><iref primary="true" item="Grammar" subitem="year"/><iref primary="true" item="Grammar" subitem="GMT"/>
  <x:ref>rfc1123-date</x:ref> = <x:ref>day-name</x:ref> "," <x:ref>SP</x:ref> date1 <x:ref>SP</x:ref> <x:ref>time-of-day</x:ref> <x:ref>SP</x:ref> <x:ref>GMT</x:ref>

  <x:ref>day-name</x:ref>     = <x:abnf-char-sequence>"Mon"</x:abnf-char-sequence> ; "Mon", case-sensitive
               / <x:abnf-char-sequence>"Tue"</x:abnf-char-sequence> ; "Tue", case-sensitive
               / <x:abnf-char-sequence>"Wed"</x:abnf-char-sequence> ; "Wed", case-sensitive
               / <x:abnf-char-sequence>"Thu"</x:abnf-char-sequence> ; "Thu", case-sensitive
               / <x:abnf-char-sequence>"Fri"</x:abnf-char-sequence> ; "Fri", case-sensitive
               / <x:abnf-char-sequence>"Sat"</x:abnf-char-sequence> ; "Sat", case-sensitive
               / <x:abnf-char-sequence>"Sun"</x:abnf-char-sequence> ; "Sun", case-sensitive
               
  <x:ref>date1</x:ref>        = <x:ref>day</x:ref> <x:ref>SP</x:ref> <x:ref>month</x:ref> <x:ref>SP</x:ref> <x:ref>year</x:ref>
               ; e.g., 02 Jun 1982

  <x:ref>day</x:ref>          = 2<x:ref>DIGIT</x:ref>
  <x:ref>month</x:ref>        = <x:abnf-char-sequence>"Jan"</x:abnf-char-sequence> ; "Jan", case-sensitive
               / <x:abnf-char-sequence>"Feb"</x:abnf-char-sequence> ; "Feb", case-sensitive
               / <x:abnf-char-sequence>"Mar"</x:abnf-char-sequence> ; "Mar", case-sensitive
               / <x:abnf-char-sequence>"Apr"</x:abnf-char-sequence> ; "Apr", case-sensitive
               / <x:abnf-char-sequence>"May"</x:abnf-char-sequence> ; "May", case-sensitive
               / <x:abnf-char-sequence>"Jun"</x:abnf-char-sequence> ; "Jun", case-sensitive
               / <x:abnf-char-sequence>"Jul"</x:abnf-char-sequence> ; "Jul", case-sensitive
               / <x:abnf-char-sequence>"Aug"</x:abnf-char-sequence> ; "Aug", case-sensitive
               / <x:abnf-char-sequence>"Sep"</x:abnf-char-sequence> ; "Sep", case-sensitive
               / <x:abnf-char-sequence>"Oct"</x:abnf-char-sequence> ; "Oct", case-sensitive
               / <x:abnf-char-sequence>"Nov"</x:abnf-char-sequence> ; "Nov", case-sensitive
               / <x:abnf-char-sequence>"Dec"</x:abnf-char-sequence> ; "Dec", case-sensitive
  <x:ref>year</x:ref>         = 4<x:ref>DIGIT</x:ref>

  <x:ref>GMT</x:ref>   = <x:abnf-char-sequence>"GMT"</x:abnf-char-sequence> ; "GMT", case-sensitive

  <x:ref>time-of-day</x:ref>  = <x:ref>hour</x:ref> ":" <x:ref>minute</x:ref> ":" <x:ref>second</x:ref>
                 ; 00:00:00 - 23:59:59
                 
  <x:ref>hour</x:ref>         = 2<x:ref>DIGIT</x:ref>               
  <x:ref>minute</x:ref>       = 2<x:ref>DIGIT</x:ref>               
  <x:ref>second</x:ref>       = 2<x:ref>DIGIT</x:ref>               
</artwork></figure>
<t>
  The semantics of <x:ref>day-name</x:ref>, <x:ref>day</x:ref>,
  <x:ref>month</x:ref>, <x:ref>year</x:ref>, and <x:ref>time-of-day</x:ref> are the
  same as those defined for the RFC 5322 constructs
  with the corresponding name (<xref target="RFC5322" x:fmt="," x:sec="3.3"/>).
</t>
<t anchor="obsolete.date.formats">
  <x:anchor-alias value="obs-date"/>
  <x:anchor-alias value="rfc850-date"/>
  <x:anchor-alias value="asctime-date"/>
  <x:anchor-alias value="date1"/>
  <x:anchor-alias value="date2"/>
  <x:anchor-alias value="date3"/>
  <x:anchor-alias value="rfc1123-date"/>
  <x:anchor-alias value="day-name-l"/>
  Obsolete formats:
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="obs-date"/>
  <x:ref>obs-date</x:ref>     = <x:ref>rfc850-date</x:ref> / <x:ref>asctime-date</x:ref> 
</artwork></figure>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="rfc850-date"/>
  <x:ref>rfc850-date</x:ref>  = <x:ref>day-name-l</x:ref> "," <x:ref>SP</x:ref> <x:ref>date2</x:ref> <x:ref>SP</x:ref> <x:ref>time-of-day</x:ref> <x:ref>SP</x:ref> <x:ref>GMT</x:ref>
  <x:ref>date2</x:ref>        = <x:ref>day</x:ref> "-" <x:ref>month</x:ref> "-" 2<x:ref>DIGIT</x:ref>
                 ; day-month-year (e.g., 02-Jun-82)

  <x:ref>day-name-l</x:ref>   = <x:abnf-char-sequence>"Monday"</x:abnf-char-sequence> ; "Monday", case-sensitive
         / <x:abnf-char-sequence>"Tuesday"</x:abnf-char-sequence> ; "Tuesday", case-sensitive
         / <x:abnf-char-sequence>"Wednesday"</x:abnf-char-sequence> ; "Wednesday", case-sensitive
         / <x:abnf-char-sequence>"Thursday"</x:abnf-char-sequence> ; "Thursday", case-sensitive
         / <x:abnf-char-sequence>"Friday"</x:abnf-char-sequence> ; "Friday", case-sensitive
         / <x:abnf-char-sequence>"Saturday"</x:abnf-char-sequence> ; "Saturday", case-sensitive
         / <x:abnf-char-sequence>"Sunday"</x:abnf-char-sequence> ; "Sunday", case-sensitive
</artwork></figure>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="asctime-date"/>
  <x:ref>asctime-date</x:ref> = <x:ref>day-name</x:ref> <x:ref>SP</x:ref> <x:ref>date3</x:ref> <x:ref>SP</x:ref> <x:ref>time-of-day</x:ref> <x:ref>SP</x:ref> <x:ref>year</x:ref>
  <x:ref>date3</x:ref>        = <x:ref>month</x:ref> <x:ref>SP</x:ref> ( 2<x:ref>DIGIT</x:ref> / ( <x:ref>SP</x:ref> 1<x:ref>DIGIT</x:ref> ))
                 ; month day (e.g., Jun  2)
</artwork></figure>
<x:note>
  <t>
    <x:h>Note:</x:h> Recipients of date values are encouraged to be robust in
    accepting date values that may have been sent by non-HTTP
    applications, as is sometimes the case when retrieving or posting
    messages via proxies/gateways to SMTP or NNTP.
  </t>
</x:note>
<x:note>
  <t>
    <x:h>Note:</x:h> HTTP requirements for the date/time stamp format apply only
    to their usage within the protocol stream. Clients and servers are
    not required to use these formats for user presentation, request
    logging, etc.
  </t>
</x:note>
</section>

<section title="Transfer Codings" anchor="transfer.codings">
  <x:anchor-alias value="transfer-coding"/>
  <x:anchor-alias value="transfer-extension"/>
<t>
   Transfer-coding values are used to indicate an encoding
   transformation that has been, can be, or may need to be applied to an
   entity-body in order to ensure "safe transport" through the network.
   This differs from a content coding in that the transfer-coding is a
   property of the message, not of the original entity.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="transfer-coding"/><iref primary="true" item="Grammar" subitem="transfer-extension"/>
  <x:ref>transfer-coding</x:ref>         = "chunked" ; <xref target="chunked.encoding"/>
                          / "compress" ; <xref target="compress.coding"/>
                          / "deflate" ; <xref target="deflate.coding"/>
                          / "gzip" ; <xref target="gzip.coding"/>
                          / <x:ref>transfer-extension</x:ref>
  <x:ref>transfer-extension</x:ref>      = <x:ref>token</x:ref> *( <x:ref>OWS</x:ref> ";" <x:ref>OWS</x:ref> <x:ref>transfer-parameter</x:ref> )
</artwork></figure>
<t anchor="rule.parameter">
  <x:anchor-alias value="attribute"/>
  <x:anchor-alias value="transfer-parameter"/>
  <x:anchor-alias value="value"/>
   Parameters are in  the form of attribute/value pairs.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="transfer-parameter"/><iref primary="true" item="Grammar" subitem="attribute"/><iref primary="true" item="Grammar" subitem="value"/><iref primary="true" item="Grammar" subitem="date2"/><iref primary="true" item="Grammar" subitem="date3"/>
  <x:ref>transfer-parameter</x:ref>      = <x:ref>attribute</x:ref> <x:ref>BWS</x:ref> "=" <x:ref>BWS</x:ref> <x:ref>value</x:ref>
  <x:ref>attribute</x:ref>               = <x:ref>token</x:ref>
  <x:ref>value</x:ref>                   = <x:ref>token</x:ref> / <x:ref>quoted-string</x:ref>
</artwork></figure>
<t>
   All transfer-coding values are case-insensitive. HTTP/1.1 uses
   transfer-coding values in the TE header field (<xref target="header.te"/>) and in
   the Transfer-Encoding header field (<xref target="header.transfer-encoding"/>).
</t>
<t>
   Whenever a transfer-coding is applied to a message-body, the set of
   transfer-codings &MUST; include "chunked", unless the message indicates it
   is terminated by closing the connection. When the "chunked" transfer-coding
   is used, it &MUST; be the last transfer-coding applied to the
   message-body. The "chunked" transfer-coding &MUST-NOT; be applied more
   than once to a message-body. These rules allow the recipient to
   determine the transfer-length of the message (<xref target="message.length"/>).
</t>
<t>
   Transfer-codings are analogous to the Content-Transfer-Encoding values of
   MIME, which were designed to enable safe transport of binary data over a
   7-bit transport service (<xref target="RFC2045" x:fmt="," x:sec="6"/>).
   However, safe transport
   has a different focus for an 8bit-clean transfer protocol. In HTTP,
   the only unsafe characteristic of message-bodies is the difficulty in
   determining the exact body length (<xref target="message.length"/>), or the desire to
   encrypt data over a shared transport.
</t>
<t>
   A server which receives an entity-body with a transfer-coding it does
   not understand &SHOULD; return 501 (Not Implemented), and close the
   connection. A server &MUST-NOT; send transfer-codings to an HTTP/1.0
   client.
</t>

<section title="Chunked Transfer Coding" anchor="chunked.encoding">
  <iref item="chunked (Coding Format)"/>
  <iref item="Coding Format" subitem="chunked"/>
  <x:anchor-alias value="chunk"/>
  <x:anchor-alias value="Chunked-Body"/>
  <x:anchor-alias value="chunk-data"/>
  <x:anchor-alias value="chunk-ext"/>
  <x:anchor-alias value="chunk-ext-name"/>
  <x:anchor-alias value="chunk-ext-val"/>
  <x:anchor-alias value="chunk-size"/>
  <x:anchor-alias value="last-chunk"/>
  <x:anchor-alias value="trailer-part"/>
  <x:anchor-alias value="quoted-str-nf"/>
  <x:anchor-alias value="qdtext-nf"/>
<t>
   The chunked encoding modifies the body of a message in order to
   transfer it as a series of chunks, each with its own size indicator,
   followed by an &OPTIONAL; trailer containing entity-header fields. This
   allows dynamically produced content to be transferred along with the
   information necessary for the recipient to verify that it has
   received the full message.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Chunked-Body"/><iref primary="true" item="Grammar" subitem="chunk"/><iref primary="true" item="Grammar" subitem="chunk-size"/><iref primary="true" item="Grammar" subitem="last-chunk"/><iref primary="true" item="Grammar" subitem="chunk-ext"/><iref primary="true" item="Grammar" subitem="chunk-ext-name"/><iref primary="true" item="Grammar" subitem="chunk-ext-val"/><iref primary="true" item="Grammar" subitem="chunk-data"/><iref primary="true" item="Grammar" subitem="trailer-part"/><iref primary="true" item="Grammar" subitem="quoted-str-nf"/><iref primary="true" item="Grammar" subitem="qdtext-nf"/>
  <x:ref>Chunked-Body</x:ref>   = *<x:ref>chunk</x:ref>
                   <x:ref>last-chunk</x:ref>
                   <x:ref>trailer-part</x:ref>
                   <x:ref>CRLF</x:ref>
  
  <x:ref>chunk</x:ref>          = <x:ref>chunk-size</x:ref> *WSP [ <x:ref>chunk-ext</x:ref> ] <x:ref>CRLF</x:ref>
                   <x:ref>chunk-data</x:ref> <x:ref>CRLF</x:ref>
  <x:ref>chunk-size</x:ref>     = 1*<x:ref>HEXDIG</x:ref>
  <x:ref>last-chunk</x:ref>     = 1*("0") *WSP [ <x:ref>chunk-ext</x:ref> ] <x:ref>CRLF</x:ref>
  
  <x:ref>chunk-ext</x:ref>      = *( ";" *WSP <x:ref>chunk-ext-name</x:ref>
                      [ "=" <x:ref>chunk-ext-val</x:ref> ] *WSP )
  <x:ref>chunk-ext-name</x:ref> = <x:ref>token</x:ref>
  <x:ref>chunk-ext-val</x:ref>  = <x:ref>token</x:ref> / <x:ref>quoted-str-nf</x:ref>
  <x:ref>chunk-data</x:ref>     = 1*<x:ref>OCTET</x:ref> ; a sequence of chunk-size octets
  <x:ref>trailer-part</x:ref>   = *( <x:ref>entity-header</x:ref> <x:ref>CRLF</x:ref> )
  
  <x:ref>quoted-str-nf</x:ref>  = <x:ref>DQUOTE</x:ref> *( <x:ref>qdtext-nf</x:ref> / <x:ref>quoted-pair</x:ref> ) <x:ref>DQUOTE</x:ref>
                 ; like <x:ref>quoted-string</x:ref>, but disallowing line folding
  <x:ref>qdtext-nf</x:ref>      = <x:ref>WSP</x:ref> / %x21 / %x23-5B / %x5D-7E / <x:ref>obs-text</x:ref>
                 ; <x:ref>WSP</x:ref> / &lt;<x:ref>VCHAR</x:ref> except <x:ref>DQUOTE</x:ref> and "\"&gt; / <x:ref>obs-text</x:ref> 
</artwork></figure>
<t>
   The chunk-size field is a string of hex digits indicating the size of
   the chunk-data in octets. The chunked encoding is ended by any chunk whose size is
   zero, followed by the trailer, which is terminated by an empty line.
</t>
<t>
   The trailer allows the sender to include additional HTTP header
   fields at the end of the message. The Trailer header field can be
   used to indicate which header fields are included in a trailer (see
   <xref target="header.trailer"/>).
</t>
<t>
   A server using chunked transfer-coding in a response &MUST-NOT; use the
   trailer for any header fields unless at least one of the following is
   true:
  <list style="numbers">
    <t>the request included a TE header field that indicates "trailers" is
     acceptable in the transfer-coding of the  response, as described in
     <xref target="header.te"/>; or,</t>

    <t>the server is the origin server for the response, the trailer
     fields consist entirely of optional metadata, and the recipient
     could use the message (in a manner acceptable to the origin server)
     without receiving this metadata.  In other words, the origin server
     is willing to accept the possibility that the trailer fields might
     be silently discarded along the path to the client.</t>
  </list>
</t>
<t>
   This requirement prevents an interoperability failure when the
   message is being received by an HTTP/1.1 (or later) proxy and
   forwarded to an HTTP/1.0 recipient. It avoids a situation where
   compliance with the protocol would have necessitated a possibly
   infinite buffer on the proxy.
</t>
<t>
   A process for decoding the "chunked" transfer-coding
   can be represented in pseudo-code as:
</t>
<figure><artwork type="code">
  length := 0
  read chunk-size, chunk-ext (if any) and CRLF
  while (chunk-size &gt; 0) {
     read chunk-data and CRLF
     append chunk-data to entity-body
     length := length + chunk-size
     read chunk-size and CRLF
  }
  read entity-header
  while (entity-header not empty) {
     append entity-header to existing header fields
     read entity-header
  }
  Content-Length := length
  Remove "chunked" from Transfer-Encoding
</artwork></figure>
<t>
   All HTTP/1.1 applications &MUST; be able to receive and decode the
   "chunked" transfer-coding, and &MUST; ignore chunk-ext extensions
   they do not understand.
</t>
</section>

<section title="Compression Codings" anchor="compression.codings">
<t>
   The codings defined below can be used to compress the payload of a
   message.
</t>
<x:note><t>
   <x:h>Note:</x:h> Use of program names for the identification of encoding formats
   is not desirable and is discouraged for future encodings. Their
   use here is representative of historical practice, not good
   design.
</t></x:note>
<x:note><t>
   <x:h>Note:</x:h> For compatibility with previous implementations of HTTP,
   applications &SHOULD; consider "x-gzip" and "x-compress" to be
   equivalent to "gzip" and "compress" respectively.
</t></x:note>

<section title="Compress Coding" anchor="compress.coding">
<iref item="compress (Coding Format)"/>
<iref item="Coding Format" subitem="compress"/>
<t>
   The "compress" format is produced by the common UNIX file compression
   program "compress". This format is an adaptive Lempel-Ziv-Welch
   coding (LZW).
</t>
</section>

<section title="Deflate Coding" anchor="deflate.coding">
<iref item="deflate (Coding Format)"/>
<iref item="Coding Format" subitem="deflate"/>
<t>
   The "zlib" format is defined in <xref target="RFC1950"/> in combination with
   the "deflate" compression mechanism described in <xref target="RFC1951"/>.
</t>
</section>

<section title="Gzip Coding" anchor="gzip.coding">
<iref item="gzip (Coding Format)"/>
<iref item="Coding Format" subitem="gzip"/>
<t>
   The "gzip" format is produced by the file compression program
   "gzip" (GNU zip), as described in <xref target="RFC1952"/>. This format is a
   Lempel-Ziv coding (LZ77) with a 32 bit CRC.
</t>
</section>

</section>

<section title="Transfer Coding Registry" anchor="transfer.coding.registry">
<t>
   The HTTP Transfer Coding Registry defines the name space for the transfer
   coding names.
</t>
<t>
   Registrations &MUST; include the following fields:
   <list style="symbols">
     <t>Name</t>
     <t>Description</t>
     <t>Pointer to specification text</t>
   </list>
</t>
<t>
   Values to be added to this name space require expert review and a specification
   (see "Expert Review" and "Specification Required" in
   <xref target="RFC5226" x:fmt="of" x:sec="4.1"/>), and &MUST;
   conform to the purpose of transfer coding defined in this section.
</t>
<t>
   The registry itself is maintained at
   <eref target="http://www.iana.org/assignments/http-parameters"/>.
</t>
</section>
</section>

<section title="Product Tokens" anchor="product.tokens">
  <x:anchor-alias value="product"/>
  <x:anchor-alias value="product-version"/>
<t>
   Product tokens are used to allow communicating applications to
   identify themselves by software name and version. Most fields using
   product tokens also allow sub-products which form a significant part
   of the application to be listed, separated by whitespace. By
   convention, the products are listed in order of their significance
   for identifying the application.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="product"/><iref primary="true" item="Grammar" subitem="product-version"/>
  <x:ref>product</x:ref>         = <x:ref>token</x:ref> ["/" <x:ref>product-version</x:ref>]
  <x:ref>product-version</x:ref> = <x:ref>token</x:ref>
</artwork></figure>
<t>
   Examples:
</t>
<figure><artwork type="example">
  User-Agent: CERN-LineMode/2.15 libwww/2.17b3
  Server: Apache/0.8.4
</artwork></figure>
<t>
   Product tokens &SHOULD; be short and to the point. They &MUST-NOT; be
   used for advertising or other non-essential information. Although any
   token character &MAY; appear in a product-version, this token &SHOULD;
   only be used for a version identifier (i.e., successive versions of
   the same product &SHOULD; only differ in the product-version portion of
   the product value).
</t>
</section>

<section title="Quality Values" anchor="quality.values">
  <x:anchor-alias value="qvalue"/>
<t>
   Both transfer codings (TE request header, <xref target="header.te"/>)
   and content negotiation (&content.negotiation;) use short "floating point"
   numbers to indicate the relative importance ("weight") of various
   negotiable parameters.  A weight is normalized to a real number in
   the range 0 through 1, where 0 is the minimum and 1 the maximum
   value. If a parameter has a quality value of 0, then content with
   this parameter is "not acceptable" for the client. HTTP/1.1
   applications &MUST-NOT; generate more than three digits after the
   decimal point. User configuration of these values &SHOULD; also be
   limited in this fashion.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="qvalue"/>
  <x:ref>qvalue</x:ref>         = ( "0" [ "." 0*3<x:ref>DIGIT</x:ref> ] )
                 / ( "1" [ "." 0*3("0") ] )
</artwork></figure>
<x:note>
  <t>
     <x:h>Note:</x:h> "Quality values" is a misnomer, since these values merely represent
     relative degradation in desired quality.
  </t>
</x:note>
</section>

</section>

<section title="Connections" anchor="connections">

<section title="Persistent Connections" anchor="persistent.connections">

<section title="Purpose" anchor="persistent.purpose">
<t>
   Prior to persistent connections, a separate TCP connection was
   established to fetch each URL, increasing the load on HTTP servers
   and causing congestion on the Internet. The use of inline images and
   other associated data often require a client to make multiple
   requests of the same server in a short amount of time. Analysis of
   these performance problems and results from a prototype
   implementation are available <xref target="Pad1995"/> <xref target="Spe"/>. Implementation experience and
   measurements of actual HTTP/1.1 implementations show good
   results <xref target="Nie1997"/>. Alternatives have also been explored, for example,
   T/TCP <xref target="Tou1998"/>.
</t>
<t>
   Persistent HTTP connections have a number of advantages:
  <list style="symbols">
      <t>
        By opening and closing fewer TCP connections, CPU time is saved
        in routers and hosts (clients, servers, proxies, gateways,
        tunnels, or caches), and memory used for TCP protocol control
        blocks can be saved in hosts.
      </t>
      <t>
        HTTP requests and responses can be pipelined on a connection.
        Pipelining allows a client to make multiple requests without
        waiting for each response, allowing a single TCP connection to
        be used much more efficiently, with much lower elapsed time.
      </t>
      <t>
        Network congestion is reduced by reducing the number of packets
        caused by TCP opens, and by allowing TCP sufficient time to
        determine the congestion state of the network.
      </t>
      <t>
        Latency on subsequent requests is reduced since there is no time
        spent in TCP's connection opening handshake.
      </t>
      <t>
        HTTP can evolve more gracefully, since errors can be reported
        without the penalty of closing the TCP connection. Clients using
        future versions of HTTP might optimistically try a new feature,
        but if communicating with an older server, retry with old
        semantics after an error is reported.
      </t>
    </list>
</t>
<t>
   HTTP implementations &SHOULD; implement persistent connections.
</t>
</section>

<section title="Overall Operation" anchor="persistent.overall">
<t>
   A significant difference between HTTP/1.1 and earlier versions of
   HTTP is that persistent connections are the default behavior of any
   HTTP connection. That is, unless otherwise indicated, the client
   &SHOULD; assume that the server will maintain a persistent connection,
   even after error responses from the server.
</t>
<t>
   Persistent connections provide a mechanism by which a client and a
   server can signal the close of a TCP connection. This signaling takes
   place using the Connection header field (<xref target="header.connection"/>). Once a close
   has been signaled, the client &MUST-NOT; send any more requests on that
   connection.
</t>

<section title="Negotiation" anchor="persistent.negotiation">
<t>
   An HTTP/1.1 server &MAY; assume that a HTTP/1.1 client intends to
   maintain a persistent connection unless a Connection header including
   the connection-token "close" was sent in the request. If the server
   chooses to close the connection immediately after sending the
   response, it &SHOULD; send a Connection header including the
   connection-token close.
</t>
<t>
   An HTTP/1.1 client &MAY; expect a connection to remain open, but would
   decide to keep it open based on whether the response from a server
   contains a Connection header with the connection-token close. In case
   the client does not want to maintain a connection for more than that
   request, it &SHOULD; send a Connection header including the
   connection-token close.
</t>
<t>
   If either the client or the server sends the close token in the
   Connection header, that request becomes the last one for the
   connection.
</t>
<t>
   Clients and servers &SHOULD-NOT;  assume that a persistent connection is
   maintained for HTTP versions less than 1.1 unless it is explicitly
   signaled. See <xref target="compatibility.with.http.1.0.persistent.connections"/> for more information on backward
   compatibility with HTTP/1.0 clients.
</t>
<t>
   In order to remain persistent, all messages on the connection &MUST;
   have a self-defined message length (i.e., one not defined by closure
   of the connection), as described in <xref target="message.length"/>.
</t>
</section>

<section title="Pipelining" anchor="pipelining">
<t>
   A client that supports persistent connections &MAY; "pipeline" its
   requests (i.e., send multiple requests without waiting for each
   response). A server &MUST; send its responses to those requests in the
   same order that the requests were received.
</t>
<t>
   Clients which assume persistent connections and pipeline immediately
   after connection establishment &SHOULD; be prepared to retry their
   connection if the first pipelined attempt fails. If a client does
   such a retry, it &MUST-NOT; pipeline before it knows the connection is
   persistent. Clients &MUST; also be prepared to resend their requests if
   the server closes the connection before sending all of the
   corresponding responses.
</t>
<t>
   Clients &SHOULD-NOT;  pipeline requests using non-idempotent methods or
   non-idempotent sequences of methods (see &idempotent-methods;). Otherwise, a
   premature termination of the transport connection could lead to
   indeterminate results. A client wishing to send a non-idempotent
   request &SHOULD; wait to send that request until it has received the
   response status for the previous request.
</t>
</section>
</section>

<section title="Proxy Servers" anchor="persistent.proxy">
<t>
   It is especially important that proxies correctly implement the
   properties of the Connection header field as specified in <xref target="header.connection"/>.
</t>
<t>
   The proxy server &MUST; signal persistent connections separately with
   its clients and the origin servers (or other proxy servers) that it
   connects to. Each persistent connection applies to only one transport
   link.
</t>
<t>
   A proxy server &MUST-NOT; establish a HTTP/1.1 persistent connection
   with an HTTP/1.0 client (but see <xref x:sec="19.7.1" x:fmt="of" target="RFC2068"/>
   for information and discussion of the problems with the Keep-Alive header
   implemented by many HTTP/1.0 clients).
</t>
</section>

<section title="Practical Considerations" anchor="persistent.practical">
<t>
   Servers will usually have some time-out value beyond which they will
   no longer maintain an inactive connection. Proxy servers might make
   this a higher value since it is likely that the client will be making
   more connections through the same server. The use of persistent
   connections places no requirements on the length (or existence) of
   this time-out for either the client or the server.
</t>
<t>
   When a client or server wishes to time-out it &SHOULD; issue a graceful
   close on the transport connection. Clients and servers &SHOULD; both
   constantly watch for the other side of the transport close, and
   respond to it as appropriate. If a client or server does not detect
   the other side's close promptly it could cause unnecessary resource
   drain on the network.
</t>
<t>
   A client, server, or proxy &MAY; close the transport connection at any
   time. For example, a client might have started to send a new request
   at the same time that the server has decided to close the "idle"
   connection. From the server's point of view, the connection is being
   closed while it was idle, but from the client's point of view, a
   request is in progress.
</t>
<t>
   This means that clients, servers, and proxies &MUST; be able to recover
   from asynchronous close events. Client software &SHOULD; reopen the
   transport connection and retransmit the aborted sequence of requests
   without user interaction so long as the request sequence is
   idempotent (see &idempotent-methods;). Non-idempotent methods or sequences
   &MUST-NOT; be automatically retried, although user agents &MAY; offer a
   human operator the choice of retrying the request(s). Confirmation by
   user-agent software with semantic understanding of the application
   &MAY; substitute for user confirmation. The automatic retry &SHOULD-NOT; 
   be repeated if the second sequence of requests fails.
</t>
<t>
   Servers &SHOULD; always respond to at least one request per connection,
   if at all possible. Servers &SHOULD-NOT;  close a connection in the
   middle of transmitting a response, unless a network or client failure
   is suspected.
</t>
<t>
   Clients (including proxies) &SHOULD; limit the number of simultaneous
   connections that they maintain to a given server (including proxies).
</t>
<t>
   Previous revisions of HTTP gave a specific number of connections as a
   ceiling, but this was found to be impractical for many applications. As a
   result, this specification does not mandate a particular maximum number of
   connections, but instead encourages clients to be conservative when opening
   multiple connections.
</t>
<t>
   In particular, while using multiple connections avoids the "head-of-line
   blocking" problem (whereby a request that takes significant server-side
   processing and/or has a large payload can block subsequent requests on the
   same connection), each connection used consumes server resources (sometimes
   significantly), and furthermore using multiple connections can cause
   undesirable side effects in congested networks. 
</t>
<t>
   Note that servers might reject traffic that they deem abusive, including an
   excessive number of connections from a client.
</t>
</section>
</section>

<section title="Message Transmission Requirements" anchor="message.transmission.requirements">

<section title="Persistent Connections and Flow Control" anchor="persistent.flow">
<t>
   HTTP/1.1 servers &SHOULD; maintain persistent connections and use TCP's
   flow control mechanisms to resolve temporary overloads, rather than
   terminating connections with the expectation that clients will retry.
   The latter technique can exacerbate network congestion.
</t>
</section>

<section title="Monitoring Connections for Error Status Messages" anchor="persistent.monitor">
<t>
   An HTTP/1.1 (or later) client sending a message-body &SHOULD; monitor
   the network connection for an error status while it is transmitting
   the request. If the client sees an error status, it &SHOULD;
   immediately cease transmitting the body. If the body is being sent
   using a "chunked" encoding (<xref target="transfer.codings"/>), a zero length chunk and
   empty trailer &MAY; be used to prematurely mark the end of the message.
   If the body was preceded by a Content-Length header, the client &MUST;
   close the connection.
</t>
</section>

<section title="Use of the 100 (Continue) Status" anchor="use.of.the.100.status">
<t>
   The purpose of the 100 (Continue) status (see &status-100;) is to
   allow a client that is sending a request message with a request body
   to determine if the origin server is willing to accept the request
   (based on the request headers) before the client sends the request
   body. In some cases, it might either be inappropriate or highly
   inefficient for the client to send the body if the server will reject
   the message without looking at the body.
</t>
<t>
   Requirements for HTTP/1.1 clients:
  <list style="symbols">
    <t>
        If a client will wait for a 100 (Continue) response before
        sending the request body, it &MUST; send an Expect request-header
        field (&header-expect;) with the "100-continue" expectation.
    </t>
    <t>
        A client &MUST-NOT; send an Expect request-header field (&header-expect;)
        with the "100-continue" expectation if it does not intend
        to send a request body.
    </t>
  </list>
</t>
<t>
   Because of the presence of older implementations, the protocol allows
   ambiguous situations in which a client may send "Expect: 100-continue"
   without receiving either a 417 (Expectation Failed) status
   or a 100 (Continue) status. Therefore, when a client sends this
   header field to an origin server (possibly via a proxy) from which it
   has never seen a 100 (Continue) status, the client &SHOULD-NOT;  wait
   for an indefinite period before sending the request body.
</t>
<t>
   Requirements for HTTP/1.1 origin servers:
  <list style="symbols">
    <t> Upon receiving a request which includes an Expect request-header
        field with the "100-continue" expectation, an origin server &MUST;
        either respond with 100 (Continue) status and continue to read
        from the input stream, or respond with a final status code. The
        origin server &MUST-NOT; wait for the request body before sending
        the 100 (Continue) response. If it responds with a final status
        code, it &MAY; close the transport connection or it &MAY; continue
        to read and discard the rest of the request.  It &MUST-NOT;
        perform the requested method if it returns a final status code.
    </t>
    <t> An origin server &SHOULD-NOT;  send a 100 (Continue) response if
        the request message does not include an Expect request-header
        field with the "100-continue" expectation, and &MUST-NOT; send a
        100 (Continue) response if such a request comes from an HTTP/1.0
        (or earlier) client. There is an exception to this rule: for
        compatibility with <xref target="RFC2068"/>, a server &MAY; send a 100 (Continue)
        status in response to an HTTP/1.1 PUT or POST request that does
        not include an Expect request-header field with the "100-continue"
        expectation. This exception, the purpose of which is
        to minimize any client processing delays associated with an
        undeclared wait for 100 (Continue) status, applies only to
        HTTP/1.1 requests, and not to requests with any other HTTP-version
        value.
    </t>
    <t> An origin server &MAY; omit a 100 (Continue) response if it has
        already received some or all of the request body for the
        corresponding request.
    </t>
    <t> An origin server that sends a 100 (Continue) response &MUST;
    ultimately send a final status code, once the request body is
        received and processed, unless it terminates the transport
        connection prematurely.
    </t>
    <t> If an origin server receives a request that does not include an
        Expect request-header field with the "100-continue" expectation,
        the request includes a request body, and the server responds
        with a final status code before reading the entire request body
        from the transport connection, then the server &SHOULD-NOT;  close
        the transport connection until it has read the entire request,
        or until the client closes the connection. Otherwise, the client
        might not reliably receive the response message. However, this
        requirement is not be construed as preventing a server from
        defending itself against denial-of-service attacks, or from
        badly broken client implementations.
      </t>
    </list>
</t>
<t>
   Requirements for HTTP/1.1 proxies:
  <list style="symbols">
    <t> If a proxy receives a request that includes an Expect request-header
        field with the "100-continue" expectation, and the proxy
        either knows that the next-hop server complies with HTTP/1.1 or
        higher, or does not know the HTTP version of the next-hop
        server, it &MUST; forward the request, including the Expect header
        field.
    </t>
    <t> If the proxy knows that the version of the next-hop server is
        HTTP/1.0 or lower, it &MUST-NOT; forward the request, and it &MUST;
        respond with a 417 (Expectation Failed) status.
    </t>
    <t> Proxies &SHOULD; maintain a cache recording the HTTP version
        numbers received from recently-referenced next-hop servers.
    </t>
    <t> A proxy &MUST-NOT; forward a 100 (Continue) response if the
        request message was received from an HTTP/1.0 (or earlier)
        client and did not include an Expect request-header field with
        the "100-continue" expectation. This requirement overrides the
        general rule for forwarding of 1xx responses (see &status-1xx;).
    </t>
  </list>
</t>
</section>

<section title="Client Behavior if Server Prematurely Closes Connection" anchor="connection.premature">
<t>
   If an HTTP/1.1 client sends a request which includes a request body,
   but which does not include an Expect request-header field with the
   "100-continue" expectation, and if the client is not directly
   connected to an HTTP/1.1 origin server, and if the client sees the
   connection close before receiving any status from the server, the
   client &SHOULD; retry the request.  If the client does retry this
   request, it &MAY; use the following "binary exponential backoff"
   algorithm to be assured of obtaining a reliable response:
  <list style="numbers">
    <t>
      Initiate a new connection to the server
    </t>
    <t>
      Transmit the request-headers
    </t>
    <t>
      Initialize a variable R to the estimated round-trip time to the
         server (e.g., based on the time it took to establish the
         connection), or to a constant value of 5 seconds if the round-trip
         time is not available.
    </t>
    <t>
       Compute T = R * (2**N), where N is the number of previous
         retries of this request.
    </t>
    <t>
       Wait either for an error response from the server, or for T
         seconds (whichever comes first)
    </t>
    <t>
       If no error response is received, after T seconds transmit the
         body of the request.
    </t>
    <t>
       If client sees that the connection is closed prematurely,
         repeat from step 1 until the request is accepted, an error
         response is received, or the user becomes impatient and
         terminates the retry process.
    </t>
  </list>
</t>
<t>
   If at any point an error status is received, the client
  <list style="symbols">
      <t>&SHOULD-NOT;  continue and</t>

      <t>&SHOULD; close the connection if it has not completed sending the
        request message.</t>
    </list>
</t>
</section>
</section>
</section>


<section title="Miscellaneous notes that may disappear" anchor="misc">
<section title="Scheme aliases considered harmful" anchor="scheme.aliases">
<t>
   <cref>TBS: describe why aliases like webcal are harmful.</cref>
</t>
</section>

<section title="Use of HTTP for proxy communication" anchor="http.proxy">
<t>
   <cref>TBD: Configured to use HTTP to proxy HTTP or other protocols.</cref>
</t>
</section>

<section title="Interception of HTTP for access control" anchor="http.intercept">
<t>
   <cref>TBD: Interception of HTTP traffic for initiating access control.</cref>
</t>
</section>

<section title="Use of HTTP by other protocols" anchor="http.others">
<t>
   <cref>TBD: Profiles of HTTP defined by other protocol.
   Extensions of HTTP like WebDAV.</cref>
</t>

</section>
<section title="Use of HTTP by media type specification" anchor="http.media">
<t>
   <cref>TBD: Instructions on composing HTTP requests via hypertext formats.</cref>
</t>
</section>
</section>

<section title="Header Field Definitions" anchor="header.field.definitions">
<t>
   This section defines the syntax and semantics of HTTP/1.1 header fields
   related to message framing and transport protocols.
</t>
<t>
   For entity-header fields, both sender and recipient refer to either the
   client or the server, depending on who sends and who receives the entity.
</t>

<section title="Connection" anchor="header.connection">
  <iref primary="true" item="Connection header" x:for-anchor=""/>
  <iref primary="true" item="Headers" subitem="Connection" x:for-anchor=""/>
  <x:anchor-alias value="Connection"/>
  <x:anchor-alias value="connection-token"/>
  <x:anchor-alias value="Connection-v"/>
<t>
   The "Connection" general-header field allows the sender to specify
   options that are desired for that particular connection and &MUST-NOT;
   be communicated by proxies over further connections.
</t>
<t>
   The Connection header's value has the following grammar:
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Connection"/><iref primary="true" item="Grammar" subitem="Connection-v"/><iref primary="true" item="Grammar" subitem="connection-token"/>
  <x:ref>Connection</x:ref>       = "Connection" ":" <x:ref>OWS</x:ref> <x:ref>Connection-v</x:ref>
  <x:ref>Connection-v</x:ref>     = 1#<x:ref>connection-token</x:ref>
  <x:ref>connection-token</x:ref> = <x:ref>token</x:ref>
</artwork></figure>
<t>
   HTTP/1.1 proxies &MUST; parse the Connection header field before a
   message is forwarded and, for each connection-token in this field,
   remove any header field(s) from the message with the same name as the
   connection-token. Connection options are signaled by the presence of
   a connection-token in the Connection header field, not by any
   corresponding additional header field(s), since the additional header
   field may not be sent if there are no parameters associated with that
   connection option.
</t>
<t>
   Message headers listed in the Connection header &MUST-NOT; include
   end-to-end headers, such as Cache-Control.
</t>
<t>
   HTTP/1.1 defines the "close" connection option for the sender to
   signal that the connection will be closed after completion of the
   response. For example,
</t>
<figure><artwork type="example">
  Connection: close
</artwork></figure>
<t>
   in either the request or the response header fields indicates that
   the connection &SHOULD-NOT;  be considered "persistent" (<xref target="persistent.connections"/>)
   after the current request/response is complete.
</t>
<t>
   An HTTP/1.1 client that does not support persistent connections &MUST;
   include the "close" connection option in every request message.
</t>
<t>
   An HTTP/1.1 server that does not support persistent connections &MUST;
   include the "close" connection option in every response message that
   does not have a 1xx (Informational) status code.
</t>
<t>
   A system receiving an HTTP/1.0 (or lower-version) message that
   includes a Connection header &MUST;, for each connection-token in this
   field, remove and ignore any header field(s) from the message with
   the same name as the connection-token. This protects against mistaken
   forwarding of such header fields by pre-HTTP/1.1 proxies. See <xref target="compatibility.with.http.1.0.persistent.connections"/>.
</t>
</section>

<section title="Content-Length" anchor="header.content-length">
  <iref primary="true" item="Content-Length header" x:for-anchor=""/>
  <iref primary="true" item="Headers" subitem="Content-Length" x:for-anchor=""/>
  <x:anchor-alias value="Content-Length"/>
  <x:anchor-alias value="Content-Length-v"/>
<t>
   The "Content-Length" entity-header field indicates the size of the
   entity-body, in number of OCTETs. In the case of responses to the HEAD
   method, it indicates the size of the entity-body that would have been sent
   had the request been a GET.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Content-Length"/><iref primary="true" item="Grammar" subitem="Content-Length-v"/>
  <x:ref>Content-Length</x:ref>   = "Content-Length" ":" <x:ref>OWS</x:ref> 1*<x:ref>Content-Length-v</x:ref>
  <x:ref>Content-Length-v</x:ref> = 1*<x:ref>DIGIT</x:ref>
</artwork></figure>
<t>
   An example is
</t>
<figure><artwork type="example">
  Content-Length: 3495
</artwork></figure>
<t>
   Applications &SHOULD; use this field to indicate the transfer-length of
   the message-body, unless this is prohibited by the rules in <xref target="message.length"/>.
</t>
<t>
   Any Content-Length greater than or equal to zero is a valid value.
   <xref target="message.length"/> describes how to determine the length of a message-body
   if a Content-Length is not given.
</t>
<t>
   Note that the meaning of this field is significantly different from
   the corresponding definition in MIME, where it is an optional field
   used within the "message/external-body" content-type. In HTTP, it
   &SHOULD; be sent whenever the message's length can be determined prior
   to being transferred, unless this is prohibited by the rules in
   <xref target="message.length"/>.
</t>
</section>

<section title="Date" anchor="header.date">
  <iref primary="true" item="Date header" x:for-anchor=""/>
  <iref primary="true" item="Headers" subitem="Date" x:for-anchor=""/>
  <x:anchor-alias value="Date"/>
  <x:anchor-alias value="Date-v"/>
<t>
   The "Date" general-header field represents the date and time at which
   the message was originated, having the same semantics as the Origination
   Date Field (orig-date) defined in <xref target="RFC5322" x:fmt="of" x:sec="3.6.1"/>.
   The field value is an HTTP-date, as described in <xref target="date.time.formats.full.date"/>;
   it &MUST; be sent in rfc1123-date format.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Date"/><iref primary="true" item="Grammar" subitem="Date-v"/>
  <x:ref>Date</x:ref>   = "Date" ":" <x:ref>OWS</x:ref> <x:ref>Date-v</x:ref>
  <x:ref>Date-v</x:ref> = <x:ref>HTTP-date</x:ref>
</artwork></figure>
<t>
   An example is
</t>
<figure><artwork type="example">
  Date: Tue, 15 Nov 1994 08:12:31 GMT
</artwork></figure>
<t>
   Origin servers &MUST; include a Date header field in all responses,
   except in these cases:
  <list style="numbers">
      <t>If the response status code is 100 (Continue) or 101 (Switching
         Protocols), the response &MAY; include a Date header field, at
         the server's option.</t>

      <t>If the response status code conveys a server error, e.g. 500
         (Internal Server Error) or 503 (Service Unavailable), and it is
         inconvenient or impossible to generate a valid Date.</t>

      <t>If the server does not have a clock that can provide a
         reasonable approximation of the current time, its responses
         &MUST-NOT; include a Date header field. In this case, the rules
         in <xref target="clockless.origin.server.operation"/> &MUST; be followed.</t>
  </list>
</t>
<t>
   A received message that does not have a Date header field &MUST; be
   assigned one by the recipient if the message will be cached by that
   recipient or gatewayed via a protocol which requires a Date. An HTTP
   implementation without a clock &MUST-NOT; cache responses without
   revalidating them on every use. An HTTP cache, especially a shared
   cache, &SHOULD; use a mechanism, such as NTP <xref target="RFC1305"/>, to synchronize its
   clock with a reliable external standard.
</t>
<t>
   Clients &SHOULD; only send a Date header field in messages that include
   an entity-body, as in the case of the PUT and POST requests, and even
   then it is optional. A client without a clock &MUST-NOT; send a Date
   header field in a request.
</t>
<t>
   The HTTP-date sent in a Date header &SHOULD-NOT;  represent a date and
   time subsequent to the generation of the message. It &SHOULD; represent
   the best available approximation of the date and time of message
   generation, unless the implementation has no means of generating a
   reasonably accurate date and time. In theory, the date ought to
   represent the moment just before the entity is generated. In
   practice, the date can be generated at any time during the message
   origination without affecting its semantic value.
</t>

<section title="Clockless Origin Server Operation" anchor="clockless.origin.server.operation">
<t>
   Some origin server implementations might not have a clock available.
   An origin server without a clock &MUST-NOT; assign Expires or Last-Modified
   values to a response, unless these values were associated
   with the resource by a system or user with a reliable clock. It &MAY;
   assign an Expires value that is known, at or before server
   configuration time, to be in the past (this allows "pre-expiration"
   of responses without storing separate Expires values for each
   resource).
</t>
</section>
</section>

<section title="Host" anchor="header.host">
  <iref primary="true" item="Host header" x:for-anchor=""/>
  <iref primary="true" item="Headers" subitem="Host" x:for-anchor=""/>
  <x:anchor-alias value="Host"/>
  <x:anchor-alias value="Host-v"/>
<t>
   The "Host" request-header field specifies the Internet host and port
   number of the resource being requested, allowing the origin server or
   gateway to differentiate between internally-ambiguous URLs, such as the root
   "/" URL of a server for multiple host names on a single IP address.
</t>
<t>    
   The Host field value &MUST; represent the naming authority of the origin
   server or gateway given by the original URL obtained from the user or
   referring resource (generally an http URI, as described in
   <xref target="http.uri"/>).
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Host"/><iref primary="true" item="Grammar" subitem="Host-v"/>
  <x:ref>Host</x:ref>   = "Host" ":" <x:ref>OWS</x:ref> <x:ref>Host-v</x:ref>
  <x:ref>Host-v</x:ref> = <x:ref>uri-host</x:ref> [ ":" <x:ref>port</x:ref> ] ; <xref target="http.uri"/>
</artwork></figure>
<t>
   A "host" without any trailing port information implies the default
   port for the service requested (e.g., "80" for an HTTP URL). For
   example, a request on the origin server for
   &lt;http://www.example.org/pub/WWW/&gt; would properly include:
</t>
<figure><artwork type="example">
  GET /pub/WWW/ HTTP/1.1
  Host: www.example.org
</artwork></figure>
<t>
   A client &MUST; include a Host header field in all HTTP/1.1 request
   messages. If the requested URI does not include an Internet host
   name for the service being requested, then the Host header field &MUST;
   be given with an empty value. An HTTP/1.1 proxy &MUST; ensure that any
   request message it forwards does contain an appropriate Host header
   field that identifies the service being requested by the proxy. All
   Internet-based HTTP/1.1 servers &MUST; respond with a 400 (Bad Request)
   status code to any HTTP/1.1 request message which lacks a Host header
   field.
</t>
<t>
   See Sections <xref target="the.resource.identified.by.a.request" format="counter"/>
   and <xref target="changes.to.simplify.multi-homed.web.servers.and.conserve.ip.addresses" format="counter"/>
   for other requirements relating to Host.
</t>
</section>

<section title="TE" anchor="header.te">
  <iref primary="true" item="TE header" x:for-anchor=""/>
  <iref primary="true" item="Headers" subitem="TE" x:for-anchor=""/>
  <x:anchor-alias value="TE"/>
  <x:anchor-alias value="TE-v"/>
  <x:anchor-alias value="t-codings"/>
  <x:anchor-alias value="te-params"/>
  <x:anchor-alias value="te-ext"/>
<t>
   The "TE" request-header field indicates what extension transfer-codings
   it is willing to accept in the response, and whether or not it is
   willing to accept trailer fields in a chunked transfer-coding.
</t>
<t>
   Its value may consist of the keyword "trailers" and/or a comma-separated
   list of extension transfer-coding names with optional accept
   parameters (as described in <xref target="transfer.codings"/>).
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="TE"/><iref primary="true" item="Grammar" subitem="TE-v"/><iref primary="true" item="Grammar" subitem="t-codings"/><iref primary="true" item="Grammar" subitem="te-params"/><iref primary="true" item="Grammar" subitem="te-ext"/>
  <x:ref>TE</x:ref>        = "TE" ":" <x:ref>OWS</x:ref> <x:ref>TE-v</x:ref>
  <x:ref>TE-v</x:ref>      = #<x:ref>t-codings</x:ref>
  <x:ref>t-codings</x:ref> = "trailers" / ( <x:ref>transfer-extension</x:ref> [ <x:ref>te-params</x:ref> ] )
  <x:ref>te-params</x:ref> = <x:ref>OWS</x:ref> ";" <x:ref>OWS</x:ref> "q=" <x:ref>qvalue</x:ref> *( <x:ref>te-ext</x:ref> )
  <x:ref>te-ext</x:ref>    = <x:ref>OWS</x:ref> ";" <x:ref>OWS</x:ref> <x:ref>token</x:ref> [ "=" ( <x:ref>token</x:ref> / <x:ref>quoted-string</x:ref> ) ]
</artwork></figure>
<t>
   The presence of the keyword "trailers" indicates that the client is
   willing to accept trailer fields in a chunked transfer-coding, as
   defined in <xref target="chunked.encoding"/>. This keyword is reserved for use with
   transfer-coding values even though it does not itself represent a
   transfer-coding.
</t>
<t>
   Examples of its use are:
</t>
<figure><artwork type="example">
  TE: deflate
  TE:
  TE: trailers, deflate;q=0.5
</artwork></figure>
<t>
   The TE header field only applies to the immediate connection.
   Therefore, the keyword &MUST; be supplied within a Connection header
   field (<xref target="header.connection"/>) whenever TE is present in an HTTP/1.1 message.
</t>
<t>
   A server tests whether a transfer-coding is acceptable, according to
   a TE field, using these rules:
  <list style="numbers">
    <x:lt>
      <t>The "chunked" transfer-coding is always acceptable. If the
         keyword "trailers" is listed, the client indicates that it is
         willing to accept trailer fields in the chunked response on
         behalf of itself and any downstream clients. The implication is
         that, if given, the client is stating that either all
         downstream clients are willing to accept trailer fields in the
         forwarded response, or that it will attempt to buffer the
         response on behalf of downstream recipients.
      </t><t>
         <x:h>Note:</x:h> HTTP/1.1 does not define any means to limit the size of a
         chunked response such that a client can be assured of buffering
         the entire response.</t>
    </x:lt>
    <x:lt>
      <t>If the transfer-coding being tested is one of the transfer-codings
         listed in the TE field, then it is acceptable unless it
         is accompanied by a qvalue of 0. (As defined in <xref target="quality.values"/>, a
         qvalue of 0 means "not acceptable.")</t>
    </x:lt>
    <x:lt>
      <t>If multiple transfer-codings are acceptable, then the
         acceptable transfer-coding with the highest non-zero qvalue is
         preferred.  The "chunked" transfer-coding always has a qvalue
         of 1.</t>
    </x:lt>
  </list>
</t>
<t>
   If the TE field-value is empty or if no TE field is present, the only
   transfer-coding is "chunked". A message with no transfer-coding is
   always acceptable.
</t>
</section>

<section title="Trailer" anchor="header.trailer">
  <iref primary="true" item="Trailer header" x:for-anchor=""/>
  <iref primary="true" item="Headers" subitem="Trailer" x:for-anchor=""/>
  <x:anchor-alias value="Trailer"/>
  <x:anchor-alias value="Trailer-v"/>
<t>
   The "Trailer" general-header field indicates that the given set of
   header fields is present in the trailer of a message encoded with
   chunked transfer-coding.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Trailer"/><iref primary="true" item="Grammar" subitem="Trailer-v"/>
  <x:ref>Trailer</x:ref>   = "Trailer" ":" <x:ref>OWS</x:ref> <x:ref>Trailer-v</x:ref>
  <x:ref>Trailer-v</x:ref> = 1#<x:ref>field-name</x:ref>
</artwork></figure>
<t>
   An HTTP/1.1 message &SHOULD; include a Trailer header field in a
   message using chunked transfer-coding with a non-empty trailer. Doing
   so allows the recipient to know which header fields to expect in the
   trailer.
</t>
<t>
   If no Trailer header field is present, the trailer &SHOULD-NOT;  include
   any header fields. See <xref target="chunked.encoding"/> for restrictions on the use of
   trailer fields in a "chunked" transfer-coding.
</t>
<t>
   Message header fields listed in the Trailer header field &MUST-NOT;
   include the following header fields:
  <list style="symbols">
    <t>Transfer-Encoding</t>
    <t>Content-Length</t>
    <t>Trailer</t>
  </list>
</t>
</section>

<section title="Transfer-Encoding" anchor="header.transfer-encoding">
  <iref primary="true" item="Transfer-Encoding header" x:for-anchor=""/>
  <iref primary="true" item="Headers" subitem="Transfer-Encoding" x:for-anchor=""/>
  <x:anchor-alias value="Transfer-Encoding"/>
  <x:anchor-alias value="Transfer-Encoding-v"/>
<t>
   The "Transfer-Encoding" general-header field indicates what transfer-codings
   (if any) have been applied to the message body. It differs from 
   Content-Encoding (&content-codings;) in that transfer-codings are a property
   of the message (and therefore are removed by intermediaries), whereas
   content-codings are not.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Transfer-Encoding"/><iref primary="true" item="Grammar" subitem="Transfer-Encoding-v"/>
  <x:ref>Transfer-Encoding</x:ref>   = "Transfer-Encoding" ":" <x:ref>OWS</x:ref>
                        <x:ref>Transfer-Encoding-v</x:ref>
  <x:ref>Transfer-Encoding-v</x:ref> = 1#<x:ref>transfer-coding</x:ref>
</artwork></figure>
<t>
   Transfer-codings are defined in <xref target="transfer.codings"/>. An example is:
</t>
<figure><artwork type="example">
  Transfer-Encoding: chunked
</artwork></figure>
<t>
   If multiple encodings have been applied to an entity, the transfer-codings
   &MUST; be listed in the order in which they were applied.
   Additional information about the encoding parameters &MAY; be provided
   by other entity-header fields not defined by this specification.
</t>
<t>
   Many older HTTP/1.0 applications do not understand the Transfer-Encoding
   header.
</t>
</section>

<section title="Upgrade" anchor="header.upgrade">
  <iref primary="true" item="Upgrade header" x:for-anchor=""/>
  <iref primary="true" item="Headers" subitem="Upgrade" x:for-anchor=""/>
  <x:anchor-alias value="Upgrade"/>
  <x:anchor-alias value="Upgrade-v"/>
<t>
   The "Upgrade" general-header field allows the client to specify what
   additional communication protocols it would like to use, if the server 
   chooses to switch protocols. Additionally, the server &MUST; use the Upgrade
   header field within a 101 (Switching Protocols) response to indicate which
   protocol(s) are being switched to.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Upgrade"/><iref primary="true" item="Grammar" subitem="Upgrade-v"/>
  <x:ref>Upgrade</x:ref>   = "Upgrade" ":" <x:ref>OWS</x:ref> <x:ref>Upgrade-v</x:ref>
  <x:ref>Upgrade-v</x:ref> = 1#<x:ref>product</x:ref>
</artwork></figure>
<t>
   For example,
</t>
<figure><artwork type="example">
  Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11
</artwork></figure>
<t>
   The Upgrade header field is intended to provide a simple mechanism
   for transition from HTTP/1.1 to some other, incompatible protocol. It
   does so by allowing the client to advertise its desire to use another
   protocol, such as a later version of HTTP with a higher major version
   number, even though the current request has been made using HTTP/1.1.
   This eases the difficult transition between incompatible protocols by
   allowing the client to initiate a request in the more commonly
   supported protocol while indicating to the server that it would like
   to use a "better" protocol if available (where "better" is determined
   by the server, possibly according to the nature of the method and/or
   resource being requested).
</t>
<t>
   The Upgrade header field only applies to switching application-layer
   protocols upon the existing transport-layer connection. Upgrade
   cannot be used to insist on a protocol change; its acceptance and use
   by the server is optional. The capabilities and nature of the
   application-layer communication after the protocol change is entirely
   dependent upon the new protocol chosen, although the first action
   after changing the protocol &MUST; be a response to the initial HTTP
   request containing the Upgrade header field.
</t>
<t>
   The Upgrade header field only applies to the immediate connection.
   Therefore, the upgrade keyword &MUST; be supplied within a Connection
   header field (<xref target="header.connection"/>) whenever Upgrade is present in an
   HTTP/1.1 message.
</t>
<t>
   The Upgrade header field cannot be used to indicate a switch to a
   protocol on a different connection. For that purpose, it is more
   appropriate to use a 301, 302, 303, or 305 redirection response.
</t>
<t>
   This specification only defines the protocol name "HTTP" for use by
   the family of Hypertext Transfer Protocols, as defined by the HTTP
   version rules of <xref target="http.version"/> and future updates to this
   specification. Additional tokens can be registered with IANA using the
   registration procedure defined below.  
</t>

<section title="Upgrade Token Registry" anchor="upgrade.token.registry">
<t>
   The HTTP Upgrade Token Registry defines the name space for product
   tokens used to identify protocols in the Upgrade header field.
   Each registered token should be associated with one or a set of
   specifications, and with contact information.
</t>
<t>
   Registrations should be allowed on a First Come First Served basis as
   described in <xref target="RFC5226" x:sec="4.1" x:fmt="of"/>. These
   specifications need not be IETF documents or be subject to IESG review, but
   should obey the following rules:
  <list style="numbers">
    <t>A token, once registered, stays registered forever.</t>
    <t>The registration &MUST; name a responsible party for the
       registration.</t>
    <t>The registration &MUST; name a point of contact.</t>
    <t>The registration &MAY; name the documentation required for the
       token.</t>
    <t>The responsible party &MAY; change the registration at any time.
       The IANA will keep a record of all such changes, and make them
       available upon request.</t>
    <t>The responsible party for the first registration of a "product"
       token &MUST; approve later registrations of a "version" token
       together with that "product" token before they can be registered.</t>
    <t>If absolutely required, the IESG &MAY; reassign the responsibility
       for a token. This will normally only be used in the case when a
       responsible party cannot be contacted.</t>
  </list>
</t>
<t>
   It is not required that specifications for upgrade tokens be made
   publicly available, but the contact information for the registration
   should be.
</t>
</section>


</section>

<section title="Via" anchor="header.via">
  <iref primary="true" item="Via header" x:for-anchor=""/>
  <iref primary="true" item="Headers" subitem="Via" x:for-anchor=""/>
  <x:anchor-alias value="protocol-name"/>
  <x:anchor-alias value="protocol-version"/>
  <x:anchor-alias value="pseudonym"/>
  <x:anchor-alias value="received-by"/>
  <x:anchor-alias value="received-protocol"/>
  <x:anchor-alias value="Via"/>
  <x:anchor-alias value="Via-v"/>
<t>
   The "Via" general-header field &MUST; be used by gateways and proxies to
   indicate the intermediate protocols and recipients between the user
   agent and the server on requests, and between the origin server and
   the client on responses. It is analogous to the "Received" field defined in
   <xref target="RFC5322" x:fmt="of" x:sec="3.6.7"/> and is intended to be used for tracking message forwards,
   avoiding request loops, and identifying the protocol capabilities of
   all senders along the request/response chain.
</t>
<figure><artwork type="abnf2616"><iref primary="true" item="Grammar" subitem="Via"/><iref primary="true" item="Grammar" subitem="Via-v"/><iref primary="true" item="Grammar" subitem="received-protocol"/><iref primary="true" item="Grammar" subitem="protocol-name"/><iref primary="true" item="Grammar" subitem="protocol-version"/><iref primary="true" item="Grammar" subitem="received-by"/><iref primary="true" item="Grammar" subitem="pseudonym"/>
  <x:ref>Via</x:ref>               = "Via" ":" <x:ref>OWS</x:ref> <x:ref>Via-v</x:ref>
  <x:ref>Via-v</x:ref>             = 1#( <x:ref>received-protocol</x:ref> <x:ref>RWS</x:ref> <x:ref>received-by</x:ref>
                          [ <x:ref>RWS</x:ref> <x:ref>comment</x:ref> ] )
  <x:ref>received-protocol</x:ref> = [ <x:ref>protocol-name</x:ref> "/" ] <x:ref>protocol-version</x:ref>
  <x:ref>protocol-name</x:ref>     = <x:ref>token</x:ref>
  <x:ref>protocol-version</x:ref>  = <x:ref>token</x:ref>
  <x:ref>received-by</x:ref>       = ( <x:ref>uri-host</x:ref> [ ":" <x:ref>port</x:ref> ] ) / <x:ref>pseudonym</x:ref>
  <x:ref>pseudonym</x:ref>         = <x:ref>token</x:ref>
</artwork></figure>
<t>
   The received-protocol indicates the protocol version of the message
   received by the server or client along each segment of the
   request/response chain. The received-protocol version is appended to
   the Via field value when the message is forwarded so that information
   about the protocol capabilities of upstream applications remains
   visible to all recipients.
</t>
<t>
   The protocol-name is optional if and only if it would be "HTTP". The
   received-by field is normally the host and optional port number of a
   recipient server or client that subsequently forwarded the message.
   However, if the real host is considered to be sensitive information,
   it &MAY; be replaced by a pseudonym. If the port is not given, it &MAY;
   be assumed to be the default port of the received-protocol.
</t>
<t>
   Multiple Via field values represents each proxy or gateway that has
   forwarded the message. Each recipient &MUST; append its information
   such that the end result is ordered according to the sequence of
   forwarding applications.
</t>
<t>
   Comments &MAY; be used in the Via header field to identify the software
   of the recipient proxy or gateway, analogous to the User-Agent and
   Server header fields. However, all comments in the Via field are
   optional and &MAY; be removed by any recipient prior to forwarding the
   message.
</t>
<t>
   For example, a request message could be sent from an HTTP/1.0 user
   agent to an internal proxy code-named "fred", which uses HTTP/1.1 to
   forward the request to a public proxy at p.example.net, which completes
   the request by forwarding it to the origin server at www.example.com.
   The request received by www.example.com would then have the following
   Via header field:
</t>
<figure><artwork type="example">
  Via: 1.0 fred, 1.1 p.example.net (Apache/1.1)
</artwork></figure>
<t>
   Proxies and gateways used as a portal through a network firewall
   &SHOULD-NOT;, by default, forward the names and ports of hosts within
   the firewall region. This information &SHOULD; only be propagated if
   explicitly enabled. If not enabled, the received-by host of any host
   behind the firewall &SHOULD; be replaced by an appropriate pseudonym
   for that host.
</t>
<t>
   For organizations that have strong privacy requirements for hiding
   internal structures, a proxy &MAY; combine an ordered subsequence of
   Via header field entries with identical received-protocol values into
   a single such entry. For example,
</t>
<figure><artwork type="example">
  Via: 1.0 ricky, 1.1 ethel, 1.1 fred, 1.0 lucy
</artwork></figure>
<t>
        could be collapsed to
</t>
<figure><artwork type="example">
  Via: 1.0 ricky, 1.1 mertz, 1.0 lucy
</artwork></figure>
<t>
   Applications &SHOULD-NOT;  combine multiple entries unless they are all
   under the same organizational control and the hosts have already been
   replaced by pseudonyms. Applications &MUST-NOT; combine entries which
   have different received-protocol values.
</t>
</section>

</section>

<section title="IANA Considerations" anchor="IANA.considerations">

<section title="Message Header Registration" anchor="message.header.registration">
<t>
   The Message Header Registry located at <eref target="http://www.iana.org/assignments/message-headers/message-header-index.html"/> should be updated
   with the permanent registrations below (see <xref target="RFC3864"/>):
</t>
<?BEGININC p1-messaging.iana-headers ?>
<!--AUTOGENERATED FROM extract-header-defs.xslt, do not edit manually-->
<texttable align="left" suppress-title="true" anchor="iana.header.registration.table">
   <ttcol>Header Field Name</ttcol>
   <ttcol>Protocol</ttcol>
   <ttcol>Status</ttcol>
   <ttcol>Reference</ttcol>

   <c>Connection</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.connection"/>
   </c>
   <c>Content-Length</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.content-length"/>
   </c>
   <c>Date</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.date"/>
   </c>
   <c>Host</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.host"/>
   </c>
   <c>TE</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.te"/>
   </c>
   <c>Trailer</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.trailer"/>
   </c>
   <c>Transfer-Encoding</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.transfer-encoding"/>
   </c>
   <c>Upgrade</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.upgrade"/>
   </c>
   <c>Via</c>
   <c>http</c>
   <c>standard</c>
   <c>
      <xref target="header.via"/>
   </c>
</texttable>
<!--(END)-->
<?ENDINC p1-messaging.iana-headers ?>
<t>
   The change controller is: "IETF (iesg@ietf.org) - Internet Engineering Task Force".
</t>
</section>

<section title="URI Scheme Registration" anchor="uri.scheme.registration">
<t>
   The entries for the "http" and "https" URI Schemes in the registry located at
   <eref target="http://www.iana.org/assignments/uri-schemes.html"/>
   should be updated to point to Sections <xref target="http.uri" format="counter"/>
   and <xref target="https.uri" format="counter"/> of this document
   (see <xref target="RFC4395"/>).
</t>
</section>

<section title="Internet Media Type Registrations" anchor="internet.media.type.http">
<t>
   This document serves as the specification for the Internet media types
   "message/http" and "application/http". The following is to be registered with
   IANA (see <xref target="RFC4288"/>).
</t>
<section title="Internet Media Type message/http" anchor="internet.media.type.message.http">
<iref item="Media Type" subitem="message/http" primary="true"/>
<iref item="message/http Media Type" primary="true"/>
<t>
   The message/http type can be used to enclose a single HTTP request or
   response message, provided that it obeys the MIME restrictions for all
   "message" types regarding line length and encodings.
</t>
<t>
  <list style="hanging" x:indent="12em">
    <t hangText="Type name:">
      message
    </t>
    <t hangText="Subtype name:">
      http
    </t>
    <t hangText="Required parameters:">
      none
    </t>
    <t hangText="Optional parameters:">
      version, msgtype
      <list style="hanging">
        <t hangText="version:">
          The HTTP-Version number of the enclosed message
          (e.g., "1.1"). If not present, the version can be
          determined from the first line of the body.
        </t>
        <t hangText="msgtype:">
          The message type -- "request" or "response". If not
          present, the type can be determined from the first
          line of the body.
        </t>
      </list>
    </t>
    <t hangText="Encoding considerations:">
      only "7bit", "8bit", or "binary" are permitted
    </t>
    <t hangText="Security considerations:">
      none
    </t>
    <t hangText="Interoperability considerations:">
      none
    </t>
    <t hangText="Published specification:">
      This specification (see <xref target="internet.media.type.message.http"/>).
    </t>
    <t hangText="Applications that use this media type:">
    </t>
    <t hangText="Additional information:">
      <list style="hanging">
        <t hangText="Magic number(s):">none</t>
        <t hangText="File extension(s):">none</t>
        <t hangText="Macintosh file type code(s):">none</t>
      </list>
    </t>
    <t hangText="Person and email address to contact for further information:">
      See Authors Section.
    </t>
    <t hangText="Intended usage:">
      COMMON
    </t>
    <t hangText="Restrictions on usage:">
      none
    </t>
    <t hangText="Author/Change controller:">
      IESG
    </t>
  </list>
</t>
</section>
<section title="Internet Media Type application/http" anchor="internet.media.type.application.http">
<iref item="Media Type" subitem="application/http" primary="true"/>
<iref item="application/http Media Type" primary="true"/>
<t>
   The application/http type can be used to enclose a pipeline of one or more
   HTTP request or response messages (not intermixed).
</t>
<t>
  <list style="hanging" x:indent="12em">
    <t hangText="Type name:">
      application
    </t>
    <t hangText="Subtype name:">
      http
    </t>
    <t hangText="Required parameters:">
      none
    </t>
    <t hangText="Optional parameters:">
      version, msgtype
      <list style="hanging">
        <t hangText="version:">
          The HTTP-Version number of the enclosed messages
          (e.g., "1.1"). If not present, the version can be
          determined from the first line of the body.
        </t>
        <t hangText="msgtype:">
          The message type -- "request" or "response". If not
          present, the type can be determined from the first
          line of the body.
        </t>
      </list>
    </t>
    <t hangText="Encoding considerations:">
      HTTP messages enclosed by this type
      are in "binary" format; use of an appropriate
      Content-Transfer-Encoding is required when
      transmitted via E-mail.
    </t>
    <t hangText="Security considerations:">
      none
    </t>
    <t hangText="Interoperability considerations:">
      none
    </t>
    <t hangText="Published specification:">
      This specification (see <xref target="internet.media.type.application.http"/>).
    </t>
    <t hangText="Applications that use this media type:">
    </t>
    <t hangText="Additional information:">
      <list style="hanging">
        <t hangText="Magic number(s):">none</t>
        <t hangText="File extension(s):">none</t>
        <t hangText="Macintosh file type code(s):">none</t>
      </list>
    </t>
    <t hangText="Person and email address to contact for further information:">
      See Authors Section.
    </t>
    <t hangText="Intended usage:">
      COMMON
    </t>
    <t hangText="Restrictions on usage:">
      none
    </t>
    <t hangText="Author/Change controller:">
      IESG
    </t>
  </list>
</t>
</section>
</section>

<section title="Transfer Coding Registry" anchor="transfer.coding.registration">
<t>
   The registration procedure for HTTP Transfer Codings is now defined by
   <xref target="transfer.coding.registry"/> of this document.
</t>
<t>
   The HTTP Transfer Codings Registry located at <eref target="http://www.iana.org/assignments/http-parameters"/>
   should be updated with the registrations below:
</t>
<texttable align="left" suppress-title="true" anchor="iana.transfer.coding.registration.table">
   <ttcol>Name</ttcol>
   <ttcol>Description</ttcol>
   <ttcol>Reference</ttcol>
   <c>chunked</c>
   <c>Transfer in a series of chunks</c>
   <c>
      <xref target="chunked.encoding"/>
   </c>
   <c>compress</c>
   <c>UNIX "compress" program method</c>
   <c>
      <xref target="compress.coding"/>
   </c>
   <c>deflate</c>
   <c>"zlib" format <xref target="RFC1950"/> with "deflate" compression</c>
   <c>
      <xref target="deflate.coding"/>
   </c>
   <c>gzip</c>
   <c>Same as GNU zip <xref target="RFC1952"/></c>
   <c>
      <xref target="gzip.coding"/>
   </c>
</texttable>
</section>

<section title="Upgrade Token Registration" anchor="upgrade.token.registration">
<t>
   The registration procedure for HTTP Upgrade Tokens -- previously defined
   in <xref target="RFC2817" x:fmt="of" x:sec="7.2"/> -- is now defined
   by <xref target="upgrade.token.registry"/> of this document.
</t>
<t>
   The HTTP Status Code Registry located at <eref target="http://www.iana.org/assignments/http-upgrade-tokens/"/>
   should be updated with the registration below:
</t>
<texttable align="left" suppress-title="true">
   <ttcol>Value</ttcol>
   <ttcol>Description</ttcol>
   <ttcol>Reference</ttcol>

   <c>HTTP</c>
   <c>Hypertext Transfer Protocol</c> 
   <c><xref target="http.version"/> of this specification</c>
<!-- IANA should add this without our instructions; emailed on June 05, 2009
   <c>TLS/1.0</c>
   <c>Transport Layer Security</c> 
   <c><xref target="RFC2817"/></c> -->

</texttable>
</section>

</section>

<section title="Security Considerations" anchor="security.considerations">
<t>
   This section is meant to inform application developers, information
   providers, and users of the security limitations in HTTP/1.1 as
   described by this document. The discussion does not include
   definitive solutions to the problems revealed, though it does make
   some suggestions for reducing security risks.
</t>

<section title="Personal Information" anchor="personal.information">
<t>
   HTTP clients are often privy to large amounts of personal information
   (e.g. the user's name, location, mail address, passwords, encryption
   keys, etc.), and &SHOULD; be very careful to prevent unintentional
   leakage of this information.
   We very strongly recommend that a convenient interface be provided
   for the user to control dissemination of such information, and that
   designers and implementors be particularly careful in this area.
   History shows that errors in this area often create serious security
   and/or privacy problems and generate highly adverse publicity for the
   implementor's company.
</t>
</section>

<section title="Abuse of Server Log Information" anchor="abuse.of.server.log.information">
<t>
   A server is in the position to save personal data about a user's
   requests which might identify their reading patterns or subjects of
   interest. This information is clearly confidential in nature and its
   handling can be constrained by law in certain countries. People using
   HTTP to provide data are responsible for ensuring that
   such material is not distributed without the permission of any
   individuals that are identifiable by the published results.
</t>
</section>

<section title="Attacks Based On File and Path Names" anchor="attack.pathname">
<t>
   Implementations of HTTP origin servers &SHOULD; be careful to restrict
   the documents returned by HTTP requests to be only those that were
   intended by the server administrators. If an HTTP server translates
   HTTP URIs directly into file system calls, the server &MUST; take
   special care not to serve files that were not intended to be
   delivered to HTTP clients. For example, UNIX, Microsoft Windows, and
   other operating systems use ".." as a path component to indicate a
   directory level above the current one. On such a system, an HTTP
   server &MUST; disallow any such construct in the request-target if it
   would otherwise allow access to a resource outside those intended to
   be accessible via the HTTP server. Similarly, files intended for
   reference only internally to the server (such as access control
   files, configuration files, and script code) &MUST; be protected from
   inappropriate retrieval, since they might contain sensitive
   information. Experience has shown that minor bugs in such HTTP server
   implementations have turned into security risks.
</t>
</section>

<section title="DNS Spoofing" anchor="dns.spoofing">
<t>
   Clients using HTTP rely heavily on the Domain Name Service, and are
   thus generally prone to security attacks based on the deliberate
   mis-association of IP addresses and DNS names. Clients need to be
   cautious in assuming the continuing validity of an IP number/DNS name
   association.
</t>
<t>
   In particular, HTTP clients &SHOULD; rely on their name resolver for
   confirmation of an IP number/DNS name association, rather than
   caching the result of previous host name lookups. Many platforms
   already can cache host name lookups locally when appropriate, and
   they &SHOULD; be configured to do so. It is proper for these lookups to
   be cached, however, only when the TTL (Time To Live) information
   reported by the name server makes it likely that the cached
   information will remain useful.
</t>
<t>
   If HTTP clients cache the results of host name lookups in order to
   achieve a performance improvement, they &MUST; observe the TTL
   information reported by DNS.
</t>
<t>
   If HTTP clients do not observe this rule, they could be spoofed when
   a previously-accessed server's IP address changes. As network
   renumbering is expected to become increasingly common <xref target="RFC1900"/>, the
   possibility of this form of attack will grow. Observing this
   requirement thus reduces this potential security vulnerability.
</t>
<t>
   This requirement also improves the load-balancing behavior of clients
   for replicated servers using the same DNS name and reduces the
   likelihood of a user's experiencing failure in accessing sites which
   use that strategy.
</t>
</section>

<section title="Proxies and Caching" anchor="attack.proxies">
<t>
   By their very nature, HTTP proxies are men-in-the-middle, and
   represent an opportunity for man-in-the-middle attacks. Compromise of
   the systems on which the proxies run can result in serious security
   and privacy problems. Proxies have access to security-related
   information, personal information about individual users and
   organizations, and proprietary information belonging to users and
   content providers. A compromised proxy, or a proxy implemented or
   configured without regard to security and privacy considerations,
   might be used in the commission of a wide range of potential attacks.
</t>
<t>
   Proxy operators should protect the systems on which proxies run as
   they would protect any system that contains or transports sensitive
   information. In particular, log information gathered at proxies often
   contains highly sensitive personal information, and/or information
   about organizations. Log information should be carefully guarded, and
   appropriate guidelines for use developed and followed. (<xref target="abuse.of.server.log.information"/>).
</t>
<t>
   Proxy implementors should consider the privacy and security
   implications of their design and coding decisions, and of the
   configuration options they provide to proxy operators (especially the
   default configuration).
</t>
<t>
   Users of a proxy need to be aware that they are no trustworthier than
   the people who run the proxy; HTTP itself cannot solve this problem.
</t>
<t>
   The judicious use of cryptography, when appropriate, may suffice to
   protect against a broad range of security and privacy attacks. Such
   cryptography is beyond the scope of the HTTP/1.1 specification.
</t>
</section>

<section title="Denial of Service Attacks on Proxies" anchor="attack.DoS">
<t>
   They exist. They are hard to defend against. Research continues.
   Beware.
</t>
</section>
</section>

<section title="Acknowledgments" anchor="ack">
<t>
   HTTP has evolved considerably over the years. It has
   benefited from a large and active developer community--the many
   people who have participated on the www-talk mailing list--and it is
   that community which has been most responsible for the success of
   HTTP and of the World-Wide Web in general. Marc Andreessen, Robert
   Cailliau, Daniel W. Connolly, Bob Denny, John Franks, Jean-Francois
   Groff, Phillip M. Hallam-Baker, Hakon W. Lie, Ari Luotonen, Rob
   McCool, Lou Montulli, Dave Raggett, Tony Sanders, and Marc
   VanHeyningen deserve special recognition for their efforts in
   defining early aspects of the protocol.
</t>
<t>
   This document has benefited greatly from the comments of all those
   participating in the HTTP-WG. In addition to those already mentioned,
   the following individuals have contributed to this specification:
</t>
<t>
   Gary Adams, Harald Tveit Alvestrand, Keith Ball, Brian Behlendorf,
   Paul Burchard, Maurizio Codogno, Mike Cowlishaw, Roman Czyborra,
   Michael A. Dolan, Daniel DuBois, David J. Fiander, Alan Freier, Marc Hedlund, Greg Herlihy,
   Koen Holtman, Alex Hopmann, Bob Jernigan, Shel Kaphan, Rohit Khare,
   John Klensin, Martijn Koster, Alexei Kosut, David M. Kristol,
   Daniel LaLiberte, Ben Laurie, Paul J. Leach, Albert Lunde,
   John C. Mallery, Jean-Philippe Martin-Flatin, Mitra, David Morris,
   Gavin Nicol, Ross Patterson, Bill Perry, Jeffrey Perry, Scott Powers, Owen Rees,
   Luigi Rizzo, David Robinson, Marc Salomon, Rich Salz,
   Allan M. Schiffman, Jim Seidman, Chuck Shotton, Eric W. Sink,
   Simon E. Spero, Richard N. Taylor, Robert S. Thau,
   Bill (BearHeart) Weinman, Francois Yergeau, Mary Ellen Zurko,
   Josh Cohen.
</t>
<t>
   Thanks to the "cave men" of Palo Alto. You know who you are.
</t>
<t>
   Jim Gettys (the editor of <xref target="RFC2616"/>) wishes particularly
   to thank Roy Fielding, the editor of <xref target="RFC2068"/>, along
   with John Klensin, Jeff Mogul, Paul Leach, Dave Kristol, Koen
   Holtman, John Franks, Josh Cohen, Alex Hopmann, Scott Lawrence, and
   Larry Masinter for their help. And thanks go particularly to Jeff
   Mogul and Scott Lawrence for performing the "MUST/MAY/SHOULD" audit.
</t>
<t>
   The Apache Group, Anselm Baird-Smith, author of Jigsaw, and Henrik
   Frystyk implemented RFC 2068 early, and we wish to thank them for the
   discovery of many of the problems that this document attempts to
   rectify.
</t>
<t>
   This specification makes heavy use of the augmented BNF and generic
   constructs defined by David H. Crocker for <xref target="RFC5234"/>. Similarly, it
   reuses many of the definitions provided by Nathaniel Borenstein and
   Ned Freed for MIME <xref target="RFC2045"/>. We hope that their inclusion in this
   specification will help reduce past confusion over the relationship
   between HTTP and Internet mail message formats.
</t>
</section>

</middle>
<back>

<references title="Normative References">

<reference anchor="ISO-8859-1">
  <front>
    <title>
     Information technology -- 8-bit single-byte coded graphic character sets -- Part 1: Latin alphabet No. 1
    </title>
    <author>
      <organization>International Organization for Standardization</organization>
    </author>
    <date year="1998"/>
  </front>
  <seriesInfo name="ISO/IEC" value="8859-1:1998"/>
</reference>

<reference anchor="Part2">
  <front>
    <title abbrev="HTTP/1.1">HTTP/1.1, part 2: Message Semantics</title>
    <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
      <organization abbrev="Day Software">Day Software</organization>
      <address><email>fielding@gbiv.com</email></address>
    </author>
    <author initials="J." surname="Gettys" fullname="Jim Gettys">
      <organization>One Laptop per Child</organization>
      <address><email>jg@laptop.org</email></address>
    </author>
    <author initials="J." surname="Mogul" fullname="Jeffrey C. Mogul">
      <organization abbrev="HP">Hewlett-Packard Company</organization>
      <address><email>JeffMogul@acm.org</email></address>
    </author>
    <author initials="H." surname="Frystyk" fullname="Henrik Frystyk Nielsen">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>henrikn@microsoft.com</email></address>
    </author>
    <author initials="L." surname="Masinter" fullname="Larry Masinter">
      <organization abbrev="Adobe Systems">Adobe Systems, Incorporated</organization>
      <address><email>LMM@acm.org</email></address>
    </author>
    <author initials="P." surname="Leach" fullname="Paul J. Leach">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>paulle@microsoft.com</email></address>
    </author>
    <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
      <organization abbrev="W3C/MIT">World Wide Web Consortium</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <author initials="Y." surname="Lafon" fullname="Yves Lafon" role="editor">
      <organization abbrev="W3C">World Wide Web Consortium</organization>
      <address><email>ylafon@w3.org</email></address>
    </author>
    <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
      <organization abbrev="greenbytes">greenbytes GmbH</organization>
      <address><email>julian.reschke@greenbytes.de</email></address>
    </author>
    <date month="&ID-MONTH;" year="&ID-YEAR;"/>
  </front>
  <seriesInfo name="Internet-Draft" value="draft-ietf-httpbis-p2-semantics-&ID-VERSION;"/>
  <x:source href="p2-semantics.xml" basename="p2-semantics"/>
</reference>

<reference anchor="Part3">
  <front>
    <title abbrev="HTTP/1.1">HTTP/1.1, part 3: Message Payload and Content Negotiation</title>
    <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
      <organization abbrev="Day Software">Day Software</organization>
      <address><email>fielding@gbiv.com</email></address>
    </author>
    <author initials="J." surname="Gettys" fullname="Jim Gettys">
      <organization>One Laptop per Child</organization>
      <address><email>jg@laptop.org</email></address>
    </author>
    <author initials="J." surname="Mogul" fullname="Jeffrey C. Mogul">
      <organization abbrev="HP">Hewlett-Packard Company</organization>
      <address><email>JeffMogul@acm.org</email></address>
    </author>
    <author initials="H." surname="Frystyk" fullname="Henrik Frystyk Nielsen">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>henrikn@microsoft.com</email></address>
    </author>
    <author initials="L." surname="Masinter" fullname="Larry Masinter">
      <organization abbrev="Adobe Systems">Adobe Systems, Incorporated</organization>
      <address><email>LMM@acm.org</email></address>
    </author>
    <author initials="P." surname="Leach" fullname="Paul J. Leach">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>paulle@microsoft.com</email></address>
    </author>
    <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
      <organization abbrev="W3C/MIT">World Wide Web Consortium</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <author initials="Y." surname="Lafon" fullname="Yves Lafon" role="editor">
      <organization abbrev="W3C">World Wide Web Consortium</organization>
      <address><email>ylafon@w3.org</email></address>
    </author>
    <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
      <organization abbrev="greenbytes">greenbytes GmbH</organization>
      <address><email>julian.reschke@greenbytes.de</email></address>
    </author>
    <date month="&ID-MONTH;" year="&ID-YEAR;"/>
  </front>
  <seriesInfo name="Internet-Draft" value="draft-ietf-httpbis-p3-payload-&ID-VERSION;"/>
  <x:source href="p3-payload.xml" basename="p3-payload"/>
</reference>

<reference anchor="Part5">
  <front>
    <title abbrev="HTTP/1.1">HTTP/1.1, part 5: Range Requests and Partial Responses</title>
    <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
      <organization abbrev="Day Software">Day Software</organization>
      <address><email>fielding@gbiv.com</email></address>
    </author>
    <author initials="J." surname="Gettys" fullname="Jim Gettys">
      <organization>One Laptop per Child</organization>
      <address><email>jg@laptop.org</email></address>
    </author>
    <author initials="J." surname="Mogul" fullname="Jeffrey C. Mogul">
      <organization abbrev="HP">Hewlett-Packard Company</organization>
      <address><email>JeffMogul@acm.org</email></address>
    </author>
    <author initials="H." surname="Frystyk" fullname="Henrik Frystyk Nielsen">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>henrikn@microsoft.com</email></address>
    </author>
    <author initials="L." surname="Masinter" fullname="Larry Masinter">
      <organization abbrev="Adobe Systems">Adobe Systems, Incorporated</organization>
      <address><email>LMM@acm.org</email></address>
    </author>
    <author initials="P." surname="Leach" fullname="Paul J. Leach">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>paulle@microsoft.com</email></address>
    </author>
    <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
      <organization abbrev="W3C/MIT">World Wide Web Consortium</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <author initials="Y." surname="Lafon" fullname="Yves Lafon" role="editor">
      <organization abbrev="W3C">World Wide Web Consortium</organization>
      <address><email>ylafon@w3.org</email></address>
    </author>
    <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
      <organization abbrev="greenbytes">greenbytes GmbH</organization>
      <address><email>julian.reschke@greenbytes.de</email></address>
    </author>
    <date month="&ID-MONTH;" year="&ID-YEAR;"/>
  </front>
  <seriesInfo name="Internet-Draft" value="draft-ietf-httpbis-p5-range-&ID-VERSION;"/>
  <x:source href="p5-range.xml" basename="p5-range"/>
</reference>

<reference anchor="Part6">
  <front>
    <title abbrev="HTTP/1.1">HTTP/1.1, part 6: Caching</title>
    <author initials="R." surname="Fielding" fullname="Roy T. Fielding" role="editor">
      <organization abbrev="Day Software">Day Software</organization>
      <address><email>fielding@gbiv.com</email></address>
    </author>
    <author initials="J." surname="Gettys" fullname="Jim Gettys">
      <organization>One Laptop per Child</organization>
      <address><email>jg@laptop.org</email></address>
    </author>
    <author initials="J." surname="Mogul" fullname="Jeffrey C. Mogul">
      <organization abbrev="HP">Hewlett-Packard Company</organization>
      <address><email>JeffMogul@acm.org</email></address>
    </author>
    <author initials="H." surname="Frystyk" fullname="Henrik Frystyk Nielsen">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>henrikn@microsoft.com</email></address>
    </author>
    <author initials="L." surname="Masinter" fullname="Larry Masinter">
      <organization abbrev="Adobe Systems">Adobe Systems, Incorporated</organization>
      <address><email>LMM@acm.org</email></address>
    </author>
    <author initials="P." surname="Leach" fullname="Paul J. Leach">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>
      <address><email>paulle@microsoft.com</email></address>
    </author>
    <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
      <organization abbrev="W3C/MIT">World Wide Web Consortium</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <author initials="Y." surname="Lafon" fullname="Yves Lafon" role="editor">
      <organization abbrev="W3C">World Wide Web Consortium</organization>
      <address><email>ylafon@w3.org</email></address>
    </author>
    <author initials="M." surname="Nottingham" fullname="Mark Nottingham" role="editor">
      <address><email>mnot@mnot.net</email></address>
    </author>
    <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
      <organization abbrev="greenbytes">greenbytes GmbH</organization>
      <address><email>julian.reschke@greenbytes.de</email></address>
    </author>
    <date month="&ID-MONTH;" year="&ID-YEAR;"/>
  </front>
  <seriesInfo name="Internet-Draft" value="draft-ietf-httpbis-p6-cache-&ID-VERSION;"/>
  <x:source href="p6-cache.xml" basename="p6-cache"/>
</reference>

<reference anchor="RFC5234">
  <front>
    <title abbrev="ABNF for Syntax Specifications">Augmented BNF for Syntax Specifications: ABNF</title>
    <author initials="D." surname="Crocker" fullname="Dave Crocker" role="editor">
      <organization>Brandenburg InternetWorking</organization>
      <address>
        <email>dcrocker@bbiw.net</email>
      </address>  
    </author>
    <author initials="P." surname="Overell" fullname="Paul Overell">
      <organization>THUS plc.</organization>
      <address>
        <email>paul.overell@thus.net</email>
      </address>
    </author>
    <date month="January" year="2008"/>
  </front>
  <seriesInfo name="STD" value="68"/>
  <seriesInfo name="RFC" value="5234"/>
</reference>

<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author initials="S." surname="Bradner" fullname="Scott Bradner">
      <organization>Harvard University</organization>
      <address><email>sob@harvard.edu</email></address>
    </author>
    <date month="March" year="1997"/>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
</reference>

<reference anchor="RFC3986">
 <front>
  <title abbrev='URI Generic Syntax'>Uniform Resource Identifier (URI): Generic Syntax</title>
  <author initials='T.' surname='Berners-Lee' fullname='Tim Berners-Lee'>
    <organization abbrev="W3C/MIT">World Wide Web Consortium</organization>
    <address>
       <email>timbl@w3.org</email>
       <uri>http://www.w3.org/People/Berners-Lee/</uri>
    </address>
  </author>
  <author initials='R.' surname='Fielding' fullname='Roy T. Fielding'>
    <organization abbrev="Day Software">Day Software</organization>
    <address>
      <email>fielding@gbiv.com</email>
      <uri>http://roy.gbiv.com/</uri>
    </address>
  </author>
  <author initials='L.' surname='Masinter' fullname='Larry Masinter'>
    <organization abbrev="Adobe Systems">Adobe Systems Incorporated</organization>
    <address>
      <email>LMM@acm.org</email>
      <uri>http://larry.masinter.net/</uri>
    </address>
  </author>
  <date month='January' year='2005'></date>
 </front>
 <seriesInfo name="RFC" value="3986"/>
 <seriesInfo name="STD" value="66"/>
</reference>

<reference anchor="USASCII">
  <front>
    <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange</title>
    <author>
      <organization>American National Standards Institute</organization>
    </author>
    <date year="1986"/>
  </front>
  <seriesInfo name="ANSI" value="X3.4"/>
</reference>

<reference anchor="RFC1950">
  <front>
    <title>ZLIB Compressed Data Format Specification version 3.3</title>
    <author initials="L.P." surname="Deutsch" fullname="L. Peter Deutsch">
      <organization>Aladdin Enterprises</organization>
      <address><email>ghost@aladdin.com</email></address>
    </author>
    <author initials="J-L." surname="Gailly" fullname="Jean-Loup Gailly"/>
    <date month="May" year="1996"/>
  </front>
  <seriesInfo name="RFC" value="1950"/>
  <annotation>
    RFC 1950 is an Informational RFC, thus it may be less stable than
    this specification. On the other hand, this downward reference was 
    present since the publication of RFC 2068 in 1997 (<xref target="RFC2068"/>),
    therefore it is unlikely to cause problems in practice. See also
    <xref target="BCP97"/>.
  </annotation>
</reference>

<reference anchor="RFC1951">
  <front>
    <title>DEFLATE Compressed Data Format Specification version 1.3</title>
    <author initials="P." surname="Deutsch" fullname="L. Peter Deutsch">
      <organization>Aladdin Enterprises</organization>
      <address><email>ghost@aladdin.com</email></address>
    </author>
    <date month="May" year="1996"/>
  </front>
  <seriesInfo name="RFC" value="1951"/>
  <annotation>
    RFC 1951 is an Informational RFC, thus it may be less stable than
    this specification. On the other hand, this downward reference was 
    present since the publication of RFC 2068 in 1997 (<xref target="RFC2068"/>),
    therefore it is unlikely to cause problems in practice. See also
    <xref target="BCP97"/>.
  </annotation>
</reference>

<reference anchor="RFC1952">
  <front>
    <title>GZIP file format specification version 4.3</title>
    <author initials="P." surname="Deutsch" fullname="L. Peter Deutsch">
      <organization>Aladdin Enterprises</organization>
      <address><email>ghost@aladdin.com</email></address>
    </author>
    <author initials="J-L." surname="Gailly" fullname="Jean-Loup Gailly">
      <address><email>gzip@prep.ai.mit.edu</email></address>
    </author>
    <author initials="M." surname="Adler" fullname="Mark Adler">
      <address><email>madler@alumni.caltech.edu</email></address>
    </author>
    <author initials="L.P." surname="Deutsch" fullname="L. Peter Deutsch">
      <address><email>ghost@aladdin.com</email></address>
    </author>
    <author initials="G." surname="Randers-Pehrson" fullname="Glenn Randers-Pehrson">
      <address><email>randeg@alumni.rpi.edu</email></address>
    </author>
    <date month="May" year="1996"/>
  </front>
  <seriesInfo name="RFC" value="1952"/>
  <annotation>
    RFC 1952 is an Informational RFC, thus it may be less stable than
    this specification. On the other hand, this downward reference was 
    present since the publication of RFC 2068 in 1997 (<xref target="RFC2068"/>),
    therefore it is unlikely to cause problems in practice. See also
    <xref target="BCP97"/>.
  </annotation>
</reference>

</references>

<references title="Informative References">

<reference anchor="Nie1997" target="http://doi.acm.org/10.1145/263105.263157">
  <front>
    <title>Network Performance Effects of HTTP/1.1, CSS1, and PNG</title>
    <author initials="H.F.." surname="Nielsen" fullname="H.F. Nielsen"/>
    <author initials="J." surname="Gettys" fullname="J. Gettys"/>
    <author initials="E." surname="Prud'hommeaux" fullname="E. Prud'hommeaux"/>
    <author initials="H." surname="Lie" fullname="H. Lie"/>
    <author initials="C." surname="Lilley" fullname="C. Lilley"/>
    <date year="1997" month="September"/>
  </front>
  <seriesInfo name="ACM" value="Proceedings of the ACM SIGCOMM '97 conference on Applications, technologies, architectures, and protocols for computer communication SIGCOMM '97"/>
</reference>

<reference anchor="Pad1995" target="http://portal.acm.org/citation.cfm?id=219094">
  <front>
    <title>Improving HTTP Latency</title>
    <author initials="V.N." surname="Padmanabhan" fullname="Venkata N. Padmanabhan"/>
    <author initials="J.C." surname="Mogul" fullname="Jeffrey C. Mogul"/>
    <date year="1995" month="December"/>
  </front>
  <seriesInfo name="Computer Networks and ISDN Systems" value="v. 28, pp. 25-35"/>
</reference>

<reference anchor="RFC1123">
  <front>
    <title>Requirements for Internet Hosts - Application and Support</title>
    <author initials="R." surname="Braden" fullname="Robert Braden">
      <organization>University of Southern California (USC), Information Sciences Institute</organization>
      <address><email>Braden@ISI.EDU</email></address>
    </author>
    <date month="October" year="1989"/>
  </front>
  <seriesInfo name="STD" value="3"/>
  <seriesInfo name="RFC" value="1123"/>
</reference>

<reference anchor="RFC1305">
  <front>
    <title>Network Time Protocol (Version 3) Specification, Implementation</title>
    <author initials="D." surname="Mills" fullname="David L. Mills">
      <organization>University of Delaware, Electrical Engineering Department</organization>
      <address><email>mills@udel.edu</email></address>
    </author>
    <date month="March" year="1992"/>
  </front>
  <seriesInfo name="RFC" value="1305"/>
</reference>

<reference anchor="RFC1900">
  <front>
    <title>Renumbering Needs Work</title>
    <author initials="B." surname="Carpenter" fullname="Brian E. Carpenter">
      <organization>CERN, Computing and Networks Division</organization>
      <address><email>brian@dxcoms.cern.ch</email></address>
    </author>
    <author initials="Y." surname="Rekhter" fullname="Yakov Rekhter">
      <organization>cisco Systems</organization>
      <address><email>yakov@cisco.com</email></address>
    </author>
    <date month="February" year="1996"/>
  </front>
  <seriesInfo name="RFC" value="1900"/>
</reference>

<reference anchor="RFC1945">
  <front>
    <title abbrev="HTTP/1.0">Hypertext Transfer Protocol -- HTTP/1.0</title>
    <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
      <organization>MIT, Laboratory for Computer Science</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <author initials="R.T." surname="Fielding" fullname="Roy T. Fielding">
      <organization>University of California, Irvine, Department of Information and Computer Science</organization>
      <address><email>fielding@ics.uci.edu</email></address>
    </author>
    <author initials="H.F." surname="Nielsen" fullname="Henrik Frystyk Nielsen">
      <organization>W3 Consortium, MIT Laboratory for Computer Science</organization>
      <address><email>frystyk@w3.org</email></address>
    </author>
    <date month="May" year="1996"/>
  </front>
  <seriesInfo name="RFC" value="1945"/>
</reference>

<reference anchor="RFC2045">
  <front>
    <title abbrev="Internet Message Bodies">Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</title>
    <author initials="N." surname="Freed" fullname="Ned Freed">
      <organization>Innosoft International, Inc.</organization>
      <address><email>ned@innosoft.com</email></address>
    </author>
    <author initials="N.S." surname="Borenstein" fullname="Nathaniel S. Borenstein">
      <organization>First Virtual Holdings</organization>
      <address><email>nsb@nsb.fv.com</email></address>
    </author>
    <date month="November" year="1996"/>
  </front>
  <seriesInfo name="RFC" value="2045"/>
</reference>

<reference anchor="RFC2047">
  <front>
    <title abbrev="Message Header Extensions">MIME (Multipurpose Internet Mail Extensions) Part Three: Message Header Extensions for Non-ASCII Text</title>
    <author initials="K." surname="Moore" fullname="Keith Moore">
      <organization>University of Tennessee</organization>
      <address><email>moore@cs.utk.edu</email></address>
    </author>
    <date month="November" year="1996"/>
  </front>
  <seriesInfo name="RFC" value="2047"/>
</reference>

<reference anchor="RFC2068">
  <front>
    <title abbrev="HTTP/1.1">Hypertext Transfer Protocol -- HTTP/1.1</title>
    <author initials="R." surname="Fielding" fullname="Roy T. Fielding">
      <organization>University of California, Irvine, Department of Information and Computer Science</organization>
      <address><email>fielding@ics.uci.edu</email></address>
    </author>
    <author initials="J." surname="Gettys" fullname="Jim Gettys">
      <organization>MIT Laboratory for Computer Science</organization>
      <address><email>jg@w3.org</email></address>
    </author>
    <author initials="J." surname="Mogul" fullname="Jeffrey C. Mogul">
      <organization>Digital Equipment Corporation, Western Research Laboratory</organization>
      <address><email>mogul@wrl.dec.com</email></address>
    </author>
    <author initials="H." surname="Nielsen" fullname="Henrik Frystyk Nielsen">
      <organization>MIT Laboratory for Computer Science</organization>
      <address><email>frystyk@w3.org</email></address>
    </author>
    <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
      <organization>MIT Laboratory for Computer Science</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <date month="January" year="1997"/>
  </front>
  <seriesInfo name="RFC" value="2068"/>
</reference>

<reference anchor='RFC2109'>
  <front>
    <title>HTTP State Management Mechanism</title>
    <author initials='D.M.' surname='Kristol' fullname='David M. Kristol'>
      <organization>Bell Laboratories, Lucent Technologies</organization>
      <address><email>dmk@bell-labs.com</email></address>
    </author>
    <author initials='L.' surname='Montulli' fullname='Lou Montulli'>
      <organization>Netscape Communications Corp.</organization>
      <address><email>montulli@netscape.com</email></address>
    </author>
    <date year='1997' month='February' />
  </front>
  <seriesInfo name='RFC' value='2109' />
</reference>

<reference anchor="RFC2145">
  <front>
    <title abbrev="HTTP Version Numbers">Use and Interpretation of HTTP Version Numbers</title>
    <author initials="J.C." surname="Mogul" fullname="Jeffrey C. Mogul">
      <organization>Western Research Laboratory</organization>
      <address><email>mogul@wrl.dec.com</email></address>
    </author>
    <author initials="R.T." surname="Fielding" fullname="Roy T. Fielding">
      <organization>Department of Information and Computer Science</organization>
      <address><email>fielding@ics.uci.edu</email></address>
    </author>
    <author initials="J." surname="Gettys" fullname="Jim Gettys">
      <organization>MIT Laboratory for Computer Science</organization>
      <address><email>jg@w3.org</email></address>
    </author>
    <author initials="H.F." surname="Nielsen" fullname="Henrik Frystyk Nielsen">
      <organization>W3 Consortium</organization>
      <address><email>frystyk@w3.org</email></address>
    </author>
    <date month="May" year="1997"/>
  </front>
  <seriesInfo name="RFC" value="2145"/>
</reference>

<reference anchor="RFC2616">
  <front>
    <title>Hypertext Transfer Protocol -- HTTP/1.1</title>
    <author initials="R." surname="Fielding" fullname="R. Fielding">
      <organization>University of California, Irvine</organization>
      <address><email>fielding@ics.uci.edu</email></address>
    </author>
    <author initials="J." surname="Gettys" fullname="J. Gettys">
      <organization>W3C</organization>
      <address><email>jg@w3.org</email></address>
    </author>
    <author initials="J." surname="Mogul" fullname="J. Mogul">
      <organization>Compaq Computer Corporation</organization>
      <address><email>mogul@wrl.dec.com</email></address>
    </author>
    <author initials="H." surname="Frystyk" fullname="H. Frystyk">
      <organization>MIT Laboratory for Computer Science</organization>
      <address><email>frystyk@w3.org</email></address>
    </author>
    <author initials="L." surname="Masinter" fullname="L. Masinter">
      <organization>Xerox Corporation</organization>
      <address><email>masinter@parc.xerox.com</email></address>
    </author>
    <author initials="P." surname="Leach" fullname="P. Leach">
      <organization>Microsoft Corporation</organization>
      <address><email>paulle@microsoft.com</email></address>
    </author>
    <author initials="T." surname="Berners-Lee" fullname="T. Berners-Lee">
      <organization>W3C</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <date month="June" year="1999"/>
  </front>
  <seriesInfo name="RFC" value="2616"/>
</reference>

<reference anchor='RFC2817'>
  <front>
    <title>Upgrading to TLS Within HTTP/1.1</title>
    <author initials='R.' surname='Khare' fullname='R. Khare'>
      <organization>4K Associates / UC Irvine</organization>
      <address><email>rohit@4K-associates.com</email></address>
    </author>
    <author initials='S.' surname='Lawrence' fullname='S. Lawrence'>
      <organization>Agranat Systems, Inc.</organization>
      <address><email>lawrence@agranat.com</email></address>
    </author>
    <date year='2000' month='May' />
  </front>
  <seriesInfo name='RFC' value='2817' />
</reference>

<reference anchor='RFC2818'>
  <front>
    <title>HTTP Over TLS</title>
    <author initials='E.' surname='Rescorla' fullname='Eric Rescorla'>
      <organization>RTFM, Inc.</organization>
      <address><email>ekr@rtfm.com</email></address>
    </author>
    <date year='2000' month='May' />
  </front>
  <seriesInfo name='RFC' value='2818' />
</reference>

<reference anchor='RFC2965'>
  <front>
    <title>HTTP State Management Mechanism</title>
    <author initials='D. M.' surname='Kristol' fullname='David M. Kristol'>
      <organization>Bell Laboratories, Lucent Technologies</organization>
      <address><email>dmk@bell-labs.com</email></address>
    </author>
    <author initials='L.' surname='Montulli' fullname='Lou Montulli'>
      <organization>Epinions.com, Inc.</organization>
      <address><email>lou@montulli.org</email></address>
    </author>
    <date year='2000' month='October' />
  </front>
  <seriesInfo name='RFC' value='2965' />
</reference>

<reference anchor='RFC3864'>
  <front>
    <title>Registration Procedures for Message Header Fields</title>
    <author initials='G.' surname='Klyne' fullname='G. Klyne'>
      <organization>Nine by Nine</organization>
      <address><email>GK-IETF@ninebynine.org</email></address>
    </author>
    <author initials='M.' surname='Nottingham' fullname='M. Nottingham'>
      <organization>BEA Systems</organization>
      <address><email>mnot@pobox.com</email></address>
    </author>
    <author initials='J.' surname='Mogul' fullname='J. Mogul'>
      <organization>HP Labs</organization>
      <address><email>JeffMogul@acm.org</email></address>
    </author>
    <date year='2004' month='September' />
  </front>
  <seriesInfo name='BCP' value='90' />
  <seriesInfo name='RFC' value='3864' />
</reference>

<reference anchor="RFC4288">
  <front>
    <title>Media Type Specifications and Registration Procedures</title>
    <author initials="N." surname="Freed" fullname="N. Freed">
      <organization>Sun Microsystems</organization>
      <address>
        <email>ned.freed@mrochek.com</email>
      </address>
    </author>
    <author initials="J." surname="Klensin" fullname="J. Klensin">
      <address>
        <email>klensin+ietf@jck.com</email>
      </address>
    </author>
    <date year="2005" month="December"/>
  </front>
  <seriesInfo name="BCP" value="13"/>
  <seriesInfo name="RFC" value="4288"/>
</reference>

<reference anchor='RFC4395'>
  <front>
    <title>Guidelines and Registration Procedures for New URI Schemes</title>
    <author initials='T.' surname='Hansen' fullname='T. Hansen'>
      <organization>AT&amp;T Laboratories</organization>
      <address>
        <email>tony+urireg@maillennium.att.com</email>
      </address>
    </author>
    <author initials='T.' surname='Hardie' fullname='T. Hardie'>
      <organization>Qualcomm, Inc.</organization>
      <address>
        <email>hardie@qualcomm.com</email>
      </address>
    </author>
    <author initials='L.' surname='Masinter' fullname='L. Masinter'>
      <organization>Adobe Systems</organization>
      <address>
        <email>LMM@acm.org</email>
      </address>
    </author>
    <date year='2006' month='February' />
  </front>
  <seriesInfo name='BCP' value='115' />
  <seriesInfo name='RFC' value='4395' />
</reference>

<reference anchor='RFC5226'>
  <front>
    <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
    <author initials='T.' surname='Narten' fullname='T. Narten'>
      <organization>IBM</organization>
      <address><email>narten@us.ibm.com</email></address>
    </author>
    <author initials='H.' surname='Alvestrand' fullname='H. Alvestrand'>
      <organization>Google</organization>
      <address><email>Harald@Alvestrand.no</email></address>
    </author>
    <date year='2008' month='May' />
  </front>
  <seriesInfo name='BCP' value='26' />
  <seriesInfo name='RFC' value='5226' />
</reference>

<reference anchor="RFC5322">
  <front>
    <title>Internet Message Format</title>
    <author initials="P." surname="Resnick" fullname="P. Resnick">
      <organization>Qualcomm Incorporated</organization>
    </author>
    <date year="2008" month="October"/>
  </front> 
  <seriesInfo name="RFC" value="5322"/>
</reference>

<reference anchor='BCP97'>
  <front>
    <title>Handling Normative References to Standards-Track Documents</title>
    <author initials='J.' surname='Klensin' fullname='J. Klensin'>
      <address>
        <email>klensin+ietf@jck.com</email>
      </address>
    </author>
    <author initials='S.' surname='Hartman' fullname='S. Hartman'>
      <organization>MIT</organization>
      <address>
        <email>hartmans-ietf@mit.edu</email>
      </address>
    </author>
    <date year='2007' month='June' />
  </front>
  <seriesInfo name='BCP' value='97' />
  <seriesInfo name='RFC' value='4897' />
</reference>

<reference anchor="Kri2001" target="http://arxiv.org/abs/cs.SE/0105018">
  <front>
    <title>HTTP Cookies: Standards, Privacy, and Politics</title>
    <author initials="D." surname="Kristol" fullname="David M. Kristol"/>
    <date year="2001" month="November"/>
  </front>
  <seriesInfo name="ACM Transactions on Internet Technology" value="Vol. 1, #2"/>
</reference>

<reference anchor="Spe" target="http://sunsite.unc.edu/mdma-release/http-prob.html">
  <front>
    <title>Analysis of HTTP Performance Problems</title>
    <author initials="S." surname="Spero" fullname="Simon E. Spero"/>
    <date/>
  </front>
</reference>

<reference anchor="Tou1998" target="http://www.isi.edu/touch/pubs/http-perf96/">
  <front>
  <title>Analysis of HTTP Performance</title>
  <author initials="J." surname="Touch" fullname="Joe Touch">
    <organization>USC/Information Sciences Institute</organization>
    <address><email>touch@isi.edu</email></address>
  </author>
  <author initials="J." surname="Heidemann" fullname="John Heidemann">
    <organization>USC/Information Sciences Institute</organization>
    <address><email>johnh@isi.edu</email></address>
  </author>
  <author initials="K." surname="Obraczka" fullname="Katia Obraczka">
    <organization>USC/Information Sciences Institute</organization>
    <address><email>katia@isi.edu</email></address>
  </author>
  <date year="1998" month="Aug"/>
  </front>
  <seriesInfo name="ISI Research Report" value="ISI/RR-98-463"/>
  <annotation>(original report dated Aug. 1996)</annotation>
</reference>

</references>


<section title="Tolerant Applications" anchor="tolerant.applications">
<t>
   Although this document specifies the requirements for the generation
   of HTTP/1.1 messages, not all applications will be correct in their
   implementation. We therefore recommend that operational applications
   be tolerant of deviations whenever those deviations can be
   interpreted unambiguously.
</t>
<t>
   Clients &SHOULD; be tolerant in parsing the Status-Line and servers
   tolerant when parsing the Request-Line. In particular, they &SHOULD;
   accept any amount of WSP characters between fields, even though
   only a single SP is required.
</t>
<t>
   The line terminator for header fields is the sequence CRLF.
   However, we recommend that applications, when parsing such headers,
   recognize a single LF as a line terminator and ignore the leading CR.
</t>
<t>
   The character set of an entity-body &SHOULD; be labeled as the lowest
   common denominator of the character codes used within that body, with
   the exception that not labeling the entity is preferred over labeling
   the entity with the labels US-ASCII or ISO-8859-1. See &payload;.
</t>
<t>
   Additional rules for requirements on parsing and encoding of dates
   and other potential problems with date encodings include:
</t>
<t>
  <list style="symbols">
     <t>HTTP/1.1 clients and caches &SHOULD; assume that an RFC-850 date
        which appears to be more than 50 years in the future is in fact
        in the past (this helps solve the "year 2000" problem).</t>

     <t>An HTTP/1.1 implementation &MAY; internally represent a parsed
        Expires date as earlier than the proper value, but &MUST-NOT;
        internally represent a parsed Expires date as later than the
        proper value.</t>

     <t>All expiration-related calculations &MUST; be done in GMT. The
        local time zone &MUST-NOT; influence the calculation or comparison
        of an age or expiration time.</t>

     <t>If an HTTP header incorrectly carries a date value with a time
        zone other than GMT, it &MUST; be converted into GMT using the
        most conservative possible conversion.</t>
  </list>
</t>
</section>

<section title="Compatibility with Previous Versions" anchor="compatibility">
<t>
   HTTP has been in use by the World-Wide Web global information initiative
   since 1990. The first version of HTTP, later referred to as HTTP/0.9,
   was a simple protocol for hypertext data transfer across the Internet
   with only a single method and no metadata.
   HTTP/1.0, as defined by <xref target="RFC1945"/>, added a range of request
   methods and MIME-like messaging that could include metadata about the data
   transferred and modifiers on the request/response semantics. However,
   HTTP/1.0 did not sufficiently take into consideration the effects of
   hierarchical proxies, caching, the need for persistent connections, or
   name-based virtual hosts. The proliferation of incompletely-implemented
   applications calling themselves "HTTP/1.0" further necessitated a
   protocol version change in order for two communicating applications
   to determine each other's true capabilities.
</t>
<t>
   HTTP/1.1 remains compatible with HTTP/1.0 by including more stringent
   requirements that enable reliable implementations, adding only
   those new features that will either be safely ignored by an HTTP/1.0
   recipient or only sent when communicating with a party advertising
   compliance with HTTP/1.1.
</t>
<t>
   It is beyond the scope of a protocol specification to mandate
   compliance with previous versions. HTTP/1.1 was deliberately
   designed, however, to make supporting previous versions easy. It is
   worth noting that, at the time of composing this specification, we would
   expect general-purpose HTTP/1.1 servers to:
  <list style="symbols">
     <t>understand any valid request in the format of HTTP/1.0 and
        1.1;</t>

     <t>respond appropriately with a message in the same major version
        used by the client.</t>
  </list>
</t>
<t>
   And we would expect HTTP/1.1 clients to:
  <list style="symbols">
     <t>understand any valid response in the format of HTTP/1.0 or
        1.1.</t>
  </list>
</t>
<t>
   For most implementations of HTTP/1.0, each connection is established
   by the client prior to the request and closed by the server after
   sending the response. Some implementations implement the Keep-Alive
   version of persistent connections described in <xref x:sec="19.7.1" x:fmt="of" target="RFC2068"/>.
</t>

<section title="Changes from HTTP/1.0" anchor="changes.from.1.0">
<t>
   This section summarizes major differences between versions HTTP/1.0
   and HTTP/1.1.
</t>

<section title="Changes to Simplify Multi-homed Web Servers and Conserve IP Addresses" anchor="changes.to.simplify.multi-homed.web.servers.and.conserve.ip.addresses">
<t>
   The requirements that clients and servers support the Host request-header,
   report an error if the Host request-header (<xref target="header.host"/>) is
   missing from an HTTP/1.1 request, and accept absolute URIs (<xref target="request-target"/>)
   are among the most important changes defined by this
   specification.
</t>
<t>
   Older HTTP/1.0 clients assumed a one-to-one relationship of IP
   addresses and servers; there was no other established mechanism for
   distinguishing the intended server of a request than the IP address
   to which that request was directed. The changes outlined above will
   allow the Internet, once older HTTP clients are no longer common, to
   support multiple Web sites from a single IP address, greatly
   simplifying large operational Web servers, where allocation of many
   IP addresses to a single host has created serious problems. The
   Internet will also be able to recover the IP addresses that have been
   allocated for the sole purpose of allowing special-purpose domain
   names to be used in root-level HTTP URLs. Given the rate of growth of
   the Web, and the number of servers already deployed, it is extremely
   important that all implementations of HTTP (including updates to
   existing HTTP/1.0 applications) correctly implement these
   requirements:
  <list style="symbols">
     <t>Both clients and servers &MUST; support the Host request-header.</t>

     <t>A client that sends an HTTP/1.1 request &MUST; send a Host header.</t>

     <t>Servers &MUST; report a 400 (Bad Request) error if an HTTP/1.1
        request does not include a Host request-header.</t>

     <t>Servers &MUST; accept absolute URIs.</t>
  </list>
</t>
</section>
</section>

<section title="Compatibility with HTTP/1.0 Persistent Connections" anchor="compatibility.with.http.1.0.persistent.connections">
<t>
   Some clients and servers might wish to be compatible with some
   previous implementations of persistent connections in HTTP/1.0
   clients and servers. Persistent connections in HTTP/1.0 are
   explicitly negotiated as they are not the default behavior. HTTP/1.0
   experimental implementations of persistent connections are faulty,
   and the new facilities in HTTP/1.1 are designed to rectify these
   problems. The problem was that some existing 1.0 clients may be
   sending Keep-Alive to a proxy server that doesn't understand
   Connection, which would then erroneously forward it to the next
   inbound server, which would establish the Keep-Alive connection and
   result in a hung HTTP/1.0 proxy waiting for the close on the
   response. The result is that HTTP/1.0 clients must be prevented from
   using Keep-Alive when talking to proxies.
</t>
<t>
   However, talking to proxies is the most important use of persistent
   connections, so that prohibition is clearly unacceptable. Therefore,
   we need some other mechanism for indicating a persistent connection
   is desired, which is safe to use even when talking to an old proxy
   that ignores Connection. Persistent connections are the default for
   HTTP/1.1 messages; we introduce a new keyword (Connection: close) for
   declaring non-persistence. See <xref target="header.connection"/>.
</t>
<t>
   The original HTTP/1.0 form of persistent connections (the Connection:
   Keep-Alive and Keep-Alive header) is documented in <xref x:sec="19.7.1" x:fmt="of" target="RFC2068"/>.
</t>
</section>

<section title="Changes from RFC 2068" anchor="changes.from.rfc.2068">
<t>
   This specification has been carefully audited to correct and
   disambiguate key word usage; RFC 2068 had many problems in respect to
   the conventions laid out in <xref target="RFC2119"/>.
</t>
<t>
   Transfer-coding and message lengths all interact in ways that
   required fixing exactly when chunked encoding is used (to allow for
   transfer encoding that may not be self delimiting); it was important
   to straighten out exactly how message lengths are computed. (Sections
   <xref target="transfer.codings" format="counter"/>, <xref target="message.length" format="counter"/>,
   <xref target="header.content-length" format="counter"/>,
   see also <xref target="Part3"/>, <xref target="Part5"/> and <xref target="Part6"/>)
</t>
<t>
   The use and interpretation of HTTP version numbers has been clarified
   by <xref target="RFC2145"/>. Require proxies to upgrade requests to highest protocol
   version they support to deal with problems discovered in HTTP/1.0
   implementations (<xref target="http.version"/>)
</t>
<t>
   Quality Values of zero should indicate that "I don't want something"
   to allow clients to refuse a representation. (<xref target="quality.values"/>)
</t>
<t>
   Transfer-coding had significant problems, particularly with
   interactions with chunked encoding. The solution is that transfer-codings
   become as full fledged as content-codings. This involves
   adding an IANA registry for transfer-codings (separate from content
   codings), a new header field (TE) and enabling trailer headers in the
   future. Transfer encoding is a major performance benefit, so it was
   worth fixing <xref target="Nie1997"/>. TE also solves another, obscure, downward
   interoperability problem that could have occurred due to interactions
   between authentication trailers, chunked encoding and HTTP/1.0
   clients.(Section <xref target="transfer.codings" format="counter"/>, <xref target="chunked.encoding" format="counter"/>,
   and <xref target="header.te" format="counter"/>)
</t>
</section>

<section title="Changes from RFC 2616" anchor="changes.from.rfc.2616">
<t>
  Empty list elements in list productions have been deprecated.
  (<xref target="notation.abnf"/>)
</t>
<t>
  Rules about implicit linear whitespace between certain grammar productions
  have been removed; now it's only allowed when specifically pointed out
  in the ABNF. The NUL character is no longer allowed in comment and quoted-string
  text. The quoted-pair rule no longer allows escaping control characters other than HTAB.
  Non-ASCII content in header fields and reason phrase has been obsoleted and
  made opaque (the TEXT rule was removed)
  (<xref target="basic.rules"/>)
</t>
<t>
  Clarify that HTTP-Version is case sensitive.
  (<xref target="http.version"/>)
</t>
<t>
  Remove reference to non-existant identity transfer-coding value tokens.
  (Sections <xref format="counter" target="transfer.codings"/> and
  <xref format="counter" target="message.length"/>)
</t>
<t>
  Require that invalid whitespace around field-names be rejected.
  (<xref target="header.fields"/>)
</t>
<t>
  Update use of abs_path production from RFC1808 to the path-absolute + query
  components of RFC3986.
  (<xref target="request-target"/>)
</t>
<t>
  Clarification that the chunk length does not include the count of the octets
  in the chunk header and trailer. Furthermore disallowed line folding
  in chunk extensions.
  (<xref target="chunked.encoding"/>)
</t>
<t>
  Remove hard limit of two connections per server.
  (<xref target="persistent.practical"/>)
</t>
<t>
  Clarify exactly when close connection options must be sent.
  (<xref target="header.connection"/>)
</t>
</section>
</section>

<?BEGININC p1-messaging.abnf-appendix ?>
<section xmlns:x="http://purl.org/net/xml2rfc/ext" title="Collected ABNF" anchor="collected.abnf">
<figure>
<artwork type="abnf" name="p1-messaging.parsed-abnf">
<x:ref>BWS</x:ref> = OWS

<x:ref>Cache-Control</x:ref> = &lt;Cache-Control, defined in [Part6], Section 3.4&gt;
<x:ref>Chunked-Body</x:ref> = *chunk last-chunk trailer-part CRLF
<x:ref>Connection</x:ref> = "Connection:" OWS Connection-v
<x:ref>Connection-v</x:ref> = *( "," OWS ) connection-token *( OWS "," [ OWS
 connection-token ] )
<x:ref>Content-Length</x:ref> = "Content-Length:" OWS 1*Content-Length-v
<x:ref>Content-Length-v</x:ref> = 1*DIGIT

<x:ref>Date</x:ref> = "Date:" OWS Date-v
<x:ref>Date-v</x:ref> = HTTP-date

<x:ref>GMT</x:ref> = %x47.4D.54 ; GMT

<x:ref>HTTP-Prot-Name</x:ref> = %x48.54.54.50 ; HTTP
<x:ref>HTTP-Version</x:ref> = HTTP-Prot-Name "/" 1*DIGIT "." 1*DIGIT
<x:ref>HTTP-date</x:ref> = rfc1123-date / obs-date
<x:ref>HTTP-message</x:ref> = start-line *( header-field CRLF ) CRLF [ message-body
 ]
<x:ref>Host</x:ref> = "Host:" OWS Host-v
<x:ref>Host-v</x:ref> = uri-host [ ":" port ]

<x:ref>Method</x:ref> = token

<x:ref>OWS</x:ref> = *( [ obs-fold ] WSP )

<x:ref>Pragma</x:ref> = &lt;Pragma, defined in [Part6], Section 3.4&gt;

<x:ref>RWS</x:ref> = 1*( [ obs-fold ] WSP )
<x:ref>Reason-Phrase</x:ref> = *( WSP / VCHAR / obs-text )
<x:ref>Request</x:ref> = Request-Line *( ( general-header / request-header /
 entity-header ) CRLF ) CRLF [ message-body ]
<x:ref>Request-Line</x:ref> = Method SP request-target SP HTTP-Version CRLF
<x:ref>Response</x:ref> = Status-Line *( ( general-header / response-header /
 entity-header ) CRLF ) CRLF [ message-body ]

<x:ref>Status-Code</x:ref> = 3DIGIT
<x:ref>Status-Line</x:ref> = HTTP-Version SP Status-Code SP Reason-Phrase CRLF

<x:ref>TE</x:ref> = "TE:" OWS TE-v
<x:ref>TE-v</x:ref> = [ ( "," / t-codings ) *( OWS "," [ OWS t-codings ] ) ]
<x:ref>Trailer</x:ref> = "Trailer:" OWS Trailer-v
<x:ref>Trailer-v</x:ref> = *( "," OWS ) field-name *( OWS "," [ OWS field-name ] )
<x:ref>Transfer-Encoding</x:ref> = "Transfer-Encoding:" OWS Transfer-Encoding-v
<x:ref>Transfer-Encoding-v</x:ref> = *( "," OWS ) transfer-coding *( OWS "," [ OWS
 transfer-coding ] )

<x:ref>URI</x:ref> = &lt;URI, defined in [RFC3986], Section 3&gt;
<x:ref>URI-reference</x:ref> = &lt;URI-reference, defined in [RFC3986], Section 4.1&gt;
<x:ref>Upgrade</x:ref> = "Upgrade:" OWS Upgrade-v
<x:ref>Upgrade-v</x:ref> = *( "," OWS ) product *( OWS "," [ OWS product ] )

<x:ref>Via</x:ref> = "Via:" OWS Via-v
<x:ref>Via-v</x:ref> = *( "," OWS ) received-protocol RWS received-by [ RWS comment
 ] *( OWS "," [ OWS received-protocol RWS received-by [ RWS comment ]
 ] )

<x:ref>Warning</x:ref> = &lt;Warning, defined in [Part6], Section 3.6&gt;

<x:ref>absolute-URI</x:ref> = &lt;absolute-URI, defined in [RFC3986], Section 4.3&gt;
<x:ref>asctime-date</x:ref> = day-name SP date3 SP time-of-day SP year
<x:ref>attribute</x:ref> = token
<x:ref>authority</x:ref> = &lt;authority, defined in [RFC3986], Section 3.2&gt;

<x:ref>chunk</x:ref> = chunk-size *WSP [ chunk-ext ] CRLF chunk-data CRLF
<x:ref>chunk-data</x:ref> = 1*OCTET
<x:ref>chunk-ext</x:ref> = *( ";" *WSP chunk-ext-name [ "=" chunk-ext-val ] *WSP )
<x:ref>chunk-ext-name</x:ref> = token
<x:ref>chunk-ext-val</x:ref> = token / quoted-str-nf
<x:ref>chunk-size</x:ref> = 1*HEXDIG
<x:ref>comment</x:ref> = "(" *( ctext / quoted-cpair / comment ) ")"
<x:ref>connection-token</x:ref> = token
<x:ref>ctext</x:ref> = OWS / %x21-27 ; '!'-'''
 / %x2A-5B ; '*'-'['
 / %x5D-7E ; ']'-'~'
 / obs-text

<x:ref>date1</x:ref> = day SP month SP year
<x:ref>date2</x:ref> = day "-" month "-" 2DIGIT
<x:ref>date3</x:ref> = month SP ( 2DIGIT / ( SP DIGIT ) )
<x:ref>day</x:ref> = 2DIGIT
<x:ref>day-name</x:ref> = %x4D.6F.6E ; Mon
 / %x54.75.65 ; Tue
 / %x57.65.64 ; Wed
 / %x54.68.75 ; Thu
 / %x46.72.69 ; Fri
 / %x53.61.74 ; Sat
 / %x53.75.6E ; Sun
<x:ref>day-name-l</x:ref> = %x4D.6F.6E.64.61.79 ; Monday
 / %x54.75.65.73.64.61.79 ; Tuesday
 / %x57.65.64.6E.65.73.64.61.79 ; Wednesday
 / %x54.68.75.72.73.64.61.79 ; Thursday
 / %x46.72.69.64.61.79 ; Friday
 / %x53.61.74.75.72.64.61.79 ; Saturday
 / %x53.75.6E.64.61.79 ; Sunday

<x:ref>entity-body</x:ref> = &lt;entity-body, defined in [Part3], Section 3.2&gt;
<x:ref>entity-header</x:ref> = &lt;entity-header, defined in [Part3], Section 3.1&gt;

<x:ref>field-content</x:ref> = *( WSP / VCHAR / obs-text )
<x:ref>field-name</x:ref> = token
<x:ref>field-value</x:ref> = *( field-content / OWS )

<x:ref>general-header</x:ref> = Cache-Control / Connection / Date / Pragma / Trailer
 / Transfer-Encoding / Upgrade / Via / Warning

<x:ref>header-field</x:ref> = field-name ":" OWS [ field-value ] OWS
<x:ref>hour</x:ref> = 2DIGIT
<x:ref>http-URI</x:ref> = "http://" authority path-abempty [ "?" query ]
<x:ref>https-URI</x:ref> = "https://" authority path-abempty [ "?" query ]

<x:ref>last-chunk</x:ref> = 1*"0" *WSP [ chunk-ext ] CRLF

<x:ref>message-body</x:ref> = entity-body /
 &lt;entity-body encoded as per Transfer-Encoding&gt;
<x:ref>minute</x:ref> = 2DIGIT
<x:ref>month</x:ref> = %x4A.61.6E ; Jan
 / %x46.65.62 ; Feb
 / %x4D.61.72 ; Mar
 / %x41.70.72 ; Apr
 / %x4D.61.79 ; May
 / %x4A.75.6E ; Jun
 / %x4A.75.6C ; Jul
 / %x41.75.67 ; Aug
 / %x53.65.70 ; Sep
 / %x4F.63.74 ; Oct
 / %x4E.6F.76 ; Nov
 / %x44.65.63 ; Dec

<x:ref>obs-date</x:ref> = rfc850-date / asctime-date
<x:ref>obs-fold</x:ref> = CRLF
<x:ref>obs-text</x:ref> = %x80-FF

<x:ref>partial-URI</x:ref> = relative-part [ "?" query ]
<x:ref>path-abempty</x:ref> = &lt;path-abempty, defined in [RFC3986], Section 3.3&gt;
<x:ref>path-absolute</x:ref> = &lt;path-absolute, defined in [RFC3986], Section 3.3&gt;
<x:ref>port</x:ref> = &lt;port, defined in [RFC3986], Section 3.2.3&gt;
<x:ref>product</x:ref> = token [ "/" product-version ]
<x:ref>product-version</x:ref> = token
<x:ref>protocol-name</x:ref> = token
<x:ref>protocol-version</x:ref> = token
<x:ref>pseudonym</x:ref> = token

<x:ref>qdtext</x:ref> = OWS / "!" / %x23-5B ; '#'-'['
 / %x5D-7E ; ']'-'~'
 / obs-text
<x:ref>qdtext-nf</x:ref> = WSP / "!" / %x23-5B ; '#'-'['
 / %x5D-7E ; ']'-'~'
 / obs-text
<x:ref>query</x:ref> = &lt;query, defined in [RFC3986], Section 3.4&gt;
<x:ref>quoted-cpair</x:ref> = "\" ( WSP / VCHAR / obs-text )
<x:ref>quoted-pair</x:ref> = "\" ( WSP / VCHAR / obs-text )
<x:ref>quoted-str-nf</x:ref> = DQUOTE *( qdtext-nf / quoted-pair ) DQUOTE
<x:ref>quoted-string</x:ref> = DQUOTE *( qdtext / quoted-pair ) DQUOTE
<x:ref>qvalue</x:ref> = ( "0" [ "." *3DIGIT ] ) / ( "1" [ "." *3"0" ] )

<x:ref>received-by</x:ref> = ( uri-host [ ":" port ] ) / pseudonym
<x:ref>received-protocol</x:ref> = [ protocol-name "/" ] protocol-version
<x:ref>relative-part</x:ref> = &lt;relative-part, defined in [RFC3986], Section 4.2&gt;
<x:ref>request-header</x:ref> = &lt;request-header, defined in [Part2], Section 3&gt;
<x:ref>request-target</x:ref> = "*" / absolute-URI / ( path-absolute [ "?" query ] )
 / authority
<x:ref>response-header</x:ref> = &lt;response-header, defined in [Part2], Section 5&gt;
<x:ref>rfc1123-date</x:ref> = day-name "," SP date1 SP time-of-day SP GMT
<x:ref>rfc850-date</x:ref> = day-name-l "," SP date2 SP time-of-day SP GMT

<x:ref>second</x:ref> = 2DIGIT
<x:ref>special</x:ref> = "(" / ")" / "&lt;" / "&gt;" / "@" / "," / ";" / ":" / "\" /
 DQUOTE / "/" / "[" / "]" / "?" / "=" / "{" / "}"
<x:ref>start-line</x:ref> = Request-Line / Status-Line

<x:ref>t-codings</x:ref> = "trailers" / ( transfer-extension [ te-params ] )
<x:ref>tchar</x:ref> = "!" / "#" / "$" / "%" / "&amp;" / "'" / "*" / "+" / "-" / "." /
 "^" / "_" / "`" / "|" / "~" / DIGIT / ALPHA
<x:ref>te-ext</x:ref> = OWS ";" OWS token [ "=" ( token / quoted-string ) ]
<x:ref>te-params</x:ref> = OWS ";" OWS "q=" qvalue *te-ext
<x:ref>time-of-day</x:ref> = hour ":" minute ":" second
<x:ref>token</x:ref> = 1*tchar
<x:ref>trailer-part</x:ref> = *( entity-header CRLF )
<x:ref>transfer-coding</x:ref> = "chunked" / "compress" / "deflate" / "gzip" /
 transfer-extension
<x:ref>transfer-extension</x:ref> = token *( OWS ";" OWS transfer-parameter )
<x:ref>transfer-parameter</x:ref> = attribute BWS "=" BWS value

<x:ref>uri-host</x:ref> = &lt;host, defined in [RFC3986], Section 3.2.2&gt;

<x:ref>value</x:ref> = token / quoted-string

<x:ref>year</x:ref> = 4DIGIT
</artwork>
</figure>
<figure><preamble>ABNF diagnostics:</preamble><artwork type="inline">
; Chunked-Body defined but not used
; Content-Length defined but not used
; HTTP-message defined but not used
; Host defined but not used
; Request defined but not used
; Response defined but not used
; TE defined but not used
; URI defined but not used
; URI-reference defined but not used
; http-URI defined but not used
; https-URI defined but not used
; partial-URI defined but not used
; special defined but not used
</artwork></figure></section>
<?ENDINC p1-messaging.abnf-appendix ?>

<section title="Change Log (to be removed by RFC Editor before publication)" anchor="change.log">

<section title="Since RFC2616">
<t>
  Extracted relevant partitions from <xref target="RFC2616"/>.
</t>
</section>

<section title="Since draft-ietf-httpbis-p1-messaging-00">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/1"/>:
      "HTTP Version should be case sensitive"
      (<eref target="http://purl.org/NET/http-errata#verscase"/>)
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/2"/>:
      "'unsafe' characters"
      (<eref target="http://purl.org/NET/http-errata#unsafe-uri"/>)
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/3"/>:
      "Chunk Size Definition"
      (<eref target="http://purl.org/NET/http-errata#chunk-size"/>)
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/4"/>:
      "Message Length"
      (<eref target="http://purl.org/NET/http-errata#msg-len-chars"/>)
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/8"/>:
      "Media Type Registrations"
      (<eref target="http://purl.org/NET/http-errata#media-reg"/>)
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/11"/>:
      "URI includes query"
      (<eref target="http://purl.org/NET/http-errata#uriquery"/>)
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/15"/>:
      "No close on 1xx responses"
      (<eref target="http://purl.org/NET/http-errata#noclose1xx"/>)
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/16"/>:
      "Remove 'identity' token references"
      (<eref target="http://purl.org/NET/http-errata#identity"/>)
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/26"/>:
      "Import query BNF"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/31"/>:
      "qdtext BNF"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/35"/>:
      "Normative and Informative references"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/42"/>:
      "RFC2606 Compliance"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/45"/>:
      "RFC977 reference"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/46"/>:
      "RFC1700 references"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/47"/>:
      "inconsistency in date format explanation"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/48"/>:
      "Date reference typo"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/65"/>:
      "Informative references"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/66"/>:
      "ISO-8859-1 Reference"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/86"/>:
      "Normative up-to-date references"
    </t>
  </list>
</t>
<t>
  Other changes:
  <list style="symbols"> 
    <t>
      Update media type registrations to use RFC4288 template.
    </t>
    <t>
      Use names of RFC4234 core rules DQUOTE and WSP,
      fix broken ABNF for chunk-data
      (work in progress on <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/36"/>)
    </t>
  </list>
</t>
</section>

<section title="Since draft-ietf-httpbis-p1-messaging-01">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/19"/>:
      "Bodies on GET (and other) requests"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/55"/>:
      "Updating to RFC4288"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/57"/>:
      "Status Code and Reason Phrase"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/82"/>:
      "rel_path not used"
    </t>
  </list>
</t>
<t>
  Ongoing work on ABNF conversion (<eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/36"/>):
  <list style="symbols"> 
    <t>
      Get rid of duplicate BNF rule names ("host" -> "uri-host", "trailer" ->
      "trailer-part").
    </t>
    <t>
      Avoid underscore character in rule names ("http_URL" ->
      "http-URL", "abs_path" -> "path-absolute").
    </t>
    <t>
      Add rules for terms imported from URI spec ("absoluteURI", "authority",
      "path-absolute", "port", "query", "relativeURI", "host) -- these will
      have to be updated when switching over to RFC3986.
    </t>
    <t>
      Synchronize core rules with RFC5234.
    </t>
    <t>
      Get rid of prose rules that span multiple lines.
    </t>
    <t>
      Get rid of unused rules LOALPHA and UPALPHA.
    </t>
    <t>
      Move "Product Tokens" section (back) into Part 1, as "token" is used
      in the definition of the Upgrade header.
    </t>
    <t>
      Add explicit references to BNF syntax and rules imported from other parts of the specification.
    </t>
    <t>
      Rewrite prose rule "token" in terms of "tchar", rewrite prose rule "TEXT".
    </t>
  </list>
</t>
</section>

<section title="Since draft-ietf-httpbis-p1-messaging-02" anchor="changes.since.02">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/51"/>:
      "HTTP-date vs. rfc1123-date"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/64"/>:
      "WS in quoted-pair"
    </t>
  </list>
</t>
<t>
  Ongoing work on IANA Message Header Registration (<eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/40"/>):
  <list style="symbols"> 
    <t>
      Reference RFC 3984, and update header registrations for headers defined
      in this document.
    </t>
  </list>
</t>
<t>
  Ongoing work on ABNF conversion (<eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/36"/>):
  <list style="symbols"> 
    <t>
      Replace string literals when the string really is case-sensitive (HTTP-Version).
    </t>
  </list>
</t>
</section>

<section title="Since draft-ietf-httpbis-p1-messaging-03" anchor="changes.since.03">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/28"/>:
      "Connection closing"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/97"/>:
      "Move registrations and registry information to IANA Considerations"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/120"/>:
      "need new URL for PAD1995 reference"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/127"/>:
      "IANA Considerations: update HTTP URI scheme registration"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/128"/>:
      "Cite HTTPS URI scheme definition"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/129"/>:
      "List-type headers vs Set-Cookie"
    </t>
  </list>
</t>
<t>
  Ongoing work on ABNF conversion (<eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/36"/>):
  <list style="symbols"> 
    <t>
      Replace string literals when the string really is case-sensitive (HTTP-Date).
    </t>
    <t>
      Replace HEX by HEXDIG for future consistence with RFC 5234's core rules. 
    </t>
  </list>
</t>
</section>

<section title="Since draft-ietf-httpbis-p1-messaging-04" anchor="changes.since.04">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/34"/>:
      "Out-of-date reference for URIs"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/132"/>:
      "RFC 2822 is updated by RFC 5322"
    </t>
  </list>
</t>
<t>
  Ongoing work on ABNF conversion (<eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/36"/>):
  <list style="symbols"> 
    <t>
      Use "/" instead of "|" for alternatives.
    </t>
    <t>
      Get rid of RFC822 dependency; use RFC5234 plus extensions instead.
    </t>
    <t>
      Only reference RFC 5234's core rules.
    </t>
    <t>
      Introduce new ABNF rules for "bad" whitespace ("BWS"), optional
      whitespace ("OWS") and required whitespace ("RWS").
    </t>
    <t>
      Rewrite ABNFs to spell out whitespace rules, factor out
      header value format definitions.
    </t>
  </list>
</t>
</section>

<section title="Since draft-ietf-httpbis-p1-messaging-05" anchor="changes.since.05">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/30"/>:
      "Header LWS"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/52"/>:
      "Sort 1.3 Terminology"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/63"/>:
      "RFC2047 encoded words"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/74"/>:
      "Character Encodings in TEXT"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/77"/>:
      "Line Folding"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/83"/>:
      "OPTIONS * and proxies"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/94"/>:
      "Reason-Phrase BNF"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/111"/>:
      "Use of TEXT"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/118"/>:
      "Join "Differences Between HTTP Entities and RFC 2045 Entities"?"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/134"/>:
      "RFC822 reference left in discussion of date formats"
    </t>
  </list>
</t>
<t>
  Final work on ABNF conversion (<eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/36"/>):
  <list style="symbols"> 
    <t>
      Rewrite definition of list rules, deprecate empty list elements.
    </t>
    <t>
      Add appendix containing collected and expanded ABNF.
    </t>
  </list>
</t>
<t>
  Other changes:
  <list style="symbols"> 
    <t>
      Rewrite introduction; add mostly new Architecture Section.
    </t>
    <t>
      Move definition of quality values from Part 3 into Part 1;
      make TE request header grammar independent of accept-params (defined in Part 3).
    </t>
  </list>
</t>
</section>

<section title="Since draft-ietf-httpbis-p1-messaging-06" anchor="changes.since.06">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/161"/>:
      "base for numeric protocol elements"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/162"/>:
      "comment ABNF"
    </t>
  </list>
</t>
<t>
  Partly resolved issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/88"/>:
      "205 Bodies" (took out language that implied that there may be
      methods for which a request body MUST NOT be included)
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/163"/>:
      "editorial improvements around HTTP-date"
    </t>
  </list>
</t>
</section>

<section title="Since draft-ietf-httpbis-p1-messaging-07" anchor="changes.since.07">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/93"/>:
      "Repeating single-value headers"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/131"/>:
      "increase connection limit"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/157"/>:
      "IP addresses in URLs"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/172"/>:
      "take over HTTP Upgrade Token Registry"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/173"/>:
      "CR and LF in chunk extension values"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/184"/>:
      "HTTP/0.9 support"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/188"/>:
      "pick IANA policy (RFC5226) for Transfer Coding / Content Coding"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/189"/>:
      "move definitions of gzip/deflate/compress to part 1"
    </t>
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/194"/>:
      "disallow control characters in quoted-pair"
    </t>
  </list>
</t>
<t>
  Partly resolved issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/148"/>:
      "update IANA requirements wrt Transfer-Coding values" (add the
      IANA Considerations subsection)
    </t>
  </list>
</t>
</section>

<section title="Since draft-ietf-httpbis-p1-messaging-08" anchor="changes.since.08">
<t>
  Closed issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/201"/>:
      "header parsing, treatment of leading and trailing OWS"
    </t>
  </list>
</t>
<t>
  Partly resolved issues:
  <list style="symbols"> 
    <t>
      <eref target="http://tools.ietf.org/wg/httpbis/trac/ticket/200"/>:
      "use of term "word" when talking about header structure"
    </t>
  </list>
</t>
</section>

</section>

</back>
</rfc>
